// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linkproto.proto

#ifndef PROTOBUF_linkproto_2eproto__INCLUDED
#define PROTOBUF_linkproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "linksystem.pb.h"
// @@protoc_insertion_point(includes)
class LinkAddCamReq;
class LinkAddCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddCamReqDefaultTypeInternal _LinkAddCamReq_default_instance_;
class LinkAddCamResp;
class LinkAddCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddCamRespDefaultTypeInternal _LinkAddCamResp_default_instance_;
class LinkAddDiskReq;
class LinkAddDiskReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddDiskReqDefaultTypeInternal _LinkAddDiskReq_default_instance_;
class LinkAddDiskResp;
class LinkAddDiskRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddDiskRespDefaultTypeInternal _LinkAddDiskResp_default_instance_;
class LinkAddUserReq;
class LinkAddUserReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddUserReqDefaultTypeInternal _LinkAddUserReq_default_instance_;
class LinkAddUserResp;
class LinkAddUserRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddUserRespDefaultTypeInternal _LinkAddUserResp_default_instance_;
class LinkCamAddNotify;
class LinkCamAddNotifyDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamAddNotifyDefaultTypeInternal _LinkCamAddNotify_default_instance_;
class LinkCamIdNotify;
class LinkCamIdNotifyDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamIdNotifyDefaultTypeInternal _LinkCamIdNotify_default_instance_;
class LinkCamReq;
class LinkCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamReqDefaultTypeInternal _LinkCamReq_default_instance_;
class LinkCamResp;
class LinkCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamRespDefaultTypeInternal _LinkCamResp_default_instance_;
class LinkCamSearchStartReq;
class LinkCamSearchStartReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchStartReqDefaultTypeInternal _LinkCamSearchStartReq_default_instance_;
class LinkCamSearchStartResp;
class LinkCamSearchStartRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchStartRespDefaultTypeInternal _LinkCamSearchStartResp_default_instance_;
class LinkCamSearchStopReq;
class LinkCamSearchStopReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchStopReqDefaultTypeInternal _LinkCamSearchStopReq_default_instance_;
class LinkCamSearchStopResp;
class LinkCamSearchStopRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchStopRespDefaultTypeInternal _LinkCamSearchStopResp_default_instance_;
class LinkCamSearchedNotify;
class LinkCamSearchedNotifyDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchedNotifyDefaultTypeInternal _LinkCamSearchedNotify_default_instance_;
class LinkConfLicReq;
class LinkConfLicReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkConfLicReqDefaultTypeInternal _LinkConfLicReq_default_instance_;
class LinkConfLicResp;
class LinkConfLicRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkConfLicRespDefaultTypeInternal _LinkConfLicResp_default_instance_;
class LinkDelCamReq;
class LinkDelCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelCamReqDefaultTypeInternal _LinkDelCamReq_default_instance_;
class LinkDelCamResp;
class LinkDelCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelCamRespDefaultTypeInternal _LinkDelCamResp_default_instance_;
class LinkDelDiskReq;
class LinkDelDiskReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelDiskReqDefaultTypeInternal _LinkDelDiskReq_default_instance_;
class LinkDelDiskResp;
class LinkDelDiskRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelDiskRespDefaultTypeInternal _LinkDelDiskResp_default_instance_;
class LinkEventNotify;
class LinkEventNotifyDefaultTypeInternal;
VE_LIBRARY_API extern LinkEventNotifyDefaultTypeInternal _LinkEventNotify_default_instance_;
class LinkEventSearchReq;
class LinkEventSearchReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkEventSearchReqDefaultTypeInternal _LinkEventSearchReq_default_instance_;
class LinkEventSearchResp;
class LinkEventSearchRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkEventSearchRespDefaultTypeInternal _LinkEventSearchResp_default_instance_;
class LinkGetLicReq;
class LinkGetLicReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetLicReqDefaultTypeInternal _LinkGetLicReq_default_instance_;
class LinkGetLicResp;
class LinkGetLicRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetLicRespDefaultTypeInternal _LinkGetLicResp_default_instance_;
class LinkGetStreamListReq;
class LinkGetStreamListReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetStreamListReqDefaultTypeInternal _LinkGetStreamListReq_default_instance_;
class LinkGetStreamListResp;
class LinkGetStreamListRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetStreamListRespDefaultTypeInternal _LinkGetStreamListResp_default_instance_;
class LinkGetVerReq;
class LinkGetVerReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetVerReqDefaultTypeInternal _LinkGetVerReq_default_instance_;
class LinkGetVerResp;
class LinkGetVerRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetVerRespDefaultTypeInternal _LinkGetVerResp_default_instance_;
class LinkHandleEventReq;
class LinkHandleEventReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkHandleEventReqDefaultTypeInternal _LinkHandleEventReq_default_instance_;
class LinkHandleEventResp;
class LinkHandleEventRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkHandleEventRespDefaultTypeInternal _LinkHandleEventResp_default_instance_;
class LinkHasRecordItem;
class LinkHasRecordItemDefaultTypeInternal;
VE_LIBRARY_API extern LinkHasRecordItemDefaultTypeInternal _LinkHasRecordItem_default_instance_;
class LinkHasRecordList;
class LinkHasRecordListDefaultTypeInternal;
VE_LIBRARY_API extern LinkHasRecordListDefaultTypeInternal _LinkHasRecordList_default_instance_;
class LinkHasRecordReq;
class LinkHasRecordReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkHasRecordReqDefaultTypeInternal _LinkHasRecordReq_default_instance_;
class LinkHasRecordResp;
class LinkHasRecordRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkHasRecordRespDefaultTypeInternal _LinkHasRecordResp_default_instance_;
class LinkKeepaliveReq;
class LinkKeepaliveReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkKeepaliveReqDefaultTypeInternal _LinkKeepaliveReq_default_instance_;
class LinkKeepaliveResp;
class LinkKeepaliveRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkKeepaliveRespDefaultTypeInternal _LinkKeepaliveResp_default_instance_;
class LinkListCamReq;
class LinkListCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkListCamReqDefaultTypeInternal _LinkListCamReq_default_instance_;
class LinkListCamResp;
class LinkListCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkListCamRespDefaultTypeInternal _LinkListCamResp_default_instance_;
class LinkLoginReq;
class LinkLoginReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkLoginReqDefaultTypeInternal _LinkLoginReq_default_instance_;
class LinkLoginResp;
class LinkLoginRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkLoginRespDefaultTypeInternal _LinkLoginResp_default_instance_;
class LinkPlayBackCmd;
class LinkPlayBackCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlayBackCmdDefaultTypeInternal _LinkPlayBackCmd_default_instance_;
class LinkPlayPauseCmd;
class LinkPlayPauseCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlayPauseCmdDefaultTypeInternal _LinkPlayPauseCmd_default_instance_;
class LinkPlayResumeCmd;
class LinkPlayResumeCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlayResumeCmdDefaultTypeInternal _LinkPlayResumeCmd_default_instance_;
class LinkPlaySeekCmd;
class LinkPlaySeekCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlaySeekCmdDefaultTypeInternal _LinkPlaySeekCmd_default_instance_;
class LinkPlayStopCmd;
class LinkPlayStopCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlayStopCmdDefaultTypeInternal _LinkPlayStopCmd_default_instance_;
class LinkPtzCmd;
class LinkPtzCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPtzCmdDefaultTypeInternal _LinkPtzCmd_default_instance_;
class LinkRecordItem;
class LinkRecordItemDefaultTypeInternal;
VE_LIBRARY_API extern LinkRecordItemDefaultTypeInternal _LinkRecordItem_default_instance_;
class LinkRecordList;
class LinkRecordListDefaultTypeInternal;
VE_LIBRARY_API extern LinkRecordListDefaultTypeInternal _LinkRecordList_default_instance_;
class LinkRegEventReq;
class LinkRegEventReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkRegEventReqDefaultTypeInternal _LinkRegEventReq_default_instance_;
class LinkRegEventResp;
class LinkRegEventRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkRegEventRespDefaultTypeInternal _LinkRegEventResp_default_instance_;
class LinkRegNotifyReq;
class LinkRegNotifyReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkRegNotifyReqDefaultTypeInternal _LinkRegNotifyReq_default_instance_;
class LinkRegNotifyResp;
class LinkRegNotifyRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkRegNotifyRespDefaultTypeInternal _LinkRegNotifyResp_default_instance_;
class LinkSearchRecordReq;
class LinkSearchRecordReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkSearchRecordReqDefaultTypeInternal _LinkSearchRecordReq_default_instance_;
class LinkSearchRecordResp;
class LinkSearchRecordRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkSearchRecordRespDefaultTypeInternal _LinkSearchRecordResp_default_instance_;
class LinkSetCamSchedReq;
class LinkSetCamSchedReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkSetCamSchedReqDefaultTypeInternal _LinkSetCamSchedReq_default_instance_;
class LinkSetCamSchedResp;
class LinkSetCamSchedRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkSetCamSchedRespDefaultTypeInternal _LinkSetCamSchedResp_default_instance_;
class LinkStartLiveCmd;
class LinkStartLiveCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkStartLiveCmdDefaultTypeInternal _LinkStartLiveCmd_default_instance_;
class LinkStopLiveCmd;
class LinkStopLiveCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkStopLiveCmdDefaultTypeInternal _LinkStopLiveCmd_default_instance_;
class LinkSysVidDiskListReq;
class LinkSysVidDiskListReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkSysVidDiskListReqDefaultTypeInternal _LinkSysVidDiskListReq_default_instance_;
class LinkSysVidDiskListResp;
class LinkSysVidDiskListRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkSysVidDiskListRespDefaultTypeInternal _LinkSysVidDiskListResp_default_instance_;
class LinkUnRegEventReq;
class LinkUnRegEventReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkUnRegEventReqDefaultTypeInternal _LinkUnRegEventReq_default_instance_;
class LinkUnRegEventResp;
class LinkUnRegEventRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkUnRegEventRespDefaultTypeInternal _LinkUnRegEventResp_default_instance_;
class LinkUpdateDiskLimitReq;
class LinkUpdateDiskLimitReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkUpdateDiskLimitReqDefaultTypeInternal _LinkUpdateDiskLimitReq_default_instance_;
class LinkUpdateDiskLimitResp;
class LinkUpdateDiskLimitRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkUpdateDiskLimitRespDefaultTypeInternal _LinkUpdateDiskLimitResp_default_instance_;
class LinkVidDiskListReq;
class LinkVidDiskListReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkVidDiskListReqDefaultTypeInternal _LinkVidDiskListReq_default_instance_;
class LinkVidDiskListResp;
class LinkVidDiskListRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkVidDiskListRespDefaultTypeInternal _LinkVidDiskListResp_default_instance_;
namespace Link {
class LinkCmd;
class LinkCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkCmdDefaultTypeInternal _LinkCmd_default_instance_;
}  // namespace Link

namespace Link {

namespace protobuf_linkproto_2eproto {
// Internal implementation detail -- do not call these.
struct VE_LIBRARY_API TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void VE_LIBRARY_API AddDescriptors();
void VE_LIBRARY_API InitDefaults();
}  // namespace protobuf_linkproto_2eproto

enum LinkCmdType {
  LINK_CMD_ZERO = 0,
  LINK_CMD_LOGIN_REQ = 101,
  LINK_CMD_LOGIN_RESP = 102,
  LINK_CMD_KEEPALIVE_REQ = 103,
  LINK_CMD_KEEPALIVE_RESP = 104,
  LINK_CMD_REG_NOTIFY_REQ = 105,
  LINK_CMD_REG_NOTIFY_RESP = 106,
  LINK_CMD_CAM_LIST_REQ = 201,
  LINK_CMD_CAM_LIST_RESP = 202,
  LINK_CMD_CAM_REQ = 203,
  LINK_CMD_CAM_RESP = 204,
  LINK_CMD_ADD_CAM_REQ = 205,
  LINK_CMD_ADD_CAM_RESP = 206,
  LINK_CMD_DEL_CAM_REQ = 207,
  LINK_CMD_DEL_CAM_RESP = 208,
  LINK_CMD_SET_CAM_SCHED_REQ = 209,
  LINK_CMD_SET_CAM_SCHED_RESP = 210,
  LINK_CMD_GET_STREAM_LIST_REQ = 211,
  LINK_CMD_GET_STREAM_LIST_RESP = 212,
  LINK_CMD_DISK_LIST_REQ = 301,
  LINK_CMD_DISK_LIST_RESP = 302,
  LINK_CMD_SYS_DISK_LIST_REQ = 303,
  LINK_CMD_SYS_DISK_LIST_RESP = 304,
  LINK_CMD_ADD_DISK_REQ = 305,
  LINK_CMD_ADD_DISK_RESP = 306,
  LINK_CMD_DEL_DISK_REQ = 307,
  LINK_CMD_DEL_DISK_RESP = 308,
  LINK_CMD_UPDATE_DISK_LIMIT_REQ = 309,
  LINK_CMD_UPDATE_DISK_LIMIT_RESP = 310,
  LINK_CMD_GET_LIC_REQ = 401,
  LINK_CMD_GET_LIC_RESP = 402,
  LINK_CMD_GET_VER_REQ = 403,
  LINK_CMD_GET_VER_RESP = 404,
  LINK_CMD_CONF_LIC_REQ = 405,
  LINK_CMD_CONF_LIC_RESP = 406,
  LINK_CMD_ADD_USER_REQ = 501,
  LINK_CMD_ADD_USER_RESP = 502,
  LINK_CMD_HAS_RECORD_REQ = 601,
  LINK_CMD_HAS_RECORD_RESP = 602,
  LINK_CMD_SEARCH_RECORD_REQ = 603,
  LINK_CMD_SEARCH_RECORD_RESP = 604,
  LINK_CMD_START_LIVE_CMD = 701,
  LINK_CMD_STOP_LIVE_CMD = 702,
  LINK_CMD_PLAY_BACK_CMD = 703,
  LINK_CMD_PLAY_PAUSE_CMD = 704,
  LINK_CMD_PLAY_RESUME_CMD = 705,
  LINK_CMD_PLAY_SEEK_CMD = 706,
  LINK_CMD_PLAY_STOP_CMD = 707,
  LINK_CMD_PTZ_CMD = 801,
  LINK_CMD_CAM_SEARCH_START_REQ = 901,
  LINK_CMD_CAM_SEARCH_START_RESP = 902,
  LINK_CMD_CAM_SEARCH_STOP_REQ = 903,
  LINK_CMD_CAM_SEARCH_STOP_RESP = 904,
  LINK_CMD_REG_EVENT_REQ = 905,
  LINK_CMD_REG_EVENT_RESP = 906,
  LINK_CMD_UNREG_EVENT_REQ = 907,
  LINK_CMD_UNREG_EVENT_RESP = 908,
  LINK_CMD_EVENT_SEARCH_REQ = 909,
  LINK_CMD_EVENT_SEARCH_RESP = 910,
  LINK_CMD_HANDLE_EVENT_REQ = 911,
  LINK_CMD_HANDLE_EVENT_RESP = 912,
  LINK_CMD_CAM_ADD_NOTIFY = 10001,
  LINK_CMD_CAM_DEL_NOTIFY = 10002,
  LINK_CMD_CAM_ONLINE_NOTIFY = 10003,
  LINK_CMD_CAM_OFFLINE_NOTIFY = 10004,
  LINK_CMD_CAM_REC_ON_NOTIFY = 10005,
  LINK_CMD_CAM_REC_OFF_NOTIFY = 10006,
  LINK_CMD_CAM_SEARCHED_NOTIFY = 10007,
  LINK_CMD_EVENT_NOTIFY = 10008,
  LinkCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LinkCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
VE_LIBRARY_API bool LinkCmdType_IsValid(int value);
const LinkCmdType LinkCmdType_MIN = LINK_CMD_ZERO;
const LinkCmdType LinkCmdType_MAX = LINK_CMD_EVENT_NOTIFY;
const int LinkCmdType_ARRAYSIZE = LinkCmdType_MAX + 1;

VE_LIBRARY_API const ::google::protobuf::EnumDescriptor* LinkCmdType_descriptor();
inline const ::std::string& LinkCmdType_Name(LinkCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LinkCmdType_descriptor(), value);
}
inline bool LinkCmdType_Parse(
    const ::std::string& name, LinkCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LinkCmdType>(
    LinkCmdType_descriptor(), name, value);
}
// ===================================================================

class VE_LIBRARY_API LinkCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Link.LinkCmd) */ {
 public:
  LinkCmd();
  virtual ~LinkCmd();

  LinkCmd(const LinkCmd& from);

  inline LinkCmd& operator=(const LinkCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCmd& default_instance();

  enum CmdCase {
    kLoginReq = 102,
    kLoginResp = 103,
    kKeepaliveReq = 104,
    kKeepaliveResp = 105,
    kRegNotifyReq = 106,
    kRegNotifyResp = 107,
    kCamListReq = 201,
    kCamListResp = 202,
    kCamReq = 203,
    kCamResp = 204,
    kAddCamReq = 205,
    kAddCamResp = 206,
    kDelCamReq = 207,
    kDelCamResp = 208,
    kSetCamSchedReq = 209,
    kSetCamSchedResp = 210,
    kGetStreamListReq = 211,
    kGetStreamListResp = 212,
    kDiskListReq = 301,
    kDiskListResp = 302,
    kSysDiskListReq = 303,
    kSysDiskListResp = 304,
    kAddDiskReq = 305,
    kAddDiskResp = 306,
    kDelDiskReq = 307,
    kDelDiskResp = 308,
    kDiskLimitReq = 309,
    kDiskLimitResp = 310,
    kLicReq = 401,
    kLicResp = 402,
    kVerReq = 403,
    kVerResp = 404,
    kConfLicReq = 405,
    kConfLicResp = 406,
    kAddUserReq = 501,
    kAddUserResp = 502,
    kHasRecReq = 601,
    kHasRecResp = 602,
    kSearchRecReq = 603,
    kSearchRecResp = 604,
    kStartLiveCmd = 701,
    kStopLiveCmd = 702,
    kPlayBackCmd = 703,
    kPlayPauseCmd = 704,
    kPlayResumeCmd = 705,
    kPlaySeekCmd = 706,
    kPlayStopCmd = 707,
    kPtzCmd = 801,
    kCamSearchStartReq = 901,
    kCamSearchStartResp = 902,
    kCamSearchStopReq = 903,
    kCamSearchStopResp = 904,
    kRegEventReq = 905,
    kRegEventResp = 906,
    kUnRegEventReq = 907,
    kUnRegEventResp = 908,
    kEventSearchReq = 909,
    kEventSearchResp = 910,
    kHandleEventReq = 911,
    kHandleEventResp = 912,
    kCamAddNotify = 10001,
    kCamIdNotify = 10002,
    kCamSearchedNotify = 10003,
    kEvnetNotify = 10004,
    CMD_NOT_SET = 0,
  };

  static inline const LinkCmd* internal_default_instance() {
    return reinterpret_cast<const LinkCmd*>(
               &_LinkCmd_default_instance_);
  }

  void Swap(LinkCmd* other);

  // implements Message ----------------------------------------------

  inline LinkCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCmd& from);
  void MergeFrom(const LinkCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Link.LinkCmdType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Link::LinkCmdType type() const;
  void set_type(::Link::LinkCmdType value);

  // .LinkLoginReq loginReq = 102;
  bool has_loginreq() const;
  void clear_loginreq();
  static const int kLoginReqFieldNumber = 102;
  const ::LinkLoginReq& loginreq() const;
  ::LinkLoginReq* mutable_loginreq();
  ::LinkLoginReq* release_loginreq();
  void set_allocated_loginreq(::LinkLoginReq* loginreq);

  // .LinkLoginResp loginResp = 103;
  bool has_loginresp() const;
  void clear_loginresp();
  static const int kLoginRespFieldNumber = 103;
  const ::LinkLoginResp& loginresp() const;
  ::LinkLoginResp* mutable_loginresp();
  ::LinkLoginResp* release_loginresp();
  void set_allocated_loginresp(::LinkLoginResp* loginresp);

  // .LinkKeepaliveReq keepaliveReq = 104;
  bool has_keepalivereq() const;
  void clear_keepalivereq();
  static const int kKeepaliveReqFieldNumber = 104;
  const ::LinkKeepaliveReq& keepalivereq() const;
  ::LinkKeepaliveReq* mutable_keepalivereq();
  ::LinkKeepaliveReq* release_keepalivereq();
  void set_allocated_keepalivereq(::LinkKeepaliveReq* keepalivereq);

  // .LinkKeepaliveResp keepaliveResp = 105;
  bool has_keepaliveresp() const;
  void clear_keepaliveresp();
  static const int kKeepaliveRespFieldNumber = 105;
  const ::LinkKeepaliveResp& keepaliveresp() const;
  ::LinkKeepaliveResp* mutable_keepaliveresp();
  ::LinkKeepaliveResp* release_keepaliveresp();
  void set_allocated_keepaliveresp(::LinkKeepaliveResp* keepaliveresp);

  // .LinkRegNotifyReq regNotifyReq = 106;
  bool has_regnotifyreq() const;
  void clear_regnotifyreq();
  static const int kRegNotifyReqFieldNumber = 106;
  const ::LinkRegNotifyReq& regnotifyreq() const;
  ::LinkRegNotifyReq* mutable_regnotifyreq();
  ::LinkRegNotifyReq* release_regnotifyreq();
  void set_allocated_regnotifyreq(::LinkRegNotifyReq* regnotifyreq);

  // .LinkRegNotifyResp regNotifyResp = 107;
  bool has_regnotifyresp() const;
  void clear_regnotifyresp();
  static const int kRegNotifyRespFieldNumber = 107;
  const ::LinkRegNotifyResp& regnotifyresp() const;
  ::LinkRegNotifyResp* mutable_regnotifyresp();
  ::LinkRegNotifyResp* release_regnotifyresp();
  void set_allocated_regnotifyresp(::LinkRegNotifyResp* regnotifyresp);

  // .LinkListCamReq camListReq = 201;
  bool has_camlistreq() const;
  void clear_camlistreq();
  static const int kCamListReqFieldNumber = 201;
  const ::LinkListCamReq& camlistreq() const;
  ::LinkListCamReq* mutable_camlistreq();
  ::LinkListCamReq* release_camlistreq();
  void set_allocated_camlistreq(::LinkListCamReq* camlistreq);

  // .LinkListCamResp camListResp = 202;
  bool has_camlistresp() const;
  void clear_camlistresp();
  static const int kCamListRespFieldNumber = 202;
  const ::LinkListCamResp& camlistresp() const;
  ::LinkListCamResp* mutable_camlistresp();
  ::LinkListCamResp* release_camlistresp();
  void set_allocated_camlistresp(::LinkListCamResp* camlistresp);

  // .LinkCamReq camReq = 203;
  bool has_camreq() const;
  void clear_camreq();
  static const int kCamReqFieldNumber = 203;
  const ::LinkCamReq& camreq() const;
  ::LinkCamReq* mutable_camreq();
  ::LinkCamReq* release_camreq();
  void set_allocated_camreq(::LinkCamReq* camreq);

  // .LinkCamResp camResp = 204;
  bool has_camresp() const;
  void clear_camresp();
  static const int kCamRespFieldNumber = 204;
  const ::LinkCamResp& camresp() const;
  ::LinkCamResp* mutable_camresp();
  ::LinkCamResp* release_camresp();
  void set_allocated_camresp(::LinkCamResp* camresp);

  // .LinkAddCamReq addCamReq = 205;
  bool has_addcamreq() const;
  void clear_addcamreq();
  static const int kAddCamReqFieldNumber = 205;
  const ::LinkAddCamReq& addcamreq() const;
  ::LinkAddCamReq* mutable_addcamreq();
  ::LinkAddCamReq* release_addcamreq();
  void set_allocated_addcamreq(::LinkAddCamReq* addcamreq);

  // .LinkAddCamResp addCamResp = 206;
  bool has_addcamresp() const;
  void clear_addcamresp();
  static const int kAddCamRespFieldNumber = 206;
  const ::LinkAddCamResp& addcamresp() const;
  ::LinkAddCamResp* mutable_addcamresp();
  ::LinkAddCamResp* release_addcamresp();
  void set_allocated_addcamresp(::LinkAddCamResp* addcamresp);

  // .LinkDelCamReq delCamReq = 207;
  bool has_delcamreq() const;
  void clear_delcamreq();
  static const int kDelCamReqFieldNumber = 207;
  const ::LinkDelCamReq& delcamreq() const;
  ::LinkDelCamReq* mutable_delcamreq();
  ::LinkDelCamReq* release_delcamreq();
  void set_allocated_delcamreq(::LinkDelCamReq* delcamreq);

  // .LinkDelCamResp delCamResp = 208;
  bool has_delcamresp() const;
  void clear_delcamresp();
  static const int kDelCamRespFieldNumber = 208;
  const ::LinkDelCamResp& delcamresp() const;
  ::LinkDelCamResp* mutable_delcamresp();
  ::LinkDelCamResp* release_delcamresp();
  void set_allocated_delcamresp(::LinkDelCamResp* delcamresp);

  // .LinkSetCamSchedReq setCamSchedReq = 209;
  bool has_setcamschedreq() const;
  void clear_setcamschedreq();
  static const int kSetCamSchedReqFieldNumber = 209;
  const ::LinkSetCamSchedReq& setcamschedreq() const;
  ::LinkSetCamSchedReq* mutable_setcamschedreq();
  ::LinkSetCamSchedReq* release_setcamschedreq();
  void set_allocated_setcamschedreq(::LinkSetCamSchedReq* setcamschedreq);

  // .LinkSetCamSchedResp setCamSchedResp = 210;
  bool has_setcamschedresp() const;
  void clear_setcamschedresp();
  static const int kSetCamSchedRespFieldNumber = 210;
  const ::LinkSetCamSchedResp& setcamschedresp() const;
  ::LinkSetCamSchedResp* mutable_setcamschedresp();
  ::LinkSetCamSchedResp* release_setcamschedresp();
  void set_allocated_setcamschedresp(::LinkSetCamSchedResp* setcamschedresp);

  // .LinkGetStreamListReq getStreamListReq = 211;
  bool has_getstreamlistreq() const;
  void clear_getstreamlistreq();
  static const int kGetStreamListReqFieldNumber = 211;
  const ::LinkGetStreamListReq& getstreamlistreq() const;
  ::LinkGetStreamListReq* mutable_getstreamlistreq();
  ::LinkGetStreamListReq* release_getstreamlistreq();
  void set_allocated_getstreamlistreq(::LinkGetStreamListReq* getstreamlistreq);

  // .LinkGetStreamListResp getStreamListResp = 212;
  bool has_getstreamlistresp() const;
  void clear_getstreamlistresp();
  static const int kGetStreamListRespFieldNumber = 212;
  const ::LinkGetStreamListResp& getstreamlistresp() const;
  ::LinkGetStreamListResp* mutable_getstreamlistresp();
  ::LinkGetStreamListResp* release_getstreamlistresp();
  void set_allocated_getstreamlistresp(::LinkGetStreamListResp* getstreamlistresp);

  // .LinkVidDiskListReq diskListReq = 301;
  bool has_disklistreq() const;
  void clear_disklistreq();
  static const int kDiskListReqFieldNumber = 301;
  const ::LinkVidDiskListReq& disklistreq() const;
  ::LinkVidDiskListReq* mutable_disklistreq();
  ::LinkVidDiskListReq* release_disklistreq();
  void set_allocated_disklistreq(::LinkVidDiskListReq* disklistreq);

  // .LinkVidDiskListResp diskListResp = 302;
  bool has_disklistresp() const;
  void clear_disklistresp();
  static const int kDiskListRespFieldNumber = 302;
  const ::LinkVidDiskListResp& disklistresp() const;
  ::LinkVidDiskListResp* mutable_disklistresp();
  ::LinkVidDiskListResp* release_disklistresp();
  void set_allocated_disklistresp(::LinkVidDiskListResp* disklistresp);

  // .LinkSysVidDiskListReq sysDiskListReq = 303;
  bool has_sysdisklistreq() const;
  void clear_sysdisklistreq();
  static const int kSysDiskListReqFieldNumber = 303;
  const ::LinkSysVidDiskListReq& sysdisklistreq() const;
  ::LinkSysVidDiskListReq* mutable_sysdisklistreq();
  ::LinkSysVidDiskListReq* release_sysdisklistreq();
  void set_allocated_sysdisklistreq(::LinkSysVidDiskListReq* sysdisklistreq);

  // .LinkSysVidDiskListResp sysDiskListResp = 304;
  bool has_sysdisklistresp() const;
  void clear_sysdisklistresp();
  static const int kSysDiskListRespFieldNumber = 304;
  const ::LinkSysVidDiskListResp& sysdisklistresp() const;
  ::LinkSysVidDiskListResp* mutable_sysdisklistresp();
  ::LinkSysVidDiskListResp* release_sysdisklistresp();
  void set_allocated_sysdisklistresp(::LinkSysVidDiskListResp* sysdisklistresp);

  // .LinkAddDiskReq addDiskReq = 305;
  bool has_adddiskreq() const;
  void clear_adddiskreq();
  static const int kAddDiskReqFieldNumber = 305;
  const ::LinkAddDiskReq& adddiskreq() const;
  ::LinkAddDiskReq* mutable_adddiskreq();
  ::LinkAddDiskReq* release_adddiskreq();
  void set_allocated_adddiskreq(::LinkAddDiskReq* adddiskreq);

  // .LinkAddDiskResp addDiskResp = 306;
  bool has_adddiskresp() const;
  void clear_adddiskresp();
  static const int kAddDiskRespFieldNumber = 306;
  const ::LinkAddDiskResp& adddiskresp() const;
  ::LinkAddDiskResp* mutable_adddiskresp();
  ::LinkAddDiskResp* release_adddiskresp();
  void set_allocated_adddiskresp(::LinkAddDiskResp* adddiskresp);

  // .LinkDelDiskReq delDiskReq = 307;
  bool has_deldiskreq() const;
  void clear_deldiskreq();
  static const int kDelDiskReqFieldNumber = 307;
  const ::LinkDelDiskReq& deldiskreq() const;
  ::LinkDelDiskReq* mutable_deldiskreq();
  ::LinkDelDiskReq* release_deldiskreq();
  void set_allocated_deldiskreq(::LinkDelDiskReq* deldiskreq);

  // .LinkDelDiskResp delDiskResp = 308;
  bool has_deldiskresp() const;
  void clear_deldiskresp();
  static const int kDelDiskRespFieldNumber = 308;
  const ::LinkDelDiskResp& deldiskresp() const;
  ::LinkDelDiskResp* mutable_deldiskresp();
  ::LinkDelDiskResp* release_deldiskresp();
  void set_allocated_deldiskresp(::LinkDelDiskResp* deldiskresp);

  // .LinkUpdateDiskLimitReq diskLimitReq = 309;
  bool has_disklimitreq() const;
  void clear_disklimitreq();
  static const int kDiskLimitReqFieldNumber = 309;
  const ::LinkUpdateDiskLimitReq& disklimitreq() const;
  ::LinkUpdateDiskLimitReq* mutable_disklimitreq();
  ::LinkUpdateDiskLimitReq* release_disklimitreq();
  void set_allocated_disklimitreq(::LinkUpdateDiskLimitReq* disklimitreq);

  // .LinkUpdateDiskLimitResp diskLimitResp = 310;
  bool has_disklimitresp() const;
  void clear_disklimitresp();
  static const int kDiskLimitRespFieldNumber = 310;
  const ::LinkUpdateDiskLimitResp& disklimitresp() const;
  ::LinkUpdateDiskLimitResp* mutable_disklimitresp();
  ::LinkUpdateDiskLimitResp* release_disklimitresp();
  void set_allocated_disklimitresp(::LinkUpdateDiskLimitResp* disklimitresp);

  // .LinkGetLicReq licReq = 401;
  bool has_licreq() const;
  void clear_licreq();
  static const int kLicReqFieldNumber = 401;
  const ::LinkGetLicReq& licreq() const;
  ::LinkGetLicReq* mutable_licreq();
  ::LinkGetLicReq* release_licreq();
  void set_allocated_licreq(::LinkGetLicReq* licreq);

  // .LinkGetLicResp licResp = 402;
  bool has_licresp() const;
  void clear_licresp();
  static const int kLicRespFieldNumber = 402;
  const ::LinkGetLicResp& licresp() const;
  ::LinkGetLicResp* mutable_licresp();
  ::LinkGetLicResp* release_licresp();
  void set_allocated_licresp(::LinkGetLicResp* licresp);

  // .LinkGetVerReq verReq = 403;
  bool has_verreq() const;
  void clear_verreq();
  static const int kVerReqFieldNumber = 403;
  const ::LinkGetVerReq& verreq() const;
  ::LinkGetVerReq* mutable_verreq();
  ::LinkGetVerReq* release_verreq();
  void set_allocated_verreq(::LinkGetVerReq* verreq);

  // .LinkGetVerResp verResp = 404;
  bool has_verresp() const;
  void clear_verresp();
  static const int kVerRespFieldNumber = 404;
  const ::LinkGetVerResp& verresp() const;
  ::LinkGetVerResp* mutable_verresp();
  ::LinkGetVerResp* release_verresp();
  void set_allocated_verresp(::LinkGetVerResp* verresp);

  // .LinkConfLicReq confLicReq = 405;
  bool has_conflicreq() const;
  void clear_conflicreq();
  static const int kConfLicReqFieldNumber = 405;
  const ::LinkConfLicReq& conflicreq() const;
  ::LinkConfLicReq* mutable_conflicreq();
  ::LinkConfLicReq* release_conflicreq();
  void set_allocated_conflicreq(::LinkConfLicReq* conflicreq);

  // .LinkConfLicResp confLicResp = 406;
  bool has_conflicresp() const;
  void clear_conflicresp();
  static const int kConfLicRespFieldNumber = 406;
  const ::LinkConfLicResp& conflicresp() const;
  ::LinkConfLicResp* mutable_conflicresp();
  ::LinkConfLicResp* release_conflicresp();
  void set_allocated_conflicresp(::LinkConfLicResp* conflicresp);

  // .LinkAddUserReq addUserReq = 501;
  bool has_adduserreq() const;
  void clear_adduserreq();
  static const int kAddUserReqFieldNumber = 501;
  const ::LinkAddUserReq& adduserreq() const;
  ::LinkAddUserReq* mutable_adduserreq();
  ::LinkAddUserReq* release_adduserreq();
  void set_allocated_adduserreq(::LinkAddUserReq* adduserreq);

  // .LinkAddUserResp addUserResp = 502;
  bool has_adduserresp() const;
  void clear_adduserresp();
  static const int kAddUserRespFieldNumber = 502;
  const ::LinkAddUserResp& adduserresp() const;
  ::LinkAddUserResp* mutable_adduserresp();
  ::LinkAddUserResp* release_adduserresp();
  void set_allocated_adduserresp(::LinkAddUserResp* adduserresp);

  // .LinkHasRecordReq hasRecReq = 601;
  bool has_hasrecreq() const;
  void clear_hasrecreq();
  static const int kHasRecReqFieldNumber = 601;
  const ::LinkHasRecordReq& hasrecreq() const;
  ::LinkHasRecordReq* mutable_hasrecreq();
  ::LinkHasRecordReq* release_hasrecreq();
  void set_allocated_hasrecreq(::LinkHasRecordReq* hasrecreq);

  // .LinkHasRecordResp hasRecResp = 602;
  bool has_hasrecresp() const;
  void clear_hasrecresp();
  static const int kHasRecRespFieldNumber = 602;
  const ::LinkHasRecordResp& hasrecresp() const;
  ::LinkHasRecordResp* mutable_hasrecresp();
  ::LinkHasRecordResp* release_hasrecresp();
  void set_allocated_hasrecresp(::LinkHasRecordResp* hasrecresp);

  // .LinkSearchRecordReq searchRecReq = 603;
  bool has_searchrecreq() const;
  void clear_searchrecreq();
  static const int kSearchRecReqFieldNumber = 603;
  const ::LinkSearchRecordReq& searchrecreq() const;
  ::LinkSearchRecordReq* mutable_searchrecreq();
  ::LinkSearchRecordReq* release_searchrecreq();
  void set_allocated_searchrecreq(::LinkSearchRecordReq* searchrecreq);

  // .LinkSearchRecordResp searchRecResp = 604;
  bool has_searchrecresp() const;
  void clear_searchrecresp();
  static const int kSearchRecRespFieldNumber = 604;
  const ::LinkSearchRecordResp& searchrecresp() const;
  ::LinkSearchRecordResp* mutable_searchrecresp();
  ::LinkSearchRecordResp* release_searchrecresp();
  void set_allocated_searchrecresp(::LinkSearchRecordResp* searchrecresp);

  // .LinkStartLiveCmd startLiveCmd = 701;
  bool has_startlivecmd() const;
  void clear_startlivecmd();
  static const int kStartLiveCmdFieldNumber = 701;
  const ::LinkStartLiveCmd& startlivecmd() const;
  ::LinkStartLiveCmd* mutable_startlivecmd();
  ::LinkStartLiveCmd* release_startlivecmd();
  void set_allocated_startlivecmd(::LinkStartLiveCmd* startlivecmd);

  // .LinkStopLiveCmd stopLiveCmd = 702;
  bool has_stoplivecmd() const;
  void clear_stoplivecmd();
  static const int kStopLiveCmdFieldNumber = 702;
  const ::LinkStopLiveCmd& stoplivecmd() const;
  ::LinkStopLiveCmd* mutable_stoplivecmd();
  ::LinkStopLiveCmd* release_stoplivecmd();
  void set_allocated_stoplivecmd(::LinkStopLiveCmd* stoplivecmd);

  // .LinkPlayBackCmd playBackCmd = 703;
  bool has_playbackcmd() const;
  void clear_playbackcmd();
  static const int kPlayBackCmdFieldNumber = 703;
  const ::LinkPlayBackCmd& playbackcmd() const;
  ::LinkPlayBackCmd* mutable_playbackcmd();
  ::LinkPlayBackCmd* release_playbackcmd();
  void set_allocated_playbackcmd(::LinkPlayBackCmd* playbackcmd);

  // .LinkPlayPauseCmd playPauseCmd = 704;
  bool has_playpausecmd() const;
  void clear_playpausecmd();
  static const int kPlayPauseCmdFieldNumber = 704;
  const ::LinkPlayPauseCmd& playpausecmd() const;
  ::LinkPlayPauseCmd* mutable_playpausecmd();
  ::LinkPlayPauseCmd* release_playpausecmd();
  void set_allocated_playpausecmd(::LinkPlayPauseCmd* playpausecmd);

  // .LinkPlayResumeCmd playResumeCmd = 705;
  bool has_playresumecmd() const;
  void clear_playresumecmd();
  static const int kPlayResumeCmdFieldNumber = 705;
  const ::LinkPlayResumeCmd& playresumecmd() const;
  ::LinkPlayResumeCmd* mutable_playresumecmd();
  ::LinkPlayResumeCmd* release_playresumecmd();
  void set_allocated_playresumecmd(::LinkPlayResumeCmd* playresumecmd);

  // .LinkPlaySeekCmd playSeekCmd = 706;
  bool has_playseekcmd() const;
  void clear_playseekcmd();
  static const int kPlaySeekCmdFieldNumber = 706;
  const ::LinkPlaySeekCmd& playseekcmd() const;
  ::LinkPlaySeekCmd* mutable_playseekcmd();
  ::LinkPlaySeekCmd* release_playseekcmd();
  void set_allocated_playseekcmd(::LinkPlaySeekCmd* playseekcmd);

  // .LinkPlayStopCmd playStopCmd = 707;
  bool has_playstopcmd() const;
  void clear_playstopcmd();
  static const int kPlayStopCmdFieldNumber = 707;
  const ::LinkPlayStopCmd& playstopcmd() const;
  ::LinkPlayStopCmd* mutable_playstopcmd();
  ::LinkPlayStopCmd* release_playstopcmd();
  void set_allocated_playstopcmd(::LinkPlayStopCmd* playstopcmd);

  // .LinkPtzCmd ptzCmd = 801;
  bool has_ptzcmd() const;
  void clear_ptzcmd();
  static const int kPtzCmdFieldNumber = 801;
  const ::LinkPtzCmd& ptzcmd() const;
  ::LinkPtzCmd* mutable_ptzcmd();
  ::LinkPtzCmd* release_ptzcmd();
  void set_allocated_ptzcmd(::LinkPtzCmd* ptzcmd);

  // .LinkCamSearchStartReq camSearchStartReq = 901;
  bool has_camsearchstartreq() const;
  void clear_camsearchstartreq();
  static const int kCamSearchStartReqFieldNumber = 901;
  const ::LinkCamSearchStartReq& camsearchstartreq() const;
  ::LinkCamSearchStartReq* mutable_camsearchstartreq();
  ::LinkCamSearchStartReq* release_camsearchstartreq();
  void set_allocated_camsearchstartreq(::LinkCamSearchStartReq* camsearchstartreq);

  // .LinkCamSearchStartResp camSearchStartResp = 902;
  bool has_camsearchstartresp() const;
  void clear_camsearchstartresp();
  static const int kCamSearchStartRespFieldNumber = 902;
  const ::LinkCamSearchStartResp& camsearchstartresp() const;
  ::LinkCamSearchStartResp* mutable_camsearchstartresp();
  ::LinkCamSearchStartResp* release_camsearchstartresp();
  void set_allocated_camsearchstartresp(::LinkCamSearchStartResp* camsearchstartresp);

  // .LinkCamSearchStopReq camSearchStopReq = 903;
  bool has_camsearchstopreq() const;
  void clear_camsearchstopreq();
  static const int kCamSearchStopReqFieldNumber = 903;
  const ::LinkCamSearchStopReq& camsearchstopreq() const;
  ::LinkCamSearchStopReq* mutable_camsearchstopreq();
  ::LinkCamSearchStopReq* release_camsearchstopreq();
  void set_allocated_camsearchstopreq(::LinkCamSearchStopReq* camsearchstopreq);

  // .LinkCamSearchStopResp camSearchStopResp = 904;
  bool has_camsearchstopresp() const;
  void clear_camsearchstopresp();
  static const int kCamSearchStopRespFieldNumber = 904;
  const ::LinkCamSearchStopResp& camsearchstopresp() const;
  ::LinkCamSearchStopResp* mutable_camsearchstopresp();
  ::LinkCamSearchStopResp* release_camsearchstopresp();
  void set_allocated_camsearchstopresp(::LinkCamSearchStopResp* camsearchstopresp);

  // .LinkRegEventReq regEventReq = 905;
  bool has_regeventreq() const;
  void clear_regeventreq();
  static const int kRegEventReqFieldNumber = 905;
  const ::LinkRegEventReq& regeventreq() const;
  ::LinkRegEventReq* mutable_regeventreq();
  ::LinkRegEventReq* release_regeventreq();
  void set_allocated_regeventreq(::LinkRegEventReq* regeventreq);

  // .LinkRegEventResp regEventResp = 906;
  bool has_regeventresp() const;
  void clear_regeventresp();
  static const int kRegEventRespFieldNumber = 906;
  const ::LinkRegEventResp& regeventresp() const;
  ::LinkRegEventResp* mutable_regeventresp();
  ::LinkRegEventResp* release_regeventresp();
  void set_allocated_regeventresp(::LinkRegEventResp* regeventresp);

  // .LinkUnRegEventReq unRegEventReq = 907;
  bool has_unregeventreq() const;
  void clear_unregeventreq();
  static const int kUnRegEventReqFieldNumber = 907;
  const ::LinkUnRegEventReq& unregeventreq() const;
  ::LinkUnRegEventReq* mutable_unregeventreq();
  ::LinkUnRegEventReq* release_unregeventreq();
  void set_allocated_unregeventreq(::LinkUnRegEventReq* unregeventreq);

  // .LinkUnRegEventResp unRegEventResp = 908;
  bool has_unregeventresp() const;
  void clear_unregeventresp();
  static const int kUnRegEventRespFieldNumber = 908;
  const ::LinkUnRegEventResp& unregeventresp() const;
  ::LinkUnRegEventResp* mutable_unregeventresp();
  ::LinkUnRegEventResp* release_unregeventresp();
  void set_allocated_unregeventresp(::LinkUnRegEventResp* unregeventresp);

  // .LinkEventSearchReq eventSearchReq = 909;
  bool has_eventsearchreq() const;
  void clear_eventsearchreq();
  static const int kEventSearchReqFieldNumber = 909;
  const ::LinkEventSearchReq& eventsearchreq() const;
  ::LinkEventSearchReq* mutable_eventsearchreq();
  ::LinkEventSearchReq* release_eventsearchreq();
  void set_allocated_eventsearchreq(::LinkEventSearchReq* eventsearchreq);

  // .LinkEventSearchResp eventSearchResp = 910;
  bool has_eventsearchresp() const;
  void clear_eventsearchresp();
  static const int kEventSearchRespFieldNumber = 910;
  const ::LinkEventSearchResp& eventsearchresp() const;
  ::LinkEventSearchResp* mutable_eventsearchresp();
  ::LinkEventSearchResp* release_eventsearchresp();
  void set_allocated_eventsearchresp(::LinkEventSearchResp* eventsearchresp);

  // .LinkHandleEventReq handleEventReq = 911;
  bool has_handleeventreq() const;
  void clear_handleeventreq();
  static const int kHandleEventReqFieldNumber = 911;
  const ::LinkHandleEventReq& handleeventreq() const;
  ::LinkHandleEventReq* mutable_handleeventreq();
  ::LinkHandleEventReq* release_handleeventreq();
  void set_allocated_handleeventreq(::LinkHandleEventReq* handleeventreq);

  // .LinkHandleEventResp handleEventResp = 912;
  bool has_handleeventresp() const;
  void clear_handleeventresp();
  static const int kHandleEventRespFieldNumber = 912;
  const ::LinkHandleEventResp& handleeventresp() const;
  ::LinkHandleEventResp* mutable_handleeventresp();
  ::LinkHandleEventResp* release_handleeventresp();
  void set_allocated_handleeventresp(::LinkHandleEventResp* handleeventresp);

  // .LinkCamAddNotify camAddNotify = 10001;
  bool has_camaddnotify() const;
  void clear_camaddnotify();
  static const int kCamAddNotifyFieldNumber = 10001;
  const ::LinkCamAddNotify& camaddnotify() const;
  ::LinkCamAddNotify* mutable_camaddnotify();
  ::LinkCamAddNotify* release_camaddnotify();
  void set_allocated_camaddnotify(::LinkCamAddNotify* camaddnotify);

  // .LinkCamIdNotify camIdNotify = 10002;
  bool has_camidnotify() const;
  void clear_camidnotify();
  static const int kCamIdNotifyFieldNumber = 10002;
  const ::LinkCamIdNotify& camidnotify() const;
  ::LinkCamIdNotify* mutable_camidnotify();
  ::LinkCamIdNotify* release_camidnotify();
  void set_allocated_camidnotify(::LinkCamIdNotify* camidnotify);

  // .LinkCamSearchedNotify camSearchedNotify = 10003;
  bool has_camsearchednotify() const;
  void clear_camsearchednotify();
  static const int kCamSearchedNotifyFieldNumber = 10003;
  const ::LinkCamSearchedNotify& camsearchednotify() const;
  ::LinkCamSearchedNotify* mutable_camsearchednotify();
  ::LinkCamSearchedNotify* release_camsearchednotify();
  void set_allocated_camsearchednotify(::LinkCamSearchedNotify* camsearchednotify);

  // .LinkEventNotify evnetNotify = 10004;
  bool has_evnetnotify() const;
  void clear_evnetnotify();
  static const int kEvnetNotifyFieldNumber = 10004;
  const ::LinkEventNotify& evnetnotify() const;
  ::LinkEventNotify* mutable_evnetnotify();
  ::LinkEventNotify* release_evnetnotify();
  void set_allocated_evnetnotify(::LinkEventNotify* evnetnotify);

  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:Link.LinkCmd)
 private:
  void set_has_loginreq();
  void set_has_loginresp();
  void set_has_keepalivereq();
  void set_has_keepaliveresp();
  void set_has_regnotifyreq();
  void set_has_regnotifyresp();
  void set_has_camlistreq();
  void set_has_camlistresp();
  void set_has_camreq();
  void set_has_camresp();
  void set_has_addcamreq();
  void set_has_addcamresp();
  void set_has_delcamreq();
  void set_has_delcamresp();
  void set_has_setcamschedreq();
  void set_has_setcamschedresp();
  void set_has_getstreamlistreq();
  void set_has_getstreamlistresp();
  void set_has_disklistreq();
  void set_has_disklistresp();
  void set_has_sysdisklistreq();
  void set_has_sysdisklistresp();
  void set_has_adddiskreq();
  void set_has_adddiskresp();
  void set_has_deldiskreq();
  void set_has_deldiskresp();
  void set_has_disklimitreq();
  void set_has_disklimitresp();
  void set_has_licreq();
  void set_has_licresp();
  void set_has_verreq();
  void set_has_verresp();
  void set_has_conflicreq();
  void set_has_conflicresp();
  void set_has_adduserreq();
  void set_has_adduserresp();
  void set_has_hasrecreq();
  void set_has_hasrecresp();
  void set_has_searchrecreq();
  void set_has_searchrecresp();
  void set_has_startlivecmd();
  void set_has_stoplivecmd();
  void set_has_playbackcmd();
  void set_has_playpausecmd();
  void set_has_playresumecmd();
  void set_has_playseekcmd();
  void set_has_playstopcmd();
  void set_has_ptzcmd();
  void set_has_camsearchstartreq();
  void set_has_camsearchstartresp();
  void set_has_camsearchstopreq();
  void set_has_camsearchstopresp();
  void set_has_regeventreq();
  void set_has_regeventresp();
  void set_has_unregeventreq();
  void set_has_unregeventresp();
  void set_has_eventsearchreq();
  void set_has_eventsearchresp();
  void set_has_handleeventreq();
  void set_has_handleeventresp();
  void set_has_camaddnotify();
  void set_has_camidnotify();
  void set_has_camsearchednotify();
  void set_has_evnetnotify();

  inline bool has_cmd() const;
  void clear_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union CmdUnion {
    CmdUnion() {}
    ::LinkLoginReq* loginreq_;
    ::LinkLoginResp* loginresp_;
    ::LinkKeepaliveReq* keepalivereq_;
    ::LinkKeepaliveResp* keepaliveresp_;
    ::LinkRegNotifyReq* regnotifyreq_;
    ::LinkRegNotifyResp* regnotifyresp_;
    ::LinkListCamReq* camlistreq_;
    ::LinkListCamResp* camlistresp_;
    ::LinkCamReq* camreq_;
    ::LinkCamResp* camresp_;
    ::LinkAddCamReq* addcamreq_;
    ::LinkAddCamResp* addcamresp_;
    ::LinkDelCamReq* delcamreq_;
    ::LinkDelCamResp* delcamresp_;
    ::LinkSetCamSchedReq* setcamschedreq_;
    ::LinkSetCamSchedResp* setcamschedresp_;
    ::LinkGetStreamListReq* getstreamlistreq_;
    ::LinkGetStreamListResp* getstreamlistresp_;
    ::LinkVidDiskListReq* disklistreq_;
    ::LinkVidDiskListResp* disklistresp_;
    ::LinkSysVidDiskListReq* sysdisklistreq_;
    ::LinkSysVidDiskListResp* sysdisklistresp_;
    ::LinkAddDiskReq* adddiskreq_;
    ::LinkAddDiskResp* adddiskresp_;
    ::LinkDelDiskReq* deldiskreq_;
    ::LinkDelDiskResp* deldiskresp_;
    ::LinkUpdateDiskLimitReq* disklimitreq_;
    ::LinkUpdateDiskLimitResp* disklimitresp_;
    ::LinkGetLicReq* licreq_;
    ::LinkGetLicResp* licresp_;
    ::LinkGetVerReq* verreq_;
    ::LinkGetVerResp* verresp_;
    ::LinkConfLicReq* conflicreq_;
    ::LinkConfLicResp* conflicresp_;
    ::LinkAddUserReq* adduserreq_;
    ::LinkAddUserResp* adduserresp_;
    ::LinkHasRecordReq* hasrecreq_;
    ::LinkHasRecordResp* hasrecresp_;
    ::LinkSearchRecordReq* searchrecreq_;
    ::LinkSearchRecordResp* searchrecresp_;
    ::LinkStartLiveCmd* startlivecmd_;
    ::LinkStopLiveCmd* stoplivecmd_;
    ::LinkPlayBackCmd* playbackcmd_;
    ::LinkPlayPauseCmd* playpausecmd_;
    ::LinkPlayResumeCmd* playresumecmd_;
    ::LinkPlaySeekCmd* playseekcmd_;
    ::LinkPlayStopCmd* playstopcmd_;
    ::LinkPtzCmd* ptzcmd_;
    ::LinkCamSearchStartReq* camsearchstartreq_;
    ::LinkCamSearchStartResp* camsearchstartresp_;
    ::LinkCamSearchStopReq* camsearchstopreq_;
    ::LinkCamSearchStopResp* camsearchstopresp_;
    ::LinkRegEventReq* regeventreq_;
    ::LinkRegEventResp* regeventresp_;
    ::LinkUnRegEventReq* unregeventreq_;
    ::LinkUnRegEventResp* unregeventresp_;
    ::LinkEventSearchReq* eventsearchreq_;
    ::LinkEventSearchResp* eventsearchresp_;
    ::LinkHandleEventReq* handleeventreq_;
    ::LinkHandleEventResp* handleeventresp_;
    ::LinkCamAddNotify* camaddnotify_;
    ::LinkCamIdNotify* camidnotify_;
    ::LinkCamSearchedNotify* camsearchednotify_;
    ::LinkEventNotify* evnetnotify_;
  } cmd_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct VE_LIBRARY_API protobuf_linkproto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkCmd

// .Link.LinkCmdType type = 1;
inline void LinkCmd::clear_type() {
  type_ = 0;
}
inline ::Link::LinkCmdType LinkCmd::type() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.type)
  return static_cast< ::Link::LinkCmdType >(type_);
}
inline void LinkCmd::set_type(::Link::LinkCmdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Link.LinkCmd.type)
}

// .LinkLoginReq loginReq = 102;
inline bool LinkCmd::has_loginreq() const {
  return cmd_case() == kLoginReq;
}
inline void LinkCmd::set_has_loginreq() {
  _oneof_case_[0] = kLoginReq;
}
inline void LinkCmd::clear_loginreq() {
  if (has_loginreq()) {
    delete cmd_.loginreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkLoginReq& LinkCmd::loginreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.loginReq)
  return has_loginreq()
      ? *cmd_.loginreq_
      : ::LinkLoginReq::default_instance();
}
inline ::LinkLoginReq* LinkCmd::mutable_loginreq() {
  if (!has_loginreq()) {
    clear_cmd();
    set_has_loginreq();
    cmd_.loginreq_ = new ::LinkLoginReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.loginReq)
  return cmd_.loginreq_;
}
inline ::LinkLoginReq* LinkCmd::release_loginreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.loginReq)
  if (has_loginreq()) {
    clear_has_cmd();
    ::LinkLoginReq* temp = cmd_.loginreq_;
    cmd_.loginreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_loginreq(::LinkLoginReq* loginreq) {
  clear_cmd();
  if (loginreq) {
    set_has_loginreq();
    cmd_.loginreq_ = loginreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.loginReq)
}

// .LinkLoginResp loginResp = 103;
inline bool LinkCmd::has_loginresp() const {
  return cmd_case() == kLoginResp;
}
inline void LinkCmd::set_has_loginresp() {
  _oneof_case_[0] = kLoginResp;
}
inline void LinkCmd::clear_loginresp() {
  if (has_loginresp()) {
    delete cmd_.loginresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkLoginResp& LinkCmd::loginresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.loginResp)
  return has_loginresp()
      ? *cmd_.loginresp_
      : ::LinkLoginResp::default_instance();
}
inline ::LinkLoginResp* LinkCmd::mutable_loginresp() {
  if (!has_loginresp()) {
    clear_cmd();
    set_has_loginresp();
    cmd_.loginresp_ = new ::LinkLoginResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.loginResp)
  return cmd_.loginresp_;
}
inline ::LinkLoginResp* LinkCmd::release_loginresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.loginResp)
  if (has_loginresp()) {
    clear_has_cmd();
    ::LinkLoginResp* temp = cmd_.loginresp_;
    cmd_.loginresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_loginresp(::LinkLoginResp* loginresp) {
  clear_cmd();
  if (loginresp) {
    set_has_loginresp();
    cmd_.loginresp_ = loginresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.loginResp)
}

// .LinkKeepaliveReq keepaliveReq = 104;
inline bool LinkCmd::has_keepalivereq() const {
  return cmd_case() == kKeepaliveReq;
}
inline void LinkCmd::set_has_keepalivereq() {
  _oneof_case_[0] = kKeepaliveReq;
}
inline void LinkCmd::clear_keepalivereq() {
  if (has_keepalivereq()) {
    delete cmd_.keepalivereq_;
    clear_has_cmd();
  }
}
inline  const ::LinkKeepaliveReq& LinkCmd::keepalivereq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.keepaliveReq)
  return has_keepalivereq()
      ? *cmd_.keepalivereq_
      : ::LinkKeepaliveReq::default_instance();
}
inline ::LinkKeepaliveReq* LinkCmd::mutable_keepalivereq() {
  if (!has_keepalivereq()) {
    clear_cmd();
    set_has_keepalivereq();
    cmd_.keepalivereq_ = new ::LinkKeepaliveReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.keepaliveReq)
  return cmd_.keepalivereq_;
}
inline ::LinkKeepaliveReq* LinkCmd::release_keepalivereq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.keepaliveReq)
  if (has_keepalivereq()) {
    clear_has_cmd();
    ::LinkKeepaliveReq* temp = cmd_.keepalivereq_;
    cmd_.keepalivereq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_keepalivereq(::LinkKeepaliveReq* keepalivereq) {
  clear_cmd();
  if (keepalivereq) {
    set_has_keepalivereq();
    cmd_.keepalivereq_ = keepalivereq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.keepaliveReq)
}

// .LinkKeepaliveResp keepaliveResp = 105;
inline bool LinkCmd::has_keepaliveresp() const {
  return cmd_case() == kKeepaliveResp;
}
inline void LinkCmd::set_has_keepaliveresp() {
  _oneof_case_[0] = kKeepaliveResp;
}
inline void LinkCmd::clear_keepaliveresp() {
  if (has_keepaliveresp()) {
    delete cmd_.keepaliveresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkKeepaliveResp& LinkCmd::keepaliveresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.keepaliveResp)
  return has_keepaliveresp()
      ? *cmd_.keepaliveresp_
      : ::LinkKeepaliveResp::default_instance();
}
inline ::LinkKeepaliveResp* LinkCmd::mutable_keepaliveresp() {
  if (!has_keepaliveresp()) {
    clear_cmd();
    set_has_keepaliveresp();
    cmd_.keepaliveresp_ = new ::LinkKeepaliveResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.keepaliveResp)
  return cmd_.keepaliveresp_;
}
inline ::LinkKeepaliveResp* LinkCmd::release_keepaliveresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.keepaliveResp)
  if (has_keepaliveresp()) {
    clear_has_cmd();
    ::LinkKeepaliveResp* temp = cmd_.keepaliveresp_;
    cmd_.keepaliveresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_keepaliveresp(::LinkKeepaliveResp* keepaliveresp) {
  clear_cmd();
  if (keepaliveresp) {
    set_has_keepaliveresp();
    cmd_.keepaliveresp_ = keepaliveresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.keepaliveResp)
}

// .LinkRegNotifyReq regNotifyReq = 106;
inline bool LinkCmd::has_regnotifyreq() const {
  return cmd_case() == kRegNotifyReq;
}
inline void LinkCmd::set_has_regnotifyreq() {
  _oneof_case_[0] = kRegNotifyReq;
}
inline void LinkCmd::clear_regnotifyreq() {
  if (has_regnotifyreq()) {
    delete cmd_.regnotifyreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkRegNotifyReq& LinkCmd::regnotifyreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.regNotifyReq)
  return has_regnotifyreq()
      ? *cmd_.regnotifyreq_
      : ::LinkRegNotifyReq::default_instance();
}
inline ::LinkRegNotifyReq* LinkCmd::mutable_regnotifyreq() {
  if (!has_regnotifyreq()) {
    clear_cmd();
    set_has_regnotifyreq();
    cmd_.regnotifyreq_ = new ::LinkRegNotifyReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.regNotifyReq)
  return cmd_.regnotifyreq_;
}
inline ::LinkRegNotifyReq* LinkCmd::release_regnotifyreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.regNotifyReq)
  if (has_regnotifyreq()) {
    clear_has_cmd();
    ::LinkRegNotifyReq* temp = cmd_.regnotifyreq_;
    cmd_.regnotifyreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_regnotifyreq(::LinkRegNotifyReq* regnotifyreq) {
  clear_cmd();
  if (regnotifyreq) {
    set_has_regnotifyreq();
    cmd_.regnotifyreq_ = regnotifyreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.regNotifyReq)
}

// .LinkRegNotifyResp regNotifyResp = 107;
inline bool LinkCmd::has_regnotifyresp() const {
  return cmd_case() == kRegNotifyResp;
}
inline void LinkCmd::set_has_regnotifyresp() {
  _oneof_case_[0] = kRegNotifyResp;
}
inline void LinkCmd::clear_regnotifyresp() {
  if (has_regnotifyresp()) {
    delete cmd_.regnotifyresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkRegNotifyResp& LinkCmd::regnotifyresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.regNotifyResp)
  return has_regnotifyresp()
      ? *cmd_.regnotifyresp_
      : ::LinkRegNotifyResp::default_instance();
}
inline ::LinkRegNotifyResp* LinkCmd::mutable_regnotifyresp() {
  if (!has_regnotifyresp()) {
    clear_cmd();
    set_has_regnotifyresp();
    cmd_.regnotifyresp_ = new ::LinkRegNotifyResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.regNotifyResp)
  return cmd_.regnotifyresp_;
}
inline ::LinkRegNotifyResp* LinkCmd::release_regnotifyresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.regNotifyResp)
  if (has_regnotifyresp()) {
    clear_has_cmd();
    ::LinkRegNotifyResp* temp = cmd_.regnotifyresp_;
    cmd_.regnotifyresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_regnotifyresp(::LinkRegNotifyResp* regnotifyresp) {
  clear_cmd();
  if (regnotifyresp) {
    set_has_regnotifyresp();
    cmd_.regnotifyresp_ = regnotifyresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.regNotifyResp)
}

// .LinkListCamReq camListReq = 201;
inline bool LinkCmd::has_camlistreq() const {
  return cmd_case() == kCamListReq;
}
inline void LinkCmd::set_has_camlistreq() {
  _oneof_case_[0] = kCamListReq;
}
inline void LinkCmd::clear_camlistreq() {
  if (has_camlistreq()) {
    delete cmd_.camlistreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkListCamReq& LinkCmd::camlistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camListReq)
  return has_camlistreq()
      ? *cmd_.camlistreq_
      : ::LinkListCamReq::default_instance();
}
inline ::LinkListCamReq* LinkCmd::mutable_camlistreq() {
  if (!has_camlistreq()) {
    clear_cmd();
    set_has_camlistreq();
    cmd_.camlistreq_ = new ::LinkListCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camListReq)
  return cmd_.camlistreq_;
}
inline ::LinkListCamReq* LinkCmd::release_camlistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camListReq)
  if (has_camlistreq()) {
    clear_has_cmd();
    ::LinkListCamReq* temp = cmd_.camlistreq_;
    cmd_.camlistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camlistreq(::LinkListCamReq* camlistreq) {
  clear_cmd();
  if (camlistreq) {
    set_has_camlistreq();
    cmd_.camlistreq_ = camlistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camListReq)
}

// .LinkListCamResp camListResp = 202;
inline bool LinkCmd::has_camlistresp() const {
  return cmd_case() == kCamListResp;
}
inline void LinkCmd::set_has_camlistresp() {
  _oneof_case_[0] = kCamListResp;
}
inline void LinkCmd::clear_camlistresp() {
  if (has_camlistresp()) {
    delete cmd_.camlistresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkListCamResp& LinkCmd::camlistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camListResp)
  return has_camlistresp()
      ? *cmd_.camlistresp_
      : ::LinkListCamResp::default_instance();
}
inline ::LinkListCamResp* LinkCmd::mutable_camlistresp() {
  if (!has_camlistresp()) {
    clear_cmd();
    set_has_camlistresp();
    cmd_.camlistresp_ = new ::LinkListCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camListResp)
  return cmd_.camlistresp_;
}
inline ::LinkListCamResp* LinkCmd::release_camlistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camListResp)
  if (has_camlistresp()) {
    clear_has_cmd();
    ::LinkListCamResp* temp = cmd_.camlistresp_;
    cmd_.camlistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camlistresp(::LinkListCamResp* camlistresp) {
  clear_cmd();
  if (camlistresp) {
    set_has_camlistresp();
    cmd_.camlistresp_ = camlistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camListResp)
}

// .LinkCamReq camReq = 203;
inline bool LinkCmd::has_camreq() const {
  return cmd_case() == kCamReq;
}
inline void LinkCmd::set_has_camreq() {
  _oneof_case_[0] = kCamReq;
}
inline void LinkCmd::clear_camreq() {
  if (has_camreq()) {
    delete cmd_.camreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamReq& LinkCmd::camreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camReq)
  return has_camreq()
      ? *cmd_.camreq_
      : ::LinkCamReq::default_instance();
}
inline ::LinkCamReq* LinkCmd::mutable_camreq() {
  if (!has_camreq()) {
    clear_cmd();
    set_has_camreq();
    cmd_.camreq_ = new ::LinkCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camReq)
  return cmd_.camreq_;
}
inline ::LinkCamReq* LinkCmd::release_camreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camReq)
  if (has_camreq()) {
    clear_has_cmd();
    ::LinkCamReq* temp = cmd_.camreq_;
    cmd_.camreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camreq(::LinkCamReq* camreq) {
  clear_cmd();
  if (camreq) {
    set_has_camreq();
    cmd_.camreq_ = camreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camReq)
}

// .LinkCamResp camResp = 204;
inline bool LinkCmd::has_camresp() const {
  return cmd_case() == kCamResp;
}
inline void LinkCmd::set_has_camresp() {
  _oneof_case_[0] = kCamResp;
}
inline void LinkCmd::clear_camresp() {
  if (has_camresp()) {
    delete cmd_.camresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamResp& LinkCmd::camresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camResp)
  return has_camresp()
      ? *cmd_.camresp_
      : ::LinkCamResp::default_instance();
}
inline ::LinkCamResp* LinkCmd::mutable_camresp() {
  if (!has_camresp()) {
    clear_cmd();
    set_has_camresp();
    cmd_.camresp_ = new ::LinkCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camResp)
  return cmd_.camresp_;
}
inline ::LinkCamResp* LinkCmd::release_camresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camResp)
  if (has_camresp()) {
    clear_has_cmd();
    ::LinkCamResp* temp = cmd_.camresp_;
    cmd_.camresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camresp(::LinkCamResp* camresp) {
  clear_cmd();
  if (camresp) {
    set_has_camresp();
    cmd_.camresp_ = camresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camResp)
}

// .LinkAddCamReq addCamReq = 205;
inline bool LinkCmd::has_addcamreq() const {
  return cmd_case() == kAddCamReq;
}
inline void LinkCmd::set_has_addcamreq() {
  _oneof_case_[0] = kAddCamReq;
}
inline void LinkCmd::clear_addcamreq() {
  if (has_addcamreq()) {
    delete cmd_.addcamreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkAddCamReq& LinkCmd::addcamreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addCamReq)
  return has_addcamreq()
      ? *cmd_.addcamreq_
      : ::LinkAddCamReq::default_instance();
}
inline ::LinkAddCamReq* LinkCmd::mutable_addcamreq() {
  if (!has_addcamreq()) {
    clear_cmd();
    set_has_addcamreq();
    cmd_.addcamreq_ = new ::LinkAddCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addCamReq)
  return cmd_.addcamreq_;
}
inline ::LinkAddCamReq* LinkCmd::release_addcamreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addCamReq)
  if (has_addcamreq()) {
    clear_has_cmd();
    ::LinkAddCamReq* temp = cmd_.addcamreq_;
    cmd_.addcamreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_addcamreq(::LinkAddCamReq* addcamreq) {
  clear_cmd();
  if (addcamreq) {
    set_has_addcamreq();
    cmd_.addcamreq_ = addcamreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addCamReq)
}

// .LinkAddCamResp addCamResp = 206;
inline bool LinkCmd::has_addcamresp() const {
  return cmd_case() == kAddCamResp;
}
inline void LinkCmd::set_has_addcamresp() {
  _oneof_case_[0] = kAddCamResp;
}
inline void LinkCmd::clear_addcamresp() {
  if (has_addcamresp()) {
    delete cmd_.addcamresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkAddCamResp& LinkCmd::addcamresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addCamResp)
  return has_addcamresp()
      ? *cmd_.addcamresp_
      : ::LinkAddCamResp::default_instance();
}
inline ::LinkAddCamResp* LinkCmd::mutable_addcamresp() {
  if (!has_addcamresp()) {
    clear_cmd();
    set_has_addcamresp();
    cmd_.addcamresp_ = new ::LinkAddCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addCamResp)
  return cmd_.addcamresp_;
}
inline ::LinkAddCamResp* LinkCmd::release_addcamresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addCamResp)
  if (has_addcamresp()) {
    clear_has_cmd();
    ::LinkAddCamResp* temp = cmd_.addcamresp_;
    cmd_.addcamresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_addcamresp(::LinkAddCamResp* addcamresp) {
  clear_cmd();
  if (addcamresp) {
    set_has_addcamresp();
    cmd_.addcamresp_ = addcamresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addCamResp)
}

// .LinkDelCamReq delCamReq = 207;
inline bool LinkCmd::has_delcamreq() const {
  return cmd_case() == kDelCamReq;
}
inline void LinkCmd::set_has_delcamreq() {
  _oneof_case_[0] = kDelCamReq;
}
inline void LinkCmd::clear_delcamreq() {
  if (has_delcamreq()) {
    delete cmd_.delcamreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkDelCamReq& LinkCmd::delcamreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delCamReq)
  return has_delcamreq()
      ? *cmd_.delcamreq_
      : ::LinkDelCamReq::default_instance();
}
inline ::LinkDelCamReq* LinkCmd::mutable_delcamreq() {
  if (!has_delcamreq()) {
    clear_cmd();
    set_has_delcamreq();
    cmd_.delcamreq_ = new ::LinkDelCamReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delCamReq)
  return cmd_.delcamreq_;
}
inline ::LinkDelCamReq* LinkCmd::release_delcamreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delCamReq)
  if (has_delcamreq()) {
    clear_has_cmd();
    ::LinkDelCamReq* temp = cmd_.delcamreq_;
    cmd_.delcamreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_delcamreq(::LinkDelCamReq* delcamreq) {
  clear_cmd();
  if (delcamreq) {
    set_has_delcamreq();
    cmd_.delcamreq_ = delcamreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delCamReq)
}

// .LinkDelCamResp delCamResp = 208;
inline bool LinkCmd::has_delcamresp() const {
  return cmd_case() == kDelCamResp;
}
inline void LinkCmd::set_has_delcamresp() {
  _oneof_case_[0] = kDelCamResp;
}
inline void LinkCmd::clear_delcamresp() {
  if (has_delcamresp()) {
    delete cmd_.delcamresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkDelCamResp& LinkCmd::delcamresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delCamResp)
  return has_delcamresp()
      ? *cmd_.delcamresp_
      : ::LinkDelCamResp::default_instance();
}
inline ::LinkDelCamResp* LinkCmd::mutable_delcamresp() {
  if (!has_delcamresp()) {
    clear_cmd();
    set_has_delcamresp();
    cmd_.delcamresp_ = new ::LinkDelCamResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delCamResp)
  return cmd_.delcamresp_;
}
inline ::LinkDelCamResp* LinkCmd::release_delcamresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delCamResp)
  if (has_delcamresp()) {
    clear_has_cmd();
    ::LinkDelCamResp* temp = cmd_.delcamresp_;
    cmd_.delcamresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_delcamresp(::LinkDelCamResp* delcamresp) {
  clear_cmd();
  if (delcamresp) {
    set_has_delcamresp();
    cmd_.delcamresp_ = delcamresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delCamResp)
}

// .LinkSetCamSchedReq setCamSchedReq = 209;
inline bool LinkCmd::has_setcamschedreq() const {
  return cmd_case() == kSetCamSchedReq;
}
inline void LinkCmd::set_has_setcamschedreq() {
  _oneof_case_[0] = kSetCamSchedReq;
}
inline void LinkCmd::clear_setcamschedreq() {
  if (has_setcamschedreq()) {
    delete cmd_.setcamschedreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkSetCamSchedReq& LinkCmd::setcamschedreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.setCamSchedReq)
  return has_setcamschedreq()
      ? *cmd_.setcamschedreq_
      : ::LinkSetCamSchedReq::default_instance();
}
inline ::LinkSetCamSchedReq* LinkCmd::mutable_setcamschedreq() {
  if (!has_setcamschedreq()) {
    clear_cmd();
    set_has_setcamschedreq();
    cmd_.setcamschedreq_ = new ::LinkSetCamSchedReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.setCamSchedReq)
  return cmd_.setcamschedreq_;
}
inline ::LinkSetCamSchedReq* LinkCmd::release_setcamschedreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.setCamSchedReq)
  if (has_setcamschedreq()) {
    clear_has_cmd();
    ::LinkSetCamSchedReq* temp = cmd_.setcamschedreq_;
    cmd_.setcamschedreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_setcamschedreq(::LinkSetCamSchedReq* setcamschedreq) {
  clear_cmd();
  if (setcamschedreq) {
    set_has_setcamschedreq();
    cmd_.setcamschedreq_ = setcamschedreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.setCamSchedReq)
}

// .LinkSetCamSchedResp setCamSchedResp = 210;
inline bool LinkCmd::has_setcamschedresp() const {
  return cmd_case() == kSetCamSchedResp;
}
inline void LinkCmd::set_has_setcamschedresp() {
  _oneof_case_[0] = kSetCamSchedResp;
}
inline void LinkCmd::clear_setcamschedresp() {
  if (has_setcamschedresp()) {
    delete cmd_.setcamschedresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkSetCamSchedResp& LinkCmd::setcamschedresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.setCamSchedResp)
  return has_setcamschedresp()
      ? *cmd_.setcamschedresp_
      : ::LinkSetCamSchedResp::default_instance();
}
inline ::LinkSetCamSchedResp* LinkCmd::mutable_setcamschedresp() {
  if (!has_setcamschedresp()) {
    clear_cmd();
    set_has_setcamschedresp();
    cmd_.setcamschedresp_ = new ::LinkSetCamSchedResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.setCamSchedResp)
  return cmd_.setcamschedresp_;
}
inline ::LinkSetCamSchedResp* LinkCmd::release_setcamschedresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.setCamSchedResp)
  if (has_setcamschedresp()) {
    clear_has_cmd();
    ::LinkSetCamSchedResp* temp = cmd_.setcamschedresp_;
    cmd_.setcamschedresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_setcamschedresp(::LinkSetCamSchedResp* setcamschedresp) {
  clear_cmd();
  if (setcamschedresp) {
    set_has_setcamschedresp();
    cmd_.setcamschedresp_ = setcamschedresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.setCamSchedResp)
}

// .LinkGetStreamListReq getStreamListReq = 211;
inline bool LinkCmd::has_getstreamlistreq() const {
  return cmd_case() == kGetStreamListReq;
}
inline void LinkCmd::set_has_getstreamlistreq() {
  _oneof_case_[0] = kGetStreamListReq;
}
inline void LinkCmd::clear_getstreamlistreq() {
  if (has_getstreamlistreq()) {
    delete cmd_.getstreamlistreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetStreamListReq& LinkCmd::getstreamlistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.getStreamListReq)
  return has_getstreamlistreq()
      ? *cmd_.getstreamlistreq_
      : ::LinkGetStreamListReq::default_instance();
}
inline ::LinkGetStreamListReq* LinkCmd::mutable_getstreamlistreq() {
  if (!has_getstreamlistreq()) {
    clear_cmd();
    set_has_getstreamlistreq();
    cmd_.getstreamlistreq_ = new ::LinkGetStreamListReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.getStreamListReq)
  return cmd_.getstreamlistreq_;
}
inline ::LinkGetStreamListReq* LinkCmd::release_getstreamlistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.getStreamListReq)
  if (has_getstreamlistreq()) {
    clear_has_cmd();
    ::LinkGetStreamListReq* temp = cmd_.getstreamlistreq_;
    cmd_.getstreamlistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_getstreamlistreq(::LinkGetStreamListReq* getstreamlistreq) {
  clear_cmd();
  if (getstreamlistreq) {
    set_has_getstreamlistreq();
    cmd_.getstreamlistreq_ = getstreamlistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.getStreamListReq)
}

// .LinkGetStreamListResp getStreamListResp = 212;
inline bool LinkCmd::has_getstreamlistresp() const {
  return cmd_case() == kGetStreamListResp;
}
inline void LinkCmd::set_has_getstreamlistresp() {
  _oneof_case_[0] = kGetStreamListResp;
}
inline void LinkCmd::clear_getstreamlistresp() {
  if (has_getstreamlistresp()) {
    delete cmd_.getstreamlistresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetStreamListResp& LinkCmd::getstreamlistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.getStreamListResp)
  return has_getstreamlistresp()
      ? *cmd_.getstreamlistresp_
      : ::LinkGetStreamListResp::default_instance();
}
inline ::LinkGetStreamListResp* LinkCmd::mutable_getstreamlistresp() {
  if (!has_getstreamlistresp()) {
    clear_cmd();
    set_has_getstreamlistresp();
    cmd_.getstreamlistresp_ = new ::LinkGetStreamListResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.getStreamListResp)
  return cmd_.getstreamlistresp_;
}
inline ::LinkGetStreamListResp* LinkCmd::release_getstreamlistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.getStreamListResp)
  if (has_getstreamlistresp()) {
    clear_has_cmd();
    ::LinkGetStreamListResp* temp = cmd_.getstreamlistresp_;
    cmd_.getstreamlistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_getstreamlistresp(::LinkGetStreamListResp* getstreamlistresp) {
  clear_cmd();
  if (getstreamlistresp) {
    set_has_getstreamlistresp();
    cmd_.getstreamlistresp_ = getstreamlistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.getStreamListResp)
}

// .LinkVidDiskListReq diskListReq = 301;
inline bool LinkCmd::has_disklistreq() const {
  return cmd_case() == kDiskListReq;
}
inline void LinkCmd::set_has_disklistreq() {
  _oneof_case_[0] = kDiskListReq;
}
inline void LinkCmd::clear_disklistreq() {
  if (has_disklistreq()) {
    delete cmd_.disklistreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkVidDiskListReq& LinkCmd::disklistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskListReq)
  return has_disklistreq()
      ? *cmd_.disklistreq_
      : ::LinkVidDiskListReq::default_instance();
}
inline ::LinkVidDiskListReq* LinkCmd::mutable_disklistreq() {
  if (!has_disklistreq()) {
    clear_cmd();
    set_has_disklistreq();
    cmd_.disklistreq_ = new ::LinkVidDiskListReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskListReq)
  return cmd_.disklistreq_;
}
inline ::LinkVidDiskListReq* LinkCmd::release_disklistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskListReq)
  if (has_disklistreq()) {
    clear_has_cmd();
    ::LinkVidDiskListReq* temp = cmd_.disklistreq_;
    cmd_.disklistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_disklistreq(::LinkVidDiskListReq* disklistreq) {
  clear_cmd();
  if (disklistreq) {
    set_has_disklistreq();
    cmd_.disklistreq_ = disklistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskListReq)
}

// .LinkVidDiskListResp diskListResp = 302;
inline bool LinkCmd::has_disklistresp() const {
  return cmd_case() == kDiskListResp;
}
inline void LinkCmd::set_has_disklistresp() {
  _oneof_case_[0] = kDiskListResp;
}
inline void LinkCmd::clear_disklistresp() {
  if (has_disklistresp()) {
    delete cmd_.disklistresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkVidDiskListResp& LinkCmd::disklistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskListResp)
  return has_disklistresp()
      ? *cmd_.disklistresp_
      : ::LinkVidDiskListResp::default_instance();
}
inline ::LinkVidDiskListResp* LinkCmd::mutable_disklistresp() {
  if (!has_disklistresp()) {
    clear_cmd();
    set_has_disklistresp();
    cmd_.disklistresp_ = new ::LinkVidDiskListResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskListResp)
  return cmd_.disklistresp_;
}
inline ::LinkVidDiskListResp* LinkCmd::release_disklistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskListResp)
  if (has_disklistresp()) {
    clear_has_cmd();
    ::LinkVidDiskListResp* temp = cmd_.disklistresp_;
    cmd_.disklistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_disklistresp(::LinkVidDiskListResp* disklistresp) {
  clear_cmd();
  if (disklistresp) {
    set_has_disklistresp();
    cmd_.disklistresp_ = disklistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskListResp)
}

// .LinkSysVidDiskListReq sysDiskListReq = 303;
inline bool LinkCmd::has_sysdisklistreq() const {
  return cmd_case() == kSysDiskListReq;
}
inline void LinkCmd::set_has_sysdisklistreq() {
  _oneof_case_[0] = kSysDiskListReq;
}
inline void LinkCmd::clear_sysdisklistreq() {
  if (has_sysdisklistreq()) {
    delete cmd_.sysdisklistreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkSysVidDiskListReq& LinkCmd::sysdisklistreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.sysDiskListReq)
  return has_sysdisklistreq()
      ? *cmd_.sysdisklistreq_
      : ::LinkSysVidDiskListReq::default_instance();
}
inline ::LinkSysVidDiskListReq* LinkCmd::mutable_sysdisklistreq() {
  if (!has_sysdisklistreq()) {
    clear_cmd();
    set_has_sysdisklistreq();
    cmd_.sysdisklistreq_ = new ::LinkSysVidDiskListReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.sysDiskListReq)
  return cmd_.sysdisklistreq_;
}
inline ::LinkSysVidDiskListReq* LinkCmd::release_sysdisklistreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.sysDiskListReq)
  if (has_sysdisklistreq()) {
    clear_has_cmd();
    ::LinkSysVidDiskListReq* temp = cmd_.sysdisklistreq_;
    cmd_.sysdisklistreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_sysdisklistreq(::LinkSysVidDiskListReq* sysdisklistreq) {
  clear_cmd();
  if (sysdisklistreq) {
    set_has_sysdisklistreq();
    cmd_.sysdisklistreq_ = sysdisklistreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.sysDiskListReq)
}

// .LinkSysVidDiskListResp sysDiskListResp = 304;
inline bool LinkCmd::has_sysdisklistresp() const {
  return cmd_case() == kSysDiskListResp;
}
inline void LinkCmd::set_has_sysdisklistresp() {
  _oneof_case_[0] = kSysDiskListResp;
}
inline void LinkCmd::clear_sysdisklistresp() {
  if (has_sysdisklistresp()) {
    delete cmd_.sysdisklistresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkSysVidDiskListResp& LinkCmd::sysdisklistresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.sysDiskListResp)
  return has_sysdisklistresp()
      ? *cmd_.sysdisklistresp_
      : ::LinkSysVidDiskListResp::default_instance();
}
inline ::LinkSysVidDiskListResp* LinkCmd::mutable_sysdisklistresp() {
  if (!has_sysdisklistresp()) {
    clear_cmd();
    set_has_sysdisklistresp();
    cmd_.sysdisklistresp_ = new ::LinkSysVidDiskListResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.sysDiskListResp)
  return cmd_.sysdisklistresp_;
}
inline ::LinkSysVidDiskListResp* LinkCmd::release_sysdisklistresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.sysDiskListResp)
  if (has_sysdisklistresp()) {
    clear_has_cmd();
    ::LinkSysVidDiskListResp* temp = cmd_.sysdisklistresp_;
    cmd_.sysdisklistresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_sysdisklistresp(::LinkSysVidDiskListResp* sysdisklistresp) {
  clear_cmd();
  if (sysdisklistresp) {
    set_has_sysdisklistresp();
    cmd_.sysdisklistresp_ = sysdisklistresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.sysDiskListResp)
}

// .LinkAddDiskReq addDiskReq = 305;
inline bool LinkCmd::has_adddiskreq() const {
  return cmd_case() == kAddDiskReq;
}
inline void LinkCmd::set_has_adddiskreq() {
  _oneof_case_[0] = kAddDiskReq;
}
inline void LinkCmd::clear_adddiskreq() {
  if (has_adddiskreq()) {
    delete cmd_.adddiskreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkAddDiskReq& LinkCmd::adddiskreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addDiskReq)
  return has_adddiskreq()
      ? *cmd_.adddiskreq_
      : ::LinkAddDiskReq::default_instance();
}
inline ::LinkAddDiskReq* LinkCmd::mutable_adddiskreq() {
  if (!has_adddiskreq()) {
    clear_cmd();
    set_has_adddiskreq();
    cmd_.adddiskreq_ = new ::LinkAddDiskReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addDiskReq)
  return cmd_.adddiskreq_;
}
inline ::LinkAddDiskReq* LinkCmd::release_adddiskreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addDiskReq)
  if (has_adddiskreq()) {
    clear_has_cmd();
    ::LinkAddDiskReq* temp = cmd_.adddiskreq_;
    cmd_.adddiskreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_adddiskreq(::LinkAddDiskReq* adddiskreq) {
  clear_cmd();
  if (adddiskreq) {
    set_has_adddiskreq();
    cmd_.adddiskreq_ = adddiskreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addDiskReq)
}

// .LinkAddDiskResp addDiskResp = 306;
inline bool LinkCmd::has_adddiskresp() const {
  return cmd_case() == kAddDiskResp;
}
inline void LinkCmd::set_has_adddiskresp() {
  _oneof_case_[0] = kAddDiskResp;
}
inline void LinkCmd::clear_adddiskresp() {
  if (has_adddiskresp()) {
    delete cmd_.adddiskresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkAddDiskResp& LinkCmd::adddiskresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addDiskResp)
  return has_adddiskresp()
      ? *cmd_.adddiskresp_
      : ::LinkAddDiskResp::default_instance();
}
inline ::LinkAddDiskResp* LinkCmd::mutable_adddiskresp() {
  if (!has_adddiskresp()) {
    clear_cmd();
    set_has_adddiskresp();
    cmd_.adddiskresp_ = new ::LinkAddDiskResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addDiskResp)
  return cmd_.adddiskresp_;
}
inline ::LinkAddDiskResp* LinkCmd::release_adddiskresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addDiskResp)
  if (has_adddiskresp()) {
    clear_has_cmd();
    ::LinkAddDiskResp* temp = cmd_.adddiskresp_;
    cmd_.adddiskresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_adddiskresp(::LinkAddDiskResp* adddiskresp) {
  clear_cmd();
  if (adddiskresp) {
    set_has_adddiskresp();
    cmd_.adddiskresp_ = adddiskresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addDiskResp)
}

// .LinkDelDiskReq delDiskReq = 307;
inline bool LinkCmd::has_deldiskreq() const {
  return cmd_case() == kDelDiskReq;
}
inline void LinkCmd::set_has_deldiskreq() {
  _oneof_case_[0] = kDelDiskReq;
}
inline void LinkCmd::clear_deldiskreq() {
  if (has_deldiskreq()) {
    delete cmd_.deldiskreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkDelDiskReq& LinkCmd::deldiskreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delDiskReq)
  return has_deldiskreq()
      ? *cmd_.deldiskreq_
      : ::LinkDelDiskReq::default_instance();
}
inline ::LinkDelDiskReq* LinkCmd::mutable_deldiskreq() {
  if (!has_deldiskreq()) {
    clear_cmd();
    set_has_deldiskreq();
    cmd_.deldiskreq_ = new ::LinkDelDiskReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delDiskReq)
  return cmd_.deldiskreq_;
}
inline ::LinkDelDiskReq* LinkCmd::release_deldiskreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delDiskReq)
  if (has_deldiskreq()) {
    clear_has_cmd();
    ::LinkDelDiskReq* temp = cmd_.deldiskreq_;
    cmd_.deldiskreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_deldiskreq(::LinkDelDiskReq* deldiskreq) {
  clear_cmd();
  if (deldiskreq) {
    set_has_deldiskreq();
    cmd_.deldiskreq_ = deldiskreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delDiskReq)
}

// .LinkDelDiskResp delDiskResp = 308;
inline bool LinkCmd::has_deldiskresp() const {
  return cmd_case() == kDelDiskResp;
}
inline void LinkCmd::set_has_deldiskresp() {
  _oneof_case_[0] = kDelDiskResp;
}
inline void LinkCmd::clear_deldiskresp() {
  if (has_deldiskresp()) {
    delete cmd_.deldiskresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkDelDiskResp& LinkCmd::deldiskresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.delDiskResp)
  return has_deldiskresp()
      ? *cmd_.deldiskresp_
      : ::LinkDelDiskResp::default_instance();
}
inline ::LinkDelDiskResp* LinkCmd::mutable_deldiskresp() {
  if (!has_deldiskresp()) {
    clear_cmd();
    set_has_deldiskresp();
    cmd_.deldiskresp_ = new ::LinkDelDiskResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.delDiskResp)
  return cmd_.deldiskresp_;
}
inline ::LinkDelDiskResp* LinkCmd::release_deldiskresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.delDiskResp)
  if (has_deldiskresp()) {
    clear_has_cmd();
    ::LinkDelDiskResp* temp = cmd_.deldiskresp_;
    cmd_.deldiskresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_deldiskresp(::LinkDelDiskResp* deldiskresp) {
  clear_cmd();
  if (deldiskresp) {
    set_has_deldiskresp();
    cmd_.deldiskresp_ = deldiskresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.delDiskResp)
}

// .LinkUpdateDiskLimitReq diskLimitReq = 309;
inline bool LinkCmd::has_disklimitreq() const {
  return cmd_case() == kDiskLimitReq;
}
inline void LinkCmd::set_has_disklimitreq() {
  _oneof_case_[0] = kDiskLimitReq;
}
inline void LinkCmd::clear_disklimitreq() {
  if (has_disklimitreq()) {
    delete cmd_.disklimitreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkUpdateDiskLimitReq& LinkCmd::disklimitreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskLimitReq)
  return has_disklimitreq()
      ? *cmd_.disklimitreq_
      : ::LinkUpdateDiskLimitReq::default_instance();
}
inline ::LinkUpdateDiskLimitReq* LinkCmd::mutable_disklimitreq() {
  if (!has_disklimitreq()) {
    clear_cmd();
    set_has_disklimitreq();
    cmd_.disklimitreq_ = new ::LinkUpdateDiskLimitReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskLimitReq)
  return cmd_.disklimitreq_;
}
inline ::LinkUpdateDiskLimitReq* LinkCmd::release_disklimitreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskLimitReq)
  if (has_disklimitreq()) {
    clear_has_cmd();
    ::LinkUpdateDiskLimitReq* temp = cmd_.disklimitreq_;
    cmd_.disklimitreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_disklimitreq(::LinkUpdateDiskLimitReq* disklimitreq) {
  clear_cmd();
  if (disklimitreq) {
    set_has_disklimitreq();
    cmd_.disklimitreq_ = disklimitreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskLimitReq)
}

// .LinkUpdateDiskLimitResp diskLimitResp = 310;
inline bool LinkCmd::has_disklimitresp() const {
  return cmd_case() == kDiskLimitResp;
}
inline void LinkCmd::set_has_disklimitresp() {
  _oneof_case_[0] = kDiskLimitResp;
}
inline void LinkCmd::clear_disklimitresp() {
  if (has_disklimitresp()) {
    delete cmd_.disklimitresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkUpdateDiskLimitResp& LinkCmd::disklimitresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.diskLimitResp)
  return has_disklimitresp()
      ? *cmd_.disklimitresp_
      : ::LinkUpdateDiskLimitResp::default_instance();
}
inline ::LinkUpdateDiskLimitResp* LinkCmd::mutable_disklimitresp() {
  if (!has_disklimitresp()) {
    clear_cmd();
    set_has_disklimitresp();
    cmd_.disklimitresp_ = new ::LinkUpdateDiskLimitResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.diskLimitResp)
  return cmd_.disklimitresp_;
}
inline ::LinkUpdateDiskLimitResp* LinkCmd::release_disklimitresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.diskLimitResp)
  if (has_disklimitresp()) {
    clear_has_cmd();
    ::LinkUpdateDiskLimitResp* temp = cmd_.disklimitresp_;
    cmd_.disklimitresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_disklimitresp(::LinkUpdateDiskLimitResp* disklimitresp) {
  clear_cmd();
  if (disklimitresp) {
    set_has_disklimitresp();
    cmd_.disklimitresp_ = disklimitresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.diskLimitResp)
}

// .LinkGetLicReq licReq = 401;
inline bool LinkCmd::has_licreq() const {
  return cmd_case() == kLicReq;
}
inline void LinkCmd::set_has_licreq() {
  _oneof_case_[0] = kLicReq;
}
inline void LinkCmd::clear_licreq() {
  if (has_licreq()) {
    delete cmd_.licreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetLicReq& LinkCmd::licreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.licReq)
  return has_licreq()
      ? *cmd_.licreq_
      : ::LinkGetLicReq::default_instance();
}
inline ::LinkGetLicReq* LinkCmd::mutable_licreq() {
  if (!has_licreq()) {
    clear_cmd();
    set_has_licreq();
    cmd_.licreq_ = new ::LinkGetLicReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.licReq)
  return cmd_.licreq_;
}
inline ::LinkGetLicReq* LinkCmd::release_licreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.licReq)
  if (has_licreq()) {
    clear_has_cmd();
    ::LinkGetLicReq* temp = cmd_.licreq_;
    cmd_.licreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_licreq(::LinkGetLicReq* licreq) {
  clear_cmd();
  if (licreq) {
    set_has_licreq();
    cmd_.licreq_ = licreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.licReq)
}

// .LinkGetLicResp licResp = 402;
inline bool LinkCmd::has_licresp() const {
  return cmd_case() == kLicResp;
}
inline void LinkCmd::set_has_licresp() {
  _oneof_case_[0] = kLicResp;
}
inline void LinkCmd::clear_licresp() {
  if (has_licresp()) {
    delete cmd_.licresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetLicResp& LinkCmd::licresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.licResp)
  return has_licresp()
      ? *cmd_.licresp_
      : ::LinkGetLicResp::default_instance();
}
inline ::LinkGetLicResp* LinkCmd::mutable_licresp() {
  if (!has_licresp()) {
    clear_cmd();
    set_has_licresp();
    cmd_.licresp_ = new ::LinkGetLicResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.licResp)
  return cmd_.licresp_;
}
inline ::LinkGetLicResp* LinkCmd::release_licresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.licResp)
  if (has_licresp()) {
    clear_has_cmd();
    ::LinkGetLicResp* temp = cmd_.licresp_;
    cmd_.licresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_licresp(::LinkGetLicResp* licresp) {
  clear_cmd();
  if (licresp) {
    set_has_licresp();
    cmd_.licresp_ = licresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.licResp)
}

// .LinkGetVerReq verReq = 403;
inline bool LinkCmd::has_verreq() const {
  return cmd_case() == kVerReq;
}
inline void LinkCmd::set_has_verreq() {
  _oneof_case_[0] = kVerReq;
}
inline void LinkCmd::clear_verreq() {
  if (has_verreq()) {
    delete cmd_.verreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetVerReq& LinkCmd::verreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.verReq)
  return has_verreq()
      ? *cmd_.verreq_
      : ::LinkGetVerReq::default_instance();
}
inline ::LinkGetVerReq* LinkCmd::mutable_verreq() {
  if (!has_verreq()) {
    clear_cmd();
    set_has_verreq();
    cmd_.verreq_ = new ::LinkGetVerReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.verReq)
  return cmd_.verreq_;
}
inline ::LinkGetVerReq* LinkCmd::release_verreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.verReq)
  if (has_verreq()) {
    clear_has_cmd();
    ::LinkGetVerReq* temp = cmd_.verreq_;
    cmd_.verreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_verreq(::LinkGetVerReq* verreq) {
  clear_cmd();
  if (verreq) {
    set_has_verreq();
    cmd_.verreq_ = verreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.verReq)
}

// .LinkGetVerResp verResp = 404;
inline bool LinkCmd::has_verresp() const {
  return cmd_case() == kVerResp;
}
inline void LinkCmd::set_has_verresp() {
  _oneof_case_[0] = kVerResp;
}
inline void LinkCmd::clear_verresp() {
  if (has_verresp()) {
    delete cmd_.verresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkGetVerResp& LinkCmd::verresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.verResp)
  return has_verresp()
      ? *cmd_.verresp_
      : ::LinkGetVerResp::default_instance();
}
inline ::LinkGetVerResp* LinkCmd::mutable_verresp() {
  if (!has_verresp()) {
    clear_cmd();
    set_has_verresp();
    cmd_.verresp_ = new ::LinkGetVerResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.verResp)
  return cmd_.verresp_;
}
inline ::LinkGetVerResp* LinkCmd::release_verresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.verResp)
  if (has_verresp()) {
    clear_has_cmd();
    ::LinkGetVerResp* temp = cmd_.verresp_;
    cmd_.verresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_verresp(::LinkGetVerResp* verresp) {
  clear_cmd();
  if (verresp) {
    set_has_verresp();
    cmd_.verresp_ = verresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.verResp)
}

// .LinkConfLicReq confLicReq = 405;
inline bool LinkCmd::has_conflicreq() const {
  return cmd_case() == kConfLicReq;
}
inline void LinkCmd::set_has_conflicreq() {
  _oneof_case_[0] = kConfLicReq;
}
inline void LinkCmd::clear_conflicreq() {
  if (has_conflicreq()) {
    delete cmd_.conflicreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkConfLicReq& LinkCmd::conflicreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.confLicReq)
  return has_conflicreq()
      ? *cmd_.conflicreq_
      : ::LinkConfLicReq::default_instance();
}
inline ::LinkConfLicReq* LinkCmd::mutable_conflicreq() {
  if (!has_conflicreq()) {
    clear_cmd();
    set_has_conflicreq();
    cmd_.conflicreq_ = new ::LinkConfLicReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.confLicReq)
  return cmd_.conflicreq_;
}
inline ::LinkConfLicReq* LinkCmd::release_conflicreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.confLicReq)
  if (has_conflicreq()) {
    clear_has_cmd();
    ::LinkConfLicReq* temp = cmd_.conflicreq_;
    cmd_.conflicreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_conflicreq(::LinkConfLicReq* conflicreq) {
  clear_cmd();
  if (conflicreq) {
    set_has_conflicreq();
    cmd_.conflicreq_ = conflicreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.confLicReq)
}

// .LinkConfLicResp confLicResp = 406;
inline bool LinkCmd::has_conflicresp() const {
  return cmd_case() == kConfLicResp;
}
inline void LinkCmd::set_has_conflicresp() {
  _oneof_case_[0] = kConfLicResp;
}
inline void LinkCmd::clear_conflicresp() {
  if (has_conflicresp()) {
    delete cmd_.conflicresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkConfLicResp& LinkCmd::conflicresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.confLicResp)
  return has_conflicresp()
      ? *cmd_.conflicresp_
      : ::LinkConfLicResp::default_instance();
}
inline ::LinkConfLicResp* LinkCmd::mutable_conflicresp() {
  if (!has_conflicresp()) {
    clear_cmd();
    set_has_conflicresp();
    cmd_.conflicresp_ = new ::LinkConfLicResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.confLicResp)
  return cmd_.conflicresp_;
}
inline ::LinkConfLicResp* LinkCmd::release_conflicresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.confLicResp)
  if (has_conflicresp()) {
    clear_has_cmd();
    ::LinkConfLicResp* temp = cmd_.conflicresp_;
    cmd_.conflicresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_conflicresp(::LinkConfLicResp* conflicresp) {
  clear_cmd();
  if (conflicresp) {
    set_has_conflicresp();
    cmd_.conflicresp_ = conflicresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.confLicResp)
}

// .LinkAddUserReq addUserReq = 501;
inline bool LinkCmd::has_adduserreq() const {
  return cmd_case() == kAddUserReq;
}
inline void LinkCmd::set_has_adduserreq() {
  _oneof_case_[0] = kAddUserReq;
}
inline void LinkCmd::clear_adduserreq() {
  if (has_adduserreq()) {
    delete cmd_.adduserreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkAddUserReq& LinkCmd::adduserreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addUserReq)
  return has_adduserreq()
      ? *cmd_.adduserreq_
      : ::LinkAddUserReq::default_instance();
}
inline ::LinkAddUserReq* LinkCmd::mutable_adduserreq() {
  if (!has_adduserreq()) {
    clear_cmd();
    set_has_adduserreq();
    cmd_.adduserreq_ = new ::LinkAddUserReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addUserReq)
  return cmd_.adduserreq_;
}
inline ::LinkAddUserReq* LinkCmd::release_adduserreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addUserReq)
  if (has_adduserreq()) {
    clear_has_cmd();
    ::LinkAddUserReq* temp = cmd_.adduserreq_;
    cmd_.adduserreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_adduserreq(::LinkAddUserReq* adduserreq) {
  clear_cmd();
  if (adduserreq) {
    set_has_adduserreq();
    cmd_.adduserreq_ = adduserreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addUserReq)
}

// .LinkAddUserResp addUserResp = 502;
inline bool LinkCmd::has_adduserresp() const {
  return cmd_case() == kAddUserResp;
}
inline void LinkCmd::set_has_adduserresp() {
  _oneof_case_[0] = kAddUserResp;
}
inline void LinkCmd::clear_adduserresp() {
  if (has_adduserresp()) {
    delete cmd_.adduserresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkAddUserResp& LinkCmd::adduserresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.addUserResp)
  return has_adduserresp()
      ? *cmd_.adduserresp_
      : ::LinkAddUserResp::default_instance();
}
inline ::LinkAddUserResp* LinkCmd::mutable_adduserresp() {
  if (!has_adduserresp()) {
    clear_cmd();
    set_has_adduserresp();
    cmd_.adduserresp_ = new ::LinkAddUserResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.addUserResp)
  return cmd_.adduserresp_;
}
inline ::LinkAddUserResp* LinkCmd::release_adduserresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.addUserResp)
  if (has_adduserresp()) {
    clear_has_cmd();
    ::LinkAddUserResp* temp = cmd_.adduserresp_;
    cmd_.adduserresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_adduserresp(::LinkAddUserResp* adduserresp) {
  clear_cmd();
  if (adduserresp) {
    set_has_adduserresp();
    cmd_.adduserresp_ = adduserresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.addUserResp)
}

// .LinkHasRecordReq hasRecReq = 601;
inline bool LinkCmd::has_hasrecreq() const {
  return cmd_case() == kHasRecReq;
}
inline void LinkCmd::set_has_hasrecreq() {
  _oneof_case_[0] = kHasRecReq;
}
inline void LinkCmd::clear_hasrecreq() {
  if (has_hasrecreq()) {
    delete cmd_.hasrecreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkHasRecordReq& LinkCmd::hasrecreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.hasRecReq)
  return has_hasrecreq()
      ? *cmd_.hasrecreq_
      : ::LinkHasRecordReq::default_instance();
}
inline ::LinkHasRecordReq* LinkCmd::mutable_hasrecreq() {
  if (!has_hasrecreq()) {
    clear_cmd();
    set_has_hasrecreq();
    cmd_.hasrecreq_ = new ::LinkHasRecordReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.hasRecReq)
  return cmd_.hasrecreq_;
}
inline ::LinkHasRecordReq* LinkCmd::release_hasrecreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.hasRecReq)
  if (has_hasrecreq()) {
    clear_has_cmd();
    ::LinkHasRecordReq* temp = cmd_.hasrecreq_;
    cmd_.hasrecreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_hasrecreq(::LinkHasRecordReq* hasrecreq) {
  clear_cmd();
  if (hasrecreq) {
    set_has_hasrecreq();
    cmd_.hasrecreq_ = hasrecreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.hasRecReq)
}

// .LinkHasRecordResp hasRecResp = 602;
inline bool LinkCmd::has_hasrecresp() const {
  return cmd_case() == kHasRecResp;
}
inline void LinkCmd::set_has_hasrecresp() {
  _oneof_case_[0] = kHasRecResp;
}
inline void LinkCmd::clear_hasrecresp() {
  if (has_hasrecresp()) {
    delete cmd_.hasrecresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkHasRecordResp& LinkCmd::hasrecresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.hasRecResp)
  return has_hasrecresp()
      ? *cmd_.hasrecresp_
      : ::LinkHasRecordResp::default_instance();
}
inline ::LinkHasRecordResp* LinkCmd::mutable_hasrecresp() {
  if (!has_hasrecresp()) {
    clear_cmd();
    set_has_hasrecresp();
    cmd_.hasrecresp_ = new ::LinkHasRecordResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.hasRecResp)
  return cmd_.hasrecresp_;
}
inline ::LinkHasRecordResp* LinkCmd::release_hasrecresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.hasRecResp)
  if (has_hasrecresp()) {
    clear_has_cmd();
    ::LinkHasRecordResp* temp = cmd_.hasrecresp_;
    cmd_.hasrecresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_hasrecresp(::LinkHasRecordResp* hasrecresp) {
  clear_cmd();
  if (hasrecresp) {
    set_has_hasrecresp();
    cmd_.hasrecresp_ = hasrecresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.hasRecResp)
}

// .LinkSearchRecordReq searchRecReq = 603;
inline bool LinkCmd::has_searchrecreq() const {
  return cmd_case() == kSearchRecReq;
}
inline void LinkCmd::set_has_searchrecreq() {
  _oneof_case_[0] = kSearchRecReq;
}
inline void LinkCmd::clear_searchrecreq() {
  if (has_searchrecreq()) {
    delete cmd_.searchrecreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkSearchRecordReq& LinkCmd::searchrecreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.searchRecReq)
  return has_searchrecreq()
      ? *cmd_.searchrecreq_
      : ::LinkSearchRecordReq::default_instance();
}
inline ::LinkSearchRecordReq* LinkCmd::mutable_searchrecreq() {
  if (!has_searchrecreq()) {
    clear_cmd();
    set_has_searchrecreq();
    cmd_.searchrecreq_ = new ::LinkSearchRecordReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.searchRecReq)
  return cmd_.searchrecreq_;
}
inline ::LinkSearchRecordReq* LinkCmd::release_searchrecreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.searchRecReq)
  if (has_searchrecreq()) {
    clear_has_cmd();
    ::LinkSearchRecordReq* temp = cmd_.searchrecreq_;
    cmd_.searchrecreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_searchrecreq(::LinkSearchRecordReq* searchrecreq) {
  clear_cmd();
  if (searchrecreq) {
    set_has_searchrecreq();
    cmd_.searchrecreq_ = searchrecreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.searchRecReq)
}

// .LinkSearchRecordResp searchRecResp = 604;
inline bool LinkCmd::has_searchrecresp() const {
  return cmd_case() == kSearchRecResp;
}
inline void LinkCmd::set_has_searchrecresp() {
  _oneof_case_[0] = kSearchRecResp;
}
inline void LinkCmd::clear_searchrecresp() {
  if (has_searchrecresp()) {
    delete cmd_.searchrecresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkSearchRecordResp& LinkCmd::searchrecresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.searchRecResp)
  return has_searchrecresp()
      ? *cmd_.searchrecresp_
      : ::LinkSearchRecordResp::default_instance();
}
inline ::LinkSearchRecordResp* LinkCmd::mutable_searchrecresp() {
  if (!has_searchrecresp()) {
    clear_cmd();
    set_has_searchrecresp();
    cmd_.searchrecresp_ = new ::LinkSearchRecordResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.searchRecResp)
  return cmd_.searchrecresp_;
}
inline ::LinkSearchRecordResp* LinkCmd::release_searchrecresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.searchRecResp)
  if (has_searchrecresp()) {
    clear_has_cmd();
    ::LinkSearchRecordResp* temp = cmd_.searchrecresp_;
    cmd_.searchrecresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_searchrecresp(::LinkSearchRecordResp* searchrecresp) {
  clear_cmd();
  if (searchrecresp) {
    set_has_searchrecresp();
    cmd_.searchrecresp_ = searchrecresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.searchRecResp)
}

// .LinkStartLiveCmd startLiveCmd = 701;
inline bool LinkCmd::has_startlivecmd() const {
  return cmd_case() == kStartLiveCmd;
}
inline void LinkCmd::set_has_startlivecmd() {
  _oneof_case_[0] = kStartLiveCmd;
}
inline void LinkCmd::clear_startlivecmd() {
  if (has_startlivecmd()) {
    delete cmd_.startlivecmd_;
    clear_has_cmd();
  }
}
inline  const ::LinkStartLiveCmd& LinkCmd::startlivecmd() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.startLiveCmd)
  return has_startlivecmd()
      ? *cmd_.startlivecmd_
      : ::LinkStartLiveCmd::default_instance();
}
inline ::LinkStartLiveCmd* LinkCmd::mutable_startlivecmd() {
  if (!has_startlivecmd()) {
    clear_cmd();
    set_has_startlivecmd();
    cmd_.startlivecmd_ = new ::LinkStartLiveCmd;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.startLiveCmd)
  return cmd_.startlivecmd_;
}
inline ::LinkStartLiveCmd* LinkCmd::release_startlivecmd() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.startLiveCmd)
  if (has_startlivecmd()) {
    clear_has_cmd();
    ::LinkStartLiveCmd* temp = cmd_.startlivecmd_;
    cmd_.startlivecmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_startlivecmd(::LinkStartLiveCmd* startlivecmd) {
  clear_cmd();
  if (startlivecmd) {
    set_has_startlivecmd();
    cmd_.startlivecmd_ = startlivecmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.startLiveCmd)
}

// .LinkStopLiveCmd stopLiveCmd = 702;
inline bool LinkCmd::has_stoplivecmd() const {
  return cmd_case() == kStopLiveCmd;
}
inline void LinkCmd::set_has_stoplivecmd() {
  _oneof_case_[0] = kStopLiveCmd;
}
inline void LinkCmd::clear_stoplivecmd() {
  if (has_stoplivecmd()) {
    delete cmd_.stoplivecmd_;
    clear_has_cmd();
  }
}
inline  const ::LinkStopLiveCmd& LinkCmd::stoplivecmd() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.stopLiveCmd)
  return has_stoplivecmd()
      ? *cmd_.stoplivecmd_
      : ::LinkStopLiveCmd::default_instance();
}
inline ::LinkStopLiveCmd* LinkCmd::mutable_stoplivecmd() {
  if (!has_stoplivecmd()) {
    clear_cmd();
    set_has_stoplivecmd();
    cmd_.stoplivecmd_ = new ::LinkStopLiveCmd;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.stopLiveCmd)
  return cmd_.stoplivecmd_;
}
inline ::LinkStopLiveCmd* LinkCmd::release_stoplivecmd() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.stopLiveCmd)
  if (has_stoplivecmd()) {
    clear_has_cmd();
    ::LinkStopLiveCmd* temp = cmd_.stoplivecmd_;
    cmd_.stoplivecmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_stoplivecmd(::LinkStopLiveCmd* stoplivecmd) {
  clear_cmd();
  if (stoplivecmd) {
    set_has_stoplivecmd();
    cmd_.stoplivecmd_ = stoplivecmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.stopLiveCmd)
}

// .LinkPlayBackCmd playBackCmd = 703;
inline bool LinkCmd::has_playbackcmd() const {
  return cmd_case() == kPlayBackCmd;
}
inline void LinkCmd::set_has_playbackcmd() {
  _oneof_case_[0] = kPlayBackCmd;
}
inline void LinkCmd::clear_playbackcmd() {
  if (has_playbackcmd()) {
    delete cmd_.playbackcmd_;
    clear_has_cmd();
  }
}
inline  const ::LinkPlayBackCmd& LinkCmd::playbackcmd() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.playBackCmd)
  return has_playbackcmd()
      ? *cmd_.playbackcmd_
      : ::LinkPlayBackCmd::default_instance();
}
inline ::LinkPlayBackCmd* LinkCmd::mutable_playbackcmd() {
  if (!has_playbackcmd()) {
    clear_cmd();
    set_has_playbackcmd();
    cmd_.playbackcmd_ = new ::LinkPlayBackCmd;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.playBackCmd)
  return cmd_.playbackcmd_;
}
inline ::LinkPlayBackCmd* LinkCmd::release_playbackcmd() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.playBackCmd)
  if (has_playbackcmd()) {
    clear_has_cmd();
    ::LinkPlayBackCmd* temp = cmd_.playbackcmd_;
    cmd_.playbackcmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_playbackcmd(::LinkPlayBackCmd* playbackcmd) {
  clear_cmd();
  if (playbackcmd) {
    set_has_playbackcmd();
    cmd_.playbackcmd_ = playbackcmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.playBackCmd)
}

// .LinkPlayPauseCmd playPauseCmd = 704;
inline bool LinkCmd::has_playpausecmd() const {
  return cmd_case() == kPlayPauseCmd;
}
inline void LinkCmd::set_has_playpausecmd() {
  _oneof_case_[0] = kPlayPauseCmd;
}
inline void LinkCmd::clear_playpausecmd() {
  if (has_playpausecmd()) {
    delete cmd_.playpausecmd_;
    clear_has_cmd();
  }
}
inline  const ::LinkPlayPauseCmd& LinkCmd::playpausecmd() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.playPauseCmd)
  return has_playpausecmd()
      ? *cmd_.playpausecmd_
      : ::LinkPlayPauseCmd::default_instance();
}
inline ::LinkPlayPauseCmd* LinkCmd::mutable_playpausecmd() {
  if (!has_playpausecmd()) {
    clear_cmd();
    set_has_playpausecmd();
    cmd_.playpausecmd_ = new ::LinkPlayPauseCmd;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.playPauseCmd)
  return cmd_.playpausecmd_;
}
inline ::LinkPlayPauseCmd* LinkCmd::release_playpausecmd() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.playPauseCmd)
  if (has_playpausecmd()) {
    clear_has_cmd();
    ::LinkPlayPauseCmd* temp = cmd_.playpausecmd_;
    cmd_.playpausecmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_playpausecmd(::LinkPlayPauseCmd* playpausecmd) {
  clear_cmd();
  if (playpausecmd) {
    set_has_playpausecmd();
    cmd_.playpausecmd_ = playpausecmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.playPauseCmd)
}

// .LinkPlayResumeCmd playResumeCmd = 705;
inline bool LinkCmd::has_playresumecmd() const {
  return cmd_case() == kPlayResumeCmd;
}
inline void LinkCmd::set_has_playresumecmd() {
  _oneof_case_[0] = kPlayResumeCmd;
}
inline void LinkCmd::clear_playresumecmd() {
  if (has_playresumecmd()) {
    delete cmd_.playresumecmd_;
    clear_has_cmd();
  }
}
inline  const ::LinkPlayResumeCmd& LinkCmd::playresumecmd() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.playResumeCmd)
  return has_playresumecmd()
      ? *cmd_.playresumecmd_
      : ::LinkPlayResumeCmd::default_instance();
}
inline ::LinkPlayResumeCmd* LinkCmd::mutable_playresumecmd() {
  if (!has_playresumecmd()) {
    clear_cmd();
    set_has_playresumecmd();
    cmd_.playresumecmd_ = new ::LinkPlayResumeCmd;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.playResumeCmd)
  return cmd_.playresumecmd_;
}
inline ::LinkPlayResumeCmd* LinkCmd::release_playresumecmd() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.playResumeCmd)
  if (has_playresumecmd()) {
    clear_has_cmd();
    ::LinkPlayResumeCmd* temp = cmd_.playresumecmd_;
    cmd_.playresumecmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_playresumecmd(::LinkPlayResumeCmd* playresumecmd) {
  clear_cmd();
  if (playresumecmd) {
    set_has_playresumecmd();
    cmd_.playresumecmd_ = playresumecmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.playResumeCmd)
}

// .LinkPlaySeekCmd playSeekCmd = 706;
inline bool LinkCmd::has_playseekcmd() const {
  return cmd_case() == kPlaySeekCmd;
}
inline void LinkCmd::set_has_playseekcmd() {
  _oneof_case_[0] = kPlaySeekCmd;
}
inline void LinkCmd::clear_playseekcmd() {
  if (has_playseekcmd()) {
    delete cmd_.playseekcmd_;
    clear_has_cmd();
  }
}
inline  const ::LinkPlaySeekCmd& LinkCmd::playseekcmd() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.playSeekCmd)
  return has_playseekcmd()
      ? *cmd_.playseekcmd_
      : ::LinkPlaySeekCmd::default_instance();
}
inline ::LinkPlaySeekCmd* LinkCmd::mutable_playseekcmd() {
  if (!has_playseekcmd()) {
    clear_cmd();
    set_has_playseekcmd();
    cmd_.playseekcmd_ = new ::LinkPlaySeekCmd;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.playSeekCmd)
  return cmd_.playseekcmd_;
}
inline ::LinkPlaySeekCmd* LinkCmd::release_playseekcmd() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.playSeekCmd)
  if (has_playseekcmd()) {
    clear_has_cmd();
    ::LinkPlaySeekCmd* temp = cmd_.playseekcmd_;
    cmd_.playseekcmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_playseekcmd(::LinkPlaySeekCmd* playseekcmd) {
  clear_cmd();
  if (playseekcmd) {
    set_has_playseekcmd();
    cmd_.playseekcmd_ = playseekcmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.playSeekCmd)
}

// .LinkPlayStopCmd playStopCmd = 707;
inline bool LinkCmd::has_playstopcmd() const {
  return cmd_case() == kPlayStopCmd;
}
inline void LinkCmd::set_has_playstopcmd() {
  _oneof_case_[0] = kPlayStopCmd;
}
inline void LinkCmd::clear_playstopcmd() {
  if (has_playstopcmd()) {
    delete cmd_.playstopcmd_;
    clear_has_cmd();
  }
}
inline  const ::LinkPlayStopCmd& LinkCmd::playstopcmd() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.playStopCmd)
  return has_playstopcmd()
      ? *cmd_.playstopcmd_
      : ::LinkPlayStopCmd::default_instance();
}
inline ::LinkPlayStopCmd* LinkCmd::mutable_playstopcmd() {
  if (!has_playstopcmd()) {
    clear_cmd();
    set_has_playstopcmd();
    cmd_.playstopcmd_ = new ::LinkPlayStopCmd;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.playStopCmd)
  return cmd_.playstopcmd_;
}
inline ::LinkPlayStopCmd* LinkCmd::release_playstopcmd() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.playStopCmd)
  if (has_playstopcmd()) {
    clear_has_cmd();
    ::LinkPlayStopCmd* temp = cmd_.playstopcmd_;
    cmd_.playstopcmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_playstopcmd(::LinkPlayStopCmd* playstopcmd) {
  clear_cmd();
  if (playstopcmd) {
    set_has_playstopcmd();
    cmd_.playstopcmd_ = playstopcmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.playStopCmd)
}

// .LinkPtzCmd ptzCmd = 801;
inline bool LinkCmd::has_ptzcmd() const {
  return cmd_case() == kPtzCmd;
}
inline void LinkCmd::set_has_ptzcmd() {
  _oneof_case_[0] = kPtzCmd;
}
inline void LinkCmd::clear_ptzcmd() {
  if (has_ptzcmd()) {
    delete cmd_.ptzcmd_;
    clear_has_cmd();
  }
}
inline  const ::LinkPtzCmd& LinkCmd::ptzcmd() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.ptzCmd)
  return has_ptzcmd()
      ? *cmd_.ptzcmd_
      : ::LinkPtzCmd::default_instance();
}
inline ::LinkPtzCmd* LinkCmd::mutable_ptzcmd() {
  if (!has_ptzcmd()) {
    clear_cmd();
    set_has_ptzcmd();
    cmd_.ptzcmd_ = new ::LinkPtzCmd;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.ptzCmd)
  return cmd_.ptzcmd_;
}
inline ::LinkPtzCmd* LinkCmd::release_ptzcmd() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.ptzCmd)
  if (has_ptzcmd()) {
    clear_has_cmd();
    ::LinkPtzCmd* temp = cmd_.ptzcmd_;
    cmd_.ptzcmd_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_ptzcmd(::LinkPtzCmd* ptzcmd) {
  clear_cmd();
  if (ptzcmd) {
    set_has_ptzcmd();
    cmd_.ptzcmd_ = ptzcmd;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.ptzCmd)
}

// .LinkCamSearchStartReq camSearchStartReq = 901;
inline bool LinkCmd::has_camsearchstartreq() const {
  return cmd_case() == kCamSearchStartReq;
}
inline void LinkCmd::set_has_camsearchstartreq() {
  _oneof_case_[0] = kCamSearchStartReq;
}
inline void LinkCmd::clear_camsearchstartreq() {
  if (has_camsearchstartreq()) {
    delete cmd_.camsearchstartreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamSearchStartReq& LinkCmd::camsearchstartreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camSearchStartReq)
  return has_camsearchstartreq()
      ? *cmd_.camsearchstartreq_
      : ::LinkCamSearchStartReq::default_instance();
}
inline ::LinkCamSearchStartReq* LinkCmd::mutable_camsearchstartreq() {
  if (!has_camsearchstartreq()) {
    clear_cmd();
    set_has_camsearchstartreq();
    cmd_.camsearchstartreq_ = new ::LinkCamSearchStartReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camSearchStartReq)
  return cmd_.camsearchstartreq_;
}
inline ::LinkCamSearchStartReq* LinkCmd::release_camsearchstartreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camSearchStartReq)
  if (has_camsearchstartreq()) {
    clear_has_cmd();
    ::LinkCamSearchStartReq* temp = cmd_.camsearchstartreq_;
    cmd_.camsearchstartreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camsearchstartreq(::LinkCamSearchStartReq* camsearchstartreq) {
  clear_cmd();
  if (camsearchstartreq) {
    set_has_camsearchstartreq();
    cmd_.camsearchstartreq_ = camsearchstartreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camSearchStartReq)
}

// .LinkCamSearchStartResp camSearchStartResp = 902;
inline bool LinkCmd::has_camsearchstartresp() const {
  return cmd_case() == kCamSearchStartResp;
}
inline void LinkCmd::set_has_camsearchstartresp() {
  _oneof_case_[0] = kCamSearchStartResp;
}
inline void LinkCmd::clear_camsearchstartresp() {
  if (has_camsearchstartresp()) {
    delete cmd_.camsearchstartresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamSearchStartResp& LinkCmd::camsearchstartresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camSearchStartResp)
  return has_camsearchstartresp()
      ? *cmd_.camsearchstartresp_
      : ::LinkCamSearchStartResp::default_instance();
}
inline ::LinkCamSearchStartResp* LinkCmd::mutable_camsearchstartresp() {
  if (!has_camsearchstartresp()) {
    clear_cmd();
    set_has_camsearchstartresp();
    cmd_.camsearchstartresp_ = new ::LinkCamSearchStartResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camSearchStartResp)
  return cmd_.camsearchstartresp_;
}
inline ::LinkCamSearchStartResp* LinkCmd::release_camsearchstartresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camSearchStartResp)
  if (has_camsearchstartresp()) {
    clear_has_cmd();
    ::LinkCamSearchStartResp* temp = cmd_.camsearchstartresp_;
    cmd_.camsearchstartresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camsearchstartresp(::LinkCamSearchStartResp* camsearchstartresp) {
  clear_cmd();
  if (camsearchstartresp) {
    set_has_camsearchstartresp();
    cmd_.camsearchstartresp_ = camsearchstartresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camSearchStartResp)
}

// .LinkCamSearchStopReq camSearchStopReq = 903;
inline bool LinkCmd::has_camsearchstopreq() const {
  return cmd_case() == kCamSearchStopReq;
}
inline void LinkCmd::set_has_camsearchstopreq() {
  _oneof_case_[0] = kCamSearchStopReq;
}
inline void LinkCmd::clear_camsearchstopreq() {
  if (has_camsearchstopreq()) {
    delete cmd_.camsearchstopreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamSearchStopReq& LinkCmd::camsearchstopreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camSearchStopReq)
  return has_camsearchstopreq()
      ? *cmd_.camsearchstopreq_
      : ::LinkCamSearchStopReq::default_instance();
}
inline ::LinkCamSearchStopReq* LinkCmd::mutable_camsearchstopreq() {
  if (!has_camsearchstopreq()) {
    clear_cmd();
    set_has_camsearchstopreq();
    cmd_.camsearchstopreq_ = new ::LinkCamSearchStopReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camSearchStopReq)
  return cmd_.camsearchstopreq_;
}
inline ::LinkCamSearchStopReq* LinkCmd::release_camsearchstopreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camSearchStopReq)
  if (has_camsearchstopreq()) {
    clear_has_cmd();
    ::LinkCamSearchStopReq* temp = cmd_.camsearchstopreq_;
    cmd_.camsearchstopreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camsearchstopreq(::LinkCamSearchStopReq* camsearchstopreq) {
  clear_cmd();
  if (camsearchstopreq) {
    set_has_camsearchstopreq();
    cmd_.camsearchstopreq_ = camsearchstopreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camSearchStopReq)
}

// .LinkCamSearchStopResp camSearchStopResp = 904;
inline bool LinkCmd::has_camsearchstopresp() const {
  return cmd_case() == kCamSearchStopResp;
}
inline void LinkCmd::set_has_camsearchstopresp() {
  _oneof_case_[0] = kCamSearchStopResp;
}
inline void LinkCmd::clear_camsearchstopresp() {
  if (has_camsearchstopresp()) {
    delete cmd_.camsearchstopresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamSearchStopResp& LinkCmd::camsearchstopresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camSearchStopResp)
  return has_camsearchstopresp()
      ? *cmd_.camsearchstopresp_
      : ::LinkCamSearchStopResp::default_instance();
}
inline ::LinkCamSearchStopResp* LinkCmd::mutable_camsearchstopresp() {
  if (!has_camsearchstopresp()) {
    clear_cmd();
    set_has_camsearchstopresp();
    cmd_.camsearchstopresp_ = new ::LinkCamSearchStopResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camSearchStopResp)
  return cmd_.camsearchstopresp_;
}
inline ::LinkCamSearchStopResp* LinkCmd::release_camsearchstopresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camSearchStopResp)
  if (has_camsearchstopresp()) {
    clear_has_cmd();
    ::LinkCamSearchStopResp* temp = cmd_.camsearchstopresp_;
    cmd_.camsearchstopresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camsearchstopresp(::LinkCamSearchStopResp* camsearchstopresp) {
  clear_cmd();
  if (camsearchstopresp) {
    set_has_camsearchstopresp();
    cmd_.camsearchstopresp_ = camsearchstopresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camSearchStopResp)
}

// .LinkRegEventReq regEventReq = 905;
inline bool LinkCmd::has_regeventreq() const {
  return cmd_case() == kRegEventReq;
}
inline void LinkCmd::set_has_regeventreq() {
  _oneof_case_[0] = kRegEventReq;
}
inline void LinkCmd::clear_regeventreq() {
  if (has_regeventreq()) {
    delete cmd_.regeventreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkRegEventReq& LinkCmd::regeventreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.regEventReq)
  return has_regeventreq()
      ? *cmd_.regeventreq_
      : ::LinkRegEventReq::default_instance();
}
inline ::LinkRegEventReq* LinkCmd::mutable_regeventreq() {
  if (!has_regeventreq()) {
    clear_cmd();
    set_has_regeventreq();
    cmd_.regeventreq_ = new ::LinkRegEventReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.regEventReq)
  return cmd_.regeventreq_;
}
inline ::LinkRegEventReq* LinkCmd::release_regeventreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.regEventReq)
  if (has_regeventreq()) {
    clear_has_cmd();
    ::LinkRegEventReq* temp = cmd_.regeventreq_;
    cmd_.regeventreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_regeventreq(::LinkRegEventReq* regeventreq) {
  clear_cmd();
  if (regeventreq) {
    set_has_regeventreq();
    cmd_.regeventreq_ = regeventreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.regEventReq)
}

// .LinkRegEventResp regEventResp = 906;
inline bool LinkCmd::has_regeventresp() const {
  return cmd_case() == kRegEventResp;
}
inline void LinkCmd::set_has_regeventresp() {
  _oneof_case_[0] = kRegEventResp;
}
inline void LinkCmd::clear_regeventresp() {
  if (has_regeventresp()) {
    delete cmd_.regeventresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkRegEventResp& LinkCmd::regeventresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.regEventResp)
  return has_regeventresp()
      ? *cmd_.regeventresp_
      : ::LinkRegEventResp::default_instance();
}
inline ::LinkRegEventResp* LinkCmd::mutable_regeventresp() {
  if (!has_regeventresp()) {
    clear_cmd();
    set_has_regeventresp();
    cmd_.regeventresp_ = new ::LinkRegEventResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.regEventResp)
  return cmd_.regeventresp_;
}
inline ::LinkRegEventResp* LinkCmd::release_regeventresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.regEventResp)
  if (has_regeventresp()) {
    clear_has_cmd();
    ::LinkRegEventResp* temp = cmd_.regeventresp_;
    cmd_.regeventresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_regeventresp(::LinkRegEventResp* regeventresp) {
  clear_cmd();
  if (regeventresp) {
    set_has_regeventresp();
    cmd_.regeventresp_ = regeventresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.regEventResp)
}

// .LinkUnRegEventReq unRegEventReq = 907;
inline bool LinkCmd::has_unregeventreq() const {
  return cmd_case() == kUnRegEventReq;
}
inline void LinkCmd::set_has_unregeventreq() {
  _oneof_case_[0] = kUnRegEventReq;
}
inline void LinkCmd::clear_unregeventreq() {
  if (has_unregeventreq()) {
    delete cmd_.unregeventreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkUnRegEventReq& LinkCmd::unregeventreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.unRegEventReq)
  return has_unregeventreq()
      ? *cmd_.unregeventreq_
      : ::LinkUnRegEventReq::default_instance();
}
inline ::LinkUnRegEventReq* LinkCmd::mutable_unregeventreq() {
  if (!has_unregeventreq()) {
    clear_cmd();
    set_has_unregeventreq();
    cmd_.unregeventreq_ = new ::LinkUnRegEventReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.unRegEventReq)
  return cmd_.unregeventreq_;
}
inline ::LinkUnRegEventReq* LinkCmd::release_unregeventreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.unRegEventReq)
  if (has_unregeventreq()) {
    clear_has_cmd();
    ::LinkUnRegEventReq* temp = cmd_.unregeventreq_;
    cmd_.unregeventreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_unregeventreq(::LinkUnRegEventReq* unregeventreq) {
  clear_cmd();
  if (unregeventreq) {
    set_has_unregeventreq();
    cmd_.unregeventreq_ = unregeventreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.unRegEventReq)
}

// .LinkUnRegEventResp unRegEventResp = 908;
inline bool LinkCmd::has_unregeventresp() const {
  return cmd_case() == kUnRegEventResp;
}
inline void LinkCmd::set_has_unregeventresp() {
  _oneof_case_[0] = kUnRegEventResp;
}
inline void LinkCmd::clear_unregeventresp() {
  if (has_unregeventresp()) {
    delete cmd_.unregeventresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkUnRegEventResp& LinkCmd::unregeventresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.unRegEventResp)
  return has_unregeventresp()
      ? *cmd_.unregeventresp_
      : ::LinkUnRegEventResp::default_instance();
}
inline ::LinkUnRegEventResp* LinkCmd::mutable_unregeventresp() {
  if (!has_unregeventresp()) {
    clear_cmd();
    set_has_unregeventresp();
    cmd_.unregeventresp_ = new ::LinkUnRegEventResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.unRegEventResp)
  return cmd_.unregeventresp_;
}
inline ::LinkUnRegEventResp* LinkCmd::release_unregeventresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.unRegEventResp)
  if (has_unregeventresp()) {
    clear_has_cmd();
    ::LinkUnRegEventResp* temp = cmd_.unregeventresp_;
    cmd_.unregeventresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_unregeventresp(::LinkUnRegEventResp* unregeventresp) {
  clear_cmd();
  if (unregeventresp) {
    set_has_unregeventresp();
    cmd_.unregeventresp_ = unregeventresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.unRegEventResp)
}

// .LinkEventSearchReq eventSearchReq = 909;
inline bool LinkCmd::has_eventsearchreq() const {
  return cmd_case() == kEventSearchReq;
}
inline void LinkCmd::set_has_eventsearchreq() {
  _oneof_case_[0] = kEventSearchReq;
}
inline void LinkCmd::clear_eventsearchreq() {
  if (has_eventsearchreq()) {
    delete cmd_.eventsearchreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkEventSearchReq& LinkCmd::eventsearchreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.eventSearchReq)
  return has_eventsearchreq()
      ? *cmd_.eventsearchreq_
      : ::LinkEventSearchReq::default_instance();
}
inline ::LinkEventSearchReq* LinkCmd::mutable_eventsearchreq() {
  if (!has_eventsearchreq()) {
    clear_cmd();
    set_has_eventsearchreq();
    cmd_.eventsearchreq_ = new ::LinkEventSearchReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.eventSearchReq)
  return cmd_.eventsearchreq_;
}
inline ::LinkEventSearchReq* LinkCmd::release_eventsearchreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.eventSearchReq)
  if (has_eventsearchreq()) {
    clear_has_cmd();
    ::LinkEventSearchReq* temp = cmd_.eventsearchreq_;
    cmd_.eventsearchreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_eventsearchreq(::LinkEventSearchReq* eventsearchreq) {
  clear_cmd();
  if (eventsearchreq) {
    set_has_eventsearchreq();
    cmd_.eventsearchreq_ = eventsearchreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.eventSearchReq)
}

// .LinkEventSearchResp eventSearchResp = 910;
inline bool LinkCmd::has_eventsearchresp() const {
  return cmd_case() == kEventSearchResp;
}
inline void LinkCmd::set_has_eventsearchresp() {
  _oneof_case_[0] = kEventSearchResp;
}
inline void LinkCmd::clear_eventsearchresp() {
  if (has_eventsearchresp()) {
    delete cmd_.eventsearchresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkEventSearchResp& LinkCmd::eventsearchresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.eventSearchResp)
  return has_eventsearchresp()
      ? *cmd_.eventsearchresp_
      : ::LinkEventSearchResp::default_instance();
}
inline ::LinkEventSearchResp* LinkCmd::mutable_eventsearchresp() {
  if (!has_eventsearchresp()) {
    clear_cmd();
    set_has_eventsearchresp();
    cmd_.eventsearchresp_ = new ::LinkEventSearchResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.eventSearchResp)
  return cmd_.eventsearchresp_;
}
inline ::LinkEventSearchResp* LinkCmd::release_eventsearchresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.eventSearchResp)
  if (has_eventsearchresp()) {
    clear_has_cmd();
    ::LinkEventSearchResp* temp = cmd_.eventsearchresp_;
    cmd_.eventsearchresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_eventsearchresp(::LinkEventSearchResp* eventsearchresp) {
  clear_cmd();
  if (eventsearchresp) {
    set_has_eventsearchresp();
    cmd_.eventsearchresp_ = eventsearchresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.eventSearchResp)
}

// .LinkHandleEventReq handleEventReq = 911;
inline bool LinkCmd::has_handleeventreq() const {
  return cmd_case() == kHandleEventReq;
}
inline void LinkCmd::set_has_handleeventreq() {
  _oneof_case_[0] = kHandleEventReq;
}
inline void LinkCmd::clear_handleeventreq() {
  if (has_handleeventreq()) {
    delete cmd_.handleeventreq_;
    clear_has_cmd();
  }
}
inline  const ::LinkHandleEventReq& LinkCmd::handleeventreq() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.handleEventReq)
  return has_handleeventreq()
      ? *cmd_.handleeventreq_
      : ::LinkHandleEventReq::default_instance();
}
inline ::LinkHandleEventReq* LinkCmd::mutable_handleeventreq() {
  if (!has_handleeventreq()) {
    clear_cmd();
    set_has_handleeventreq();
    cmd_.handleeventreq_ = new ::LinkHandleEventReq;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.handleEventReq)
  return cmd_.handleeventreq_;
}
inline ::LinkHandleEventReq* LinkCmd::release_handleeventreq() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.handleEventReq)
  if (has_handleeventreq()) {
    clear_has_cmd();
    ::LinkHandleEventReq* temp = cmd_.handleeventreq_;
    cmd_.handleeventreq_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_handleeventreq(::LinkHandleEventReq* handleeventreq) {
  clear_cmd();
  if (handleeventreq) {
    set_has_handleeventreq();
    cmd_.handleeventreq_ = handleeventreq;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.handleEventReq)
}

// .LinkHandleEventResp handleEventResp = 912;
inline bool LinkCmd::has_handleeventresp() const {
  return cmd_case() == kHandleEventResp;
}
inline void LinkCmd::set_has_handleeventresp() {
  _oneof_case_[0] = kHandleEventResp;
}
inline void LinkCmd::clear_handleeventresp() {
  if (has_handleeventresp()) {
    delete cmd_.handleeventresp_;
    clear_has_cmd();
  }
}
inline  const ::LinkHandleEventResp& LinkCmd::handleeventresp() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.handleEventResp)
  return has_handleeventresp()
      ? *cmd_.handleeventresp_
      : ::LinkHandleEventResp::default_instance();
}
inline ::LinkHandleEventResp* LinkCmd::mutable_handleeventresp() {
  if (!has_handleeventresp()) {
    clear_cmd();
    set_has_handleeventresp();
    cmd_.handleeventresp_ = new ::LinkHandleEventResp;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.handleEventResp)
  return cmd_.handleeventresp_;
}
inline ::LinkHandleEventResp* LinkCmd::release_handleeventresp() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.handleEventResp)
  if (has_handleeventresp()) {
    clear_has_cmd();
    ::LinkHandleEventResp* temp = cmd_.handleeventresp_;
    cmd_.handleeventresp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_handleeventresp(::LinkHandleEventResp* handleeventresp) {
  clear_cmd();
  if (handleeventresp) {
    set_has_handleeventresp();
    cmd_.handleeventresp_ = handleeventresp;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.handleEventResp)
}

// .LinkCamAddNotify camAddNotify = 10001;
inline bool LinkCmd::has_camaddnotify() const {
  return cmd_case() == kCamAddNotify;
}
inline void LinkCmd::set_has_camaddnotify() {
  _oneof_case_[0] = kCamAddNotify;
}
inline void LinkCmd::clear_camaddnotify() {
  if (has_camaddnotify()) {
    delete cmd_.camaddnotify_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamAddNotify& LinkCmd::camaddnotify() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camAddNotify)
  return has_camaddnotify()
      ? *cmd_.camaddnotify_
      : ::LinkCamAddNotify::default_instance();
}
inline ::LinkCamAddNotify* LinkCmd::mutable_camaddnotify() {
  if (!has_camaddnotify()) {
    clear_cmd();
    set_has_camaddnotify();
    cmd_.camaddnotify_ = new ::LinkCamAddNotify;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camAddNotify)
  return cmd_.camaddnotify_;
}
inline ::LinkCamAddNotify* LinkCmd::release_camaddnotify() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camAddNotify)
  if (has_camaddnotify()) {
    clear_has_cmd();
    ::LinkCamAddNotify* temp = cmd_.camaddnotify_;
    cmd_.camaddnotify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camaddnotify(::LinkCamAddNotify* camaddnotify) {
  clear_cmd();
  if (camaddnotify) {
    set_has_camaddnotify();
    cmd_.camaddnotify_ = camaddnotify;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camAddNotify)
}

// .LinkCamIdNotify camIdNotify = 10002;
inline bool LinkCmd::has_camidnotify() const {
  return cmd_case() == kCamIdNotify;
}
inline void LinkCmd::set_has_camidnotify() {
  _oneof_case_[0] = kCamIdNotify;
}
inline void LinkCmd::clear_camidnotify() {
  if (has_camidnotify()) {
    delete cmd_.camidnotify_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamIdNotify& LinkCmd::camidnotify() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camIdNotify)
  return has_camidnotify()
      ? *cmd_.camidnotify_
      : ::LinkCamIdNotify::default_instance();
}
inline ::LinkCamIdNotify* LinkCmd::mutable_camidnotify() {
  if (!has_camidnotify()) {
    clear_cmd();
    set_has_camidnotify();
    cmd_.camidnotify_ = new ::LinkCamIdNotify;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camIdNotify)
  return cmd_.camidnotify_;
}
inline ::LinkCamIdNotify* LinkCmd::release_camidnotify() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camIdNotify)
  if (has_camidnotify()) {
    clear_has_cmd();
    ::LinkCamIdNotify* temp = cmd_.camidnotify_;
    cmd_.camidnotify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camidnotify(::LinkCamIdNotify* camidnotify) {
  clear_cmd();
  if (camidnotify) {
    set_has_camidnotify();
    cmd_.camidnotify_ = camidnotify;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camIdNotify)
}

// .LinkCamSearchedNotify camSearchedNotify = 10003;
inline bool LinkCmd::has_camsearchednotify() const {
  return cmd_case() == kCamSearchedNotify;
}
inline void LinkCmd::set_has_camsearchednotify() {
  _oneof_case_[0] = kCamSearchedNotify;
}
inline void LinkCmd::clear_camsearchednotify() {
  if (has_camsearchednotify()) {
    delete cmd_.camsearchednotify_;
    clear_has_cmd();
  }
}
inline  const ::LinkCamSearchedNotify& LinkCmd::camsearchednotify() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.camSearchedNotify)
  return has_camsearchednotify()
      ? *cmd_.camsearchednotify_
      : ::LinkCamSearchedNotify::default_instance();
}
inline ::LinkCamSearchedNotify* LinkCmd::mutable_camsearchednotify() {
  if (!has_camsearchednotify()) {
    clear_cmd();
    set_has_camsearchednotify();
    cmd_.camsearchednotify_ = new ::LinkCamSearchedNotify;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.camSearchedNotify)
  return cmd_.camsearchednotify_;
}
inline ::LinkCamSearchedNotify* LinkCmd::release_camsearchednotify() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.camSearchedNotify)
  if (has_camsearchednotify()) {
    clear_has_cmd();
    ::LinkCamSearchedNotify* temp = cmd_.camsearchednotify_;
    cmd_.camsearchednotify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_camsearchednotify(::LinkCamSearchedNotify* camsearchednotify) {
  clear_cmd();
  if (camsearchednotify) {
    set_has_camsearchednotify();
    cmd_.camsearchednotify_ = camsearchednotify;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.camSearchedNotify)
}

// .LinkEventNotify evnetNotify = 10004;
inline bool LinkCmd::has_evnetnotify() const {
  return cmd_case() == kEvnetNotify;
}
inline void LinkCmd::set_has_evnetnotify() {
  _oneof_case_[0] = kEvnetNotify;
}
inline void LinkCmd::clear_evnetnotify() {
  if (has_evnetnotify()) {
    delete cmd_.evnetnotify_;
    clear_has_cmd();
  }
}
inline  const ::LinkEventNotify& LinkCmd::evnetnotify() const {
  // @@protoc_insertion_point(field_get:Link.LinkCmd.evnetNotify)
  return has_evnetnotify()
      ? *cmd_.evnetnotify_
      : ::LinkEventNotify::default_instance();
}
inline ::LinkEventNotify* LinkCmd::mutable_evnetnotify() {
  if (!has_evnetnotify()) {
    clear_cmd();
    set_has_evnetnotify();
    cmd_.evnetnotify_ = new ::LinkEventNotify;
  }
  // @@protoc_insertion_point(field_mutable:Link.LinkCmd.evnetNotify)
  return cmd_.evnetnotify_;
}
inline ::LinkEventNotify* LinkCmd::release_evnetnotify() {
  // @@protoc_insertion_point(field_release:Link.LinkCmd.evnetNotify)
  if (has_evnetnotify()) {
    clear_has_cmd();
    ::LinkEventNotify* temp = cmd_.evnetnotify_;
    cmd_.evnetnotify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LinkCmd::set_allocated_evnetnotify(::LinkEventNotify* evnetnotify) {
  clear_cmd();
  if (evnetnotify) {
    set_has_evnetnotify();
    cmd_.evnetnotify_ = evnetnotify;
  }
  // @@protoc_insertion_point(field_set_allocated:Link.LinkCmd.evnetNotify)
}

inline bool LinkCmd::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void LinkCmd::clear_has_cmd() {
  _oneof_case_[0] = CMD_NOT_SET;
}
inline LinkCmd::CmdCase LinkCmd::cmd_case() const {
  return LinkCmd::CmdCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Link

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Link::LinkCmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Link::LinkCmdType>() {
  return ::Link::LinkCmdType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_linkproto_2eproto__INCLUDED
