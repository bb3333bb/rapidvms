// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linksystem.proto

#ifndef PROTOBUF_linksystem_2eproto__INCLUDED
#define PROTOBUF_linksystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vidconf.pb.h"
// @@protoc_insertion_point(includes)
class LinkAddCamReq;
class LinkAddCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddCamReqDefaultTypeInternal _LinkAddCamReq_default_instance_;
class LinkAddCamResp;
class LinkAddCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddCamRespDefaultTypeInternal _LinkAddCamResp_default_instance_;
class LinkAddDiskReq;
class LinkAddDiskReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddDiskReqDefaultTypeInternal _LinkAddDiskReq_default_instance_;
class LinkAddDiskResp;
class LinkAddDiskRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddDiskRespDefaultTypeInternal _LinkAddDiskResp_default_instance_;
class LinkAddUserReq;
class LinkAddUserReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddUserReqDefaultTypeInternal _LinkAddUserReq_default_instance_;
class LinkAddUserResp;
class LinkAddUserRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkAddUserRespDefaultTypeInternal _LinkAddUserResp_default_instance_;
class LinkCamAddNotify;
class LinkCamAddNotifyDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamAddNotifyDefaultTypeInternal _LinkCamAddNotify_default_instance_;
class LinkCamIdNotify;
class LinkCamIdNotifyDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamIdNotifyDefaultTypeInternal _LinkCamIdNotify_default_instance_;
class LinkCamReq;
class LinkCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamReqDefaultTypeInternal _LinkCamReq_default_instance_;
class LinkCamResp;
class LinkCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamRespDefaultTypeInternal _LinkCamResp_default_instance_;
class LinkCamSearchStartReq;
class LinkCamSearchStartReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchStartReqDefaultTypeInternal _LinkCamSearchStartReq_default_instance_;
class LinkCamSearchStartResp;
class LinkCamSearchStartRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchStartRespDefaultTypeInternal _LinkCamSearchStartResp_default_instance_;
class LinkCamSearchStopReq;
class LinkCamSearchStopReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchStopReqDefaultTypeInternal _LinkCamSearchStopReq_default_instance_;
class LinkCamSearchStopResp;
class LinkCamSearchStopRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchStopRespDefaultTypeInternal _LinkCamSearchStopResp_default_instance_;
class LinkCamSearchedNotify;
class LinkCamSearchedNotifyDefaultTypeInternal;
VE_LIBRARY_API extern LinkCamSearchedNotifyDefaultTypeInternal _LinkCamSearchedNotify_default_instance_;
class LinkConfLicReq;
class LinkConfLicReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkConfLicReqDefaultTypeInternal _LinkConfLicReq_default_instance_;
class LinkConfLicResp;
class LinkConfLicRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkConfLicRespDefaultTypeInternal _LinkConfLicResp_default_instance_;
class LinkDelCamReq;
class LinkDelCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelCamReqDefaultTypeInternal _LinkDelCamReq_default_instance_;
class LinkDelCamResp;
class LinkDelCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelCamRespDefaultTypeInternal _LinkDelCamResp_default_instance_;
class LinkDelDiskReq;
class LinkDelDiskReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelDiskReqDefaultTypeInternal _LinkDelDiskReq_default_instance_;
class LinkDelDiskResp;
class LinkDelDiskRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkDelDiskRespDefaultTypeInternal _LinkDelDiskResp_default_instance_;
class LinkEventNotify;
class LinkEventNotifyDefaultTypeInternal;
VE_LIBRARY_API extern LinkEventNotifyDefaultTypeInternal _LinkEventNotify_default_instance_;
class LinkEventSearchReq;
class LinkEventSearchReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkEventSearchReqDefaultTypeInternal _LinkEventSearchReq_default_instance_;
class LinkEventSearchResp;
class LinkEventSearchRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkEventSearchRespDefaultTypeInternal _LinkEventSearchResp_default_instance_;
class LinkGetLicReq;
class LinkGetLicReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetLicReqDefaultTypeInternal _LinkGetLicReq_default_instance_;
class LinkGetLicResp;
class LinkGetLicRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetLicRespDefaultTypeInternal _LinkGetLicResp_default_instance_;
class LinkGetStreamListReq;
class LinkGetStreamListReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetStreamListReqDefaultTypeInternal _LinkGetStreamListReq_default_instance_;
class LinkGetStreamListResp;
class LinkGetStreamListRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetStreamListRespDefaultTypeInternal _LinkGetStreamListResp_default_instance_;
class LinkGetVerReq;
class LinkGetVerReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetVerReqDefaultTypeInternal _LinkGetVerReq_default_instance_;
class LinkGetVerResp;
class LinkGetVerRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkGetVerRespDefaultTypeInternal _LinkGetVerResp_default_instance_;
class LinkHandleEventReq;
class LinkHandleEventReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkHandleEventReqDefaultTypeInternal _LinkHandleEventReq_default_instance_;
class LinkHandleEventResp;
class LinkHandleEventRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkHandleEventRespDefaultTypeInternal _LinkHandleEventResp_default_instance_;
class LinkHasRecordItem;
class LinkHasRecordItemDefaultTypeInternal;
VE_LIBRARY_API extern LinkHasRecordItemDefaultTypeInternal _LinkHasRecordItem_default_instance_;
class LinkHasRecordList;
class LinkHasRecordListDefaultTypeInternal;
VE_LIBRARY_API extern LinkHasRecordListDefaultTypeInternal _LinkHasRecordList_default_instance_;
class LinkHasRecordReq;
class LinkHasRecordReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkHasRecordReqDefaultTypeInternal _LinkHasRecordReq_default_instance_;
class LinkHasRecordResp;
class LinkHasRecordRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkHasRecordRespDefaultTypeInternal _LinkHasRecordResp_default_instance_;
class LinkKeepaliveReq;
class LinkKeepaliveReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkKeepaliveReqDefaultTypeInternal _LinkKeepaliveReq_default_instance_;
class LinkKeepaliveResp;
class LinkKeepaliveRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkKeepaliveRespDefaultTypeInternal _LinkKeepaliveResp_default_instance_;
class LinkListCamReq;
class LinkListCamReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkListCamReqDefaultTypeInternal _LinkListCamReq_default_instance_;
class LinkListCamResp;
class LinkListCamRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkListCamRespDefaultTypeInternal _LinkListCamResp_default_instance_;
class LinkLoginReq;
class LinkLoginReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkLoginReqDefaultTypeInternal _LinkLoginReq_default_instance_;
class LinkLoginResp;
class LinkLoginRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkLoginRespDefaultTypeInternal _LinkLoginResp_default_instance_;
class LinkPlayBackCmd;
class LinkPlayBackCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlayBackCmdDefaultTypeInternal _LinkPlayBackCmd_default_instance_;
class LinkPlayPauseCmd;
class LinkPlayPauseCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlayPauseCmdDefaultTypeInternal _LinkPlayPauseCmd_default_instance_;
class LinkPlayResumeCmd;
class LinkPlayResumeCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlayResumeCmdDefaultTypeInternal _LinkPlayResumeCmd_default_instance_;
class LinkPlaySeekCmd;
class LinkPlaySeekCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlaySeekCmdDefaultTypeInternal _LinkPlaySeekCmd_default_instance_;
class LinkPlayStopCmd;
class LinkPlayStopCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPlayStopCmdDefaultTypeInternal _LinkPlayStopCmd_default_instance_;
class LinkPtzCmd;
class LinkPtzCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkPtzCmdDefaultTypeInternal _LinkPtzCmd_default_instance_;
class LinkRecordItem;
class LinkRecordItemDefaultTypeInternal;
VE_LIBRARY_API extern LinkRecordItemDefaultTypeInternal _LinkRecordItem_default_instance_;
class LinkRecordList;
class LinkRecordListDefaultTypeInternal;
VE_LIBRARY_API extern LinkRecordListDefaultTypeInternal _LinkRecordList_default_instance_;
class LinkRegEventReq;
class LinkRegEventReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkRegEventReqDefaultTypeInternal _LinkRegEventReq_default_instance_;
class LinkRegEventResp;
class LinkRegEventRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkRegEventRespDefaultTypeInternal _LinkRegEventResp_default_instance_;
class LinkRegNotifyReq;
class LinkRegNotifyReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkRegNotifyReqDefaultTypeInternal _LinkRegNotifyReq_default_instance_;
class LinkRegNotifyResp;
class LinkRegNotifyRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkRegNotifyRespDefaultTypeInternal _LinkRegNotifyResp_default_instance_;
class LinkSearchRecordReq;
class LinkSearchRecordReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkSearchRecordReqDefaultTypeInternal _LinkSearchRecordReq_default_instance_;
class LinkSearchRecordResp;
class LinkSearchRecordRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkSearchRecordRespDefaultTypeInternal _LinkSearchRecordResp_default_instance_;
class LinkSetCamSchedReq;
class LinkSetCamSchedReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkSetCamSchedReqDefaultTypeInternal _LinkSetCamSchedReq_default_instance_;
class LinkSetCamSchedResp;
class LinkSetCamSchedRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkSetCamSchedRespDefaultTypeInternal _LinkSetCamSchedResp_default_instance_;
class LinkStartLiveCmd;
class LinkStartLiveCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkStartLiveCmdDefaultTypeInternal _LinkStartLiveCmd_default_instance_;
class LinkStopLiveCmd;
class LinkStopLiveCmdDefaultTypeInternal;
VE_LIBRARY_API extern LinkStopLiveCmdDefaultTypeInternal _LinkStopLiveCmd_default_instance_;
class LinkSysVidDiskListReq;
class LinkSysVidDiskListReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkSysVidDiskListReqDefaultTypeInternal _LinkSysVidDiskListReq_default_instance_;
class LinkSysVidDiskListResp;
class LinkSysVidDiskListRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkSysVidDiskListRespDefaultTypeInternal _LinkSysVidDiskListResp_default_instance_;
class LinkUnRegEventReq;
class LinkUnRegEventReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkUnRegEventReqDefaultTypeInternal _LinkUnRegEventReq_default_instance_;
class LinkUnRegEventResp;
class LinkUnRegEventRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkUnRegEventRespDefaultTypeInternal _LinkUnRegEventResp_default_instance_;
class LinkUpdateDiskLimitReq;
class LinkUpdateDiskLimitReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkUpdateDiskLimitReqDefaultTypeInternal _LinkUpdateDiskLimitReq_default_instance_;
class LinkUpdateDiskLimitResp;
class LinkUpdateDiskLimitRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkUpdateDiskLimitRespDefaultTypeInternal _LinkUpdateDiskLimitResp_default_instance_;
class LinkVidDiskListReq;
class LinkVidDiskListReqDefaultTypeInternal;
VE_LIBRARY_API extern LinkVidDiskListReqDefaultTypeInternal _LinkVidDiskListReq_default_instance_;
class LinkVidDiskListResp;
class LinkVidDiskListRespDefaultTypeInternal;
VE_LIBRARY_API extern LinkVidDiskListRespDefaultTypeInternal _LinkVidDiskListResp_default_instance_;
class VidBlob;
class VidBlobDefaultTypeInternal;
VE_LIBRARY_API extern VidBlobDefaultTypeInternal _VidBlob_default_instance_;
class VidBlobList;
class VidBlobListDefaultTypeInternal;
VE_LIBRARY_API extern VidBlobListDefaultTypeInternal _VidBlobList_default_instance_;
class VidCamera;
class VidCameraDefaultTypeInternal;
VE_LIBRARY_API extern VidCameraDefaultTypeInternal _VidCamera_default_instance_;
class VidCameraId;
class VidCameraIdDefaultTypeInternal;
VE_LIBRARY_API extern VidCameraIdDefaultTypeInternal _VidCameraId_default_instance_;
class VidCameraList;
class VidCameraListDefaultTypeInternal;
VE_LIBRARY_API extern VidCameraListDefaultTypeInternal _VidCameraList_default_instance_;
class VidClientConf;
class VidClientConfDefaultTypeInternal;
VE_LIBRARY_API extern VidClientConfDefaultTypeInternal _VidClientConf_default_instance_;
class VidDisk;
class VidDiskDefaultTypeInternal;
VE_LIBRARY_API extern VidDiskDefaultTypeInternal _VidDisk_default_instance_;
class VidDiskList;
class VidDiskListDefaultTypeInternal;
VE_LIBRARY_API extern VidDiskListDefaultTypeInternal _VidDiskList_default_instance_;
class VidEmap;
class VidEmapDefaultTypeInternal;
VE_LIBRARY_API extern VidEmapDefaultTypeInternal _VidEmap_default_instance_;
class VidEmapCamera;
class VidEmapCameraDefaultTypeInternal;
VE_LIBRARY_API extern VidEmapCameraDefaultTypeInternal _VidEmapCamera_default_instance_;
class VidEmapList;
class VidEmapListDefaultTypeInternal;
VE_LIBRARY_API extern VidEmapListDefaultTypeInternal _VidEmapList_default_instance_;
class VidEvent;
class VidEventDefaultTypeInternal;
VE_LIBRARY_API extern VidEventDefaultTypeInternal _VidEvent_default_instance_;
class VidEventDBConf;
class VidEventDBConfDefaultTypeInternal;
VE_LIBRARY_API extern VidEventDBConfDefaultTypeInternal _VidEventDBConf_default_instance_;
class VidGroup;
class VidGroupDefaultTypeInternal;
VE_LIBRARY_API extern VidGroupDefaultTypeInternal _VidGroup_default_instance_;
class VidGroupList;
class VidGroupListDefaultTypeInternal;
VE_LIBRARY_API extern VidGroupListDefaultTypeInternal _VidGroupList_default_instance_;
class VidHDFSConf;
class VidHDFSConfDefaultTypeInternal;
VE_LIBRARY_API extern VidHDFSConfDefaultTypeInternal _VidHDFSConf_default_instance_;
class VidStor;
class VidStorDefaultTypeInternal;
VE_LIBRARY_API extern VidStorDefaultTypeInternal _VidStor_default_instance_;
class VidStorList;
class VidStorListDefaultTypeInternal;
VE_LIBRARY_API extern VidStorListDefaultTypeInternal _VidStorList_default_instance_;
class VidStorServerConf;
class VidStorServerConfDefaultTypeInternal;
VE_LIBRARY_API extern VidStorServerConfDefaultTypeInternal _VidStorServerConf_default_instance_;
class VidStream;
class VidStreamDefaultTypeInternal;
VE_LIBRARY_API extern VidStreamDefaultTypeInternal _VidStream_default_instance_;
class VidStreamList;
class VidStreamListDefaultTypeInternal;
VE_LIBRARY_API extern VidStreamListDefaultTypeInternal _VidStreamList_default_instance_;
class VidTour;
class VidTourDefaultTypeInternal;
VE_LIBRARY_API extern VidTourDefaultTypeInternal _VidTour_default_instance_;
class VidTourList;
class VidTourListDefaultTypeInternal;
VE_LIBRARY_API extern VidTourListDefaultTypeInternal _VidTourList_default_instance_;
class VidUser;
class VidUserDefaultTypeInternal;
VE_LIBRARY_API extern VidUserDefaultTypeInternal _VidUser_default_instance_;
class VidUserList;
class VidUserListDefaultTypeInternal;
VE_LIBRARY_API extern VidUserListDefaultTypeInternal _VidUserList_default_instance_;
class VidView;
class VidViewDefaultTypeInternal;
VE_LIBRARY_API extern VidViewDefaultTypeInternal _VidView_default_instance_;
class VidViewList;
class VidViewListDefaultTypeInternal;
VE_LIBRARY_API extern VidViewListDefaultTypeInternal _VidViewList_default_instance_;
class VidViewWindow;
class VidViewWindowDefaultTypeInternal;
VE_LIBRARY_API extern VidViewWindowDefaultTypeInternal _VidViewWindow_default_instance_;

namespace protobuf_linksystem_2eproto {
// Internal implementation detail -- do not call these.
struct VE_LIBRARY_API TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void VE_LIBRARY_API AddDescriptors();
void VE_LIBRARY_API InitDefaults();
}  // namespace protobuf_linksystem_2eproto

// ===================================================================

class VE_LIBRARY_API LinkLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkLoginReq) */ {
 public:
  LinkLoginReq();
  virtual ~LinkLoginReq();

  LinkLoginReq(const LinkLoginReq& from);

  inline LinkLoginReq& operator=(const LinkLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkLoginReq& default_instance();

  static inline const LinkLoginReq* internal_default_instance() {
    return reinterpret_cast<const LinkLoginReq*>(
               &_LinkLoginReq_default_instance_);
  }

  void Swap(LinkLoginReq* other);

  // implements Message ----------------------------------------------

  inline LinkLoginReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkLoginReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkLoginReq& from);
  void MergeFrom(const LinkLoginReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strUserName = 1;
  void clear_strusername();
  static const int kStrUserNameFieldNumber = 1;
  const ::std::string& strusername() const;
  void set_strusername(const ::std::string& value);
  #if LANG_CXX11
  void set_strusername(::std::string&& value);
  #endif
  void set_strusername(const char* value);
  void set_strusername(const char* value, size_t size);
  ::std::string* mutable_strusername();
  ::std::string* release_strusername();
  void set_allocated_strusername(::std::string* strusername);

  // string strPasswd = 2;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 2;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_strpasswd(::std::string&& value);
  #endif
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // @@protoc_insertion_point(class_scope:LinkLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strusername_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkLoginResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkLoginResp) */ {
 public:
  LinkLoginResp();
  virtual ~LinkLoginResp();

  LinkLoginResp(const LinkLoginResp& from);

  inline LinkLoginResp& operator=(const LinkLoginResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkLoginResp& default_instance();

  static inline const LinkLoginResp* internal_default_instance() {
    return reinterpret_cast<const LinkLoginResp*>(
               &_LinkLoginResp_default_instance_);
  }

  void Swap(LinkLoginResp* other);

  // implements Message ----------------------------------------------

  inline LinkLoginResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkLoginResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkLoginResp& from);
  void MergeFrom(const LinkLoginResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkLoginResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strNonce = 1;
  void clear_strnonce();
  static const int kStrNonceFieldNumber = 1;
  const ::std::string& strnonce() const;
  void set_strnonce(const ::std::string& value);
  #if LANG_CXX11
  void set_strnonce(::std::string&& value);
  #endif
  void set_strnonce(const char* value);
  void set_strnonce(const char* value, size_t size);
  ::std::string* mutable_strnonce();
  ::std::string* release_strnonce();
  void set_allocated_strnonce(::std::string* strnonce);

  // bool bRetNonce = 2;
  void clear_bretnonce();
  static const int kBRetNonceFieldNumber = 2;
  bool bretnonce() const;
  void set_bretnonce(bool value);

  // bool bRet = 3;
  void clear_bret();
  static const int kBRetFieldNumber = 3;
  bool bret() const;
  void set_bret(bool value);

  // @@protoc_insertion_point(class_scope:LinkLoginResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strnonce_;
  bool bretnonce_;
  bool bret_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkKeepaliveReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkKeepaliveReq) */ {
 public:
  LinkKeepaliveReq();
  virtual ~LinkKeepaliveReq();

  LinkKeepaliveReq(const LinkKeepaliveReq& from);

  inline LinkKeepaliveReq& operator=(const LinkKeepaliveReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkKeepaliveReq& default_instance();

  static inline const LinkKeepaliveReq* internal_default_instance() {
    return reinterpret_cast<const LinkKeepaliveReq*>(
               &_LinkKeepaliveReq_default_instance_);
  }

  void Swap(LinkKeepaliveReq* other);

  // implements Message ----------------------------------------------

  inline LinkKeepaliveReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkKeepaliveReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkKeepaliveReq& from);
  void MergeFrom(const LinkKeepaliveReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkKeepaliveReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 nKeepalive = 1;
  void clear_nkeepalive();
  static const int kNKeepaliveFieldNumber = 1;
  ::google::protobuf::int32 nkeepalive() const;
  void set_nkeepalive(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkKeepaliveReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 nkeepalive_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkKeepaliveResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkKeepaliveResp) */ {
 public:
  LinkKeepaliveResp();
  virtual ~LinkKeepaliveResp();

  LinkKeepaliveResp(const LinkKeepaliveResp& from);

  inline LinkKeepaliveResp& operator=(const LinkKeepaliveResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkKeepaliveResp& default_instance();

  static inline const LinkKeepaliveResp* internal_default_instance() {
    return reinterpret_cast<const LinkKeepaliveResp*>(
               &_LinkKeepaliveResp_default_instance_);
  }

  void Swap(LinkKeepaliveResp* other);

  // implements Message ----------------------------------------------

  inline LinkKeepaliveResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkKeepaliveResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkKeepaliveResp& from);
  void MergeFrom(const LinkKeepaliveResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkKeepaliveResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 nKeepalive = 1;
  void clear_nkeepalive();
  static const int kNKeepaliveFieldNumber = 1;
  ::google::protobuf::int32 nkeepalive() const;
  void set_nkeepalive(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkKeepaliveResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 nkeepalive_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkRegNotifyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkRegNotifyReq) */ {
 public:
  LinkRegNotifyReq();
  virtual ~LinkRegNotifyReq();

  LinkRegNotifyReq(const LinkRegNotifyReq& from);

  inline LinkRegNotifyReq& operator=(const LinkRegNotifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkRegNotifyReq& default_instance();

  static inline const LinkRegNotifyReq* internal_default_instance() {
    return reinterpret_cast<const LinkRegNotifyReq*>(
               &_LinkRegNotifyReq_default_instance_);
  }

  void Swap(LinkRegNotifyReq* other);

  // implements Message ----------------------------------------------

  inline LinkRegNotifyReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkRegNotifyReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkRegNotifyReq& from);
  void MergeFrom(const LinkRegNotifyReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkRegNotifyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strFake = 1;
  void clear_strfake();
  static const int kStrFakeFieldNumber = 1;
  const ::std::string& strfake() const;
  void set_strfake(const ::std::string& value);
  #if LANG_CXX11
  void set_strfake(::std::string&& value);
  #endif
  void set_strfake(const char* value);
  void set_strfake(const char* value, size_t size);
  ::std::string* mutable_strfake();
  ::std::string* release_strfake();
  void set_allocated_strfake(::std::string* strfake);

  // @@protoc_insertion_point(class_scope:LinkRegNotifyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strfake_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkRegNotifyResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkRegNotifyResp) */ {
 public:
  LinkRegNotifyResp();
  virtual ~LinkRegNotifyResp();

  LinkRegNotifyResp(const LinkRegNotifyResp& from);

  inline LinkRegNotifyResp& operator=(const LinkRegNotifyResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkRegNotifyResp& default_instance();

  static inline const LinkRegNotifyResp* internal_default_instance() {
    return reinterpret_cast<const LinkRegNotifyResp*>(
               &_LinkRegNotifyResp_default_instance_);
  }

  void Swap(LinkRegNotifyResp* other);

  // implements Message ----------------------------------------------

  inline LinkRegNotifyResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkRegNotifyResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkRegNotifyResp& from);
  void MergeFrom(const LinkRegNotifyResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkRegNotifyResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkRegNotifyResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkListCamReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkListCamReq) */ {
 public:
  LinkListCamReq();
  virtual ~LinkListCamReq();

  LinkListCamReq(const LinkListCamReq& from);

  inline LinkListCamReq& operator=(const LinkListCamReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkListCamReq& default_instance();

  static inline const LinkListCamReq* internal_default_instance() {
    return reinterpret_cast<const LinkListCamReq*>(
               &_LinkListCamReq_default_instance_);
  }

  void Swap(LinkListCamReq* other);

  // implements Message ----------------------------------------------

  inline LinkListCamReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkListCamReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkListCamReq& from);
  void MergeFrom(const LinkListCamReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkListCamReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bAll = 1;
  void clear_ball();
  static const int kBAllFieldNumber = 1;
  bool ball() const;
  void set_ball(bool value);

  // @@protoc_insertion_point(class_scope:LinkListCamReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ball_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkListCamResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkListCamResp) */ {
 public:
  LinkListCamResp();
  virtual ~LinkListCamResp();

  LinkListCamResp(const LinkListCamResp& from);

  inline LinkListCamResp& operator=(const LinkListCamResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkListCamResp& default_instance();

  static inline const LinkListCamResp* internal_default_instance() {
    return reinterpret_cast<const LinkListCamResp*>(
               &_LinkListCamResp_default_instance_);
  }

  void Swap(LinkListCamResp* other);

  // implements Message ----------------------------------------------

  inline LinkListCamResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkListCamResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkListCamResp& from);
  void MergeFrom(const LinkListCamResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkListCamResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidCameraList cList = 1;
  bool has_clist() const;
  void clear_clist();
  static const int kCListFieldNumber = 1;
  const ::VidCameraList& clist() const;
  ::VidCameraList* mutable_clist();
  ::VidCameraList* release_clist();
  void set_allocated_clist(::VidCameraList* clist);

  // @@protoc_insertion_point(class_scope:LinkListCamResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidCameraList* clist_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkCamReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkCamReq) */ {
 public:
  LinkCamReq();
  virtual ~LinkCamReq();

  LinkCamReq(const LinkCamReq& from);

  inline LinkCamReq& operator=(const LinkCamReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCamReq& default_instance();

  static inline const LinkCamReq* internal_default_instance() {
    return reinterpret_cast<const LinkCamReq*>(
               &_LinkCamReq_default_instance_);
  }

  void Swap(LinkCamReq* other);

  // implements Message ----------------------------------------------

  inline LinkCamReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCamReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCamReq& from);
  void MergeFrom(const LinkCamReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCamReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkCamReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkCamResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkCamResp) */ {
 public:
  LinkCamResp();
  virtual ~LinkCamResp();

  LinkCamResp(const LinkCamResp& from);

  inline LinkCamResp& operator=(const LinkCamResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCamResp& default_instance();

  static inline const LinkCamResp* internal_default_instance() {
    return reinterpret_cast<const LinkCamResp*>(
               &_LinkCamResp_default_instance_);
  }

  void Swap(LinkCamResp* other);

  // implements Message ----------------------------------------------

  inline LinkCamResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCamResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCamResp& from);
  void MergeFrom(const LinkCamResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCamResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidCamera cCam = 1;
  bool has_ccam() const;
  void clear_ccam();
  static const int kCCamFieldNumber = 1;
  const ::VidCamera& ccam() const;
  ::VidCamera* mutable_ccam();
  ::VidCamera* release_ccam();
  void set_allocated_ccam(::VidCamera* ccam);

  // @@protoc_insertion_point(class_scope:LinkCamResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidCamera* ccam_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkAddCamReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkAddCamReq) */ {
 public:
  LinkAddCamReq();
  virtual ~LinkAddCamReq();

  LinkAddCamReq(const LinkAddCamReq& from);

  inline LinkAddCamReq& operator=(const LinkAddCamReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkAddCamReq& default_instance();

  static inline const LinkAddCamReq* internal_default_instance() {
    return reinterpret_cast<const LinkAddCamReq*>(
               &_LinkAddCamReq_default_instance_);
  }

  void Swap(LinkAddCamReq* other);

  // implements Message ----------------------------------------------

  inline LinkAddCamReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkAddCamReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkAddCamReq& from);
  void MergeFrom(const LinkAddCamReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkAddCamReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidCamera cCam = 1;
  bool has_ccam() const;
  void clear_ccam();
  static const int kCCamFieldNumber = 1;
  const ::VidCamera& ccam() const;
  ::VidCamera* mutable_ccam();
  ::VidCamera* release_ccam();
  void set_allocated_ccam(::VidCamera* ccam);

  // @@protoc_insertion_point(class_scope:LinkAddCamReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidCamera* ccam_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkAddCamResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkAddCamResp) */ {
 public:
  LinkAddCamResp();
  virtual ~LinkAddCamResp();

  LinkAddCamResp(const LinkAddCamResp& from);

  inline LinkAddCamResp& operator=(const LinkAddCamResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkAddCamResp& default_instance();

  static inline const LinkAddCamResp* internal_default_instance() {
    return reinterpret_cast<const LinkAddCamResp*>(
               &_LinkAddCamResp_default_instance_);
  }

  void Swap(LinkAddCamResp* other);

  // implements Message ----------------------------------------------

  inline LinkAddCamResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkAddCamResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkAddCamResp& from);
  void MergeFrom(const LinkAddCamResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkAddCamResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkAddCamResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkDelCamReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkDelCamReq) */ {
 public:
  LinkDelCamReq();
  virtual ~LinkDelCamReq();

  LinkDelCamReq(const LinkDelCamReq& from);

  inline LinkDelCamReq& operator=(const LinkDelCamReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkDelCamReq& default_instance();

  static inline const LinkDelCamReq* internal_default_instance() {
    return reinterpret_cast<const LinkDelCamReq*>(
               &_LinkDelCamReq_default_instance_);
  }

  void Swap(LinkDelCamReq* other);

  // implements Message ----------------------------------------------

  inline LinkDelCamReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkDelCamReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkDelCamReq& from);
  void MergeFrom(const LinkDelCamReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkDelCamReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkDelCamReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkDelCamResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkDelCamResp) */ {
 public:
  LinkDelCamResp();
  virtual ~LinkDelCamResp();

  LinkDelCamResp(const LinkDelCamResp& from);

  inline LinkDelCamResp& operator=(const LinkDelCamResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkDelCamResp& default_instance();

  static inline const LinkDelCamResp* internal_default_instance() {
    return reinterpret_cast<const LinkDelCamResp*>(
               &_LinkDelCamResp_default_instance_);
  }

  void Swap(LinkDelCamResp* other);

  // implements Message ----------------------------------------------

  inline LinkDelCamResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkDelCamResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkDelCamResp& from);
  void MergeFrom(const LinkDelCamResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkDelCamResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkDelCamResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkSetCamSchedReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkSetCamSchedReq) */ {
 public:
  LinkSetCamSchedReq();
  virtual ~LinkSetCamSchedReq();

  LinkSetCamSchedReq(const LinkSetCamSchedReq& from);

  inline LinkSetCamSchedReq& operator=(const LinkSetCamSchedReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkSetCamSchedReq& default_instance();

  static inline const LinkSetCamSchedReq* internal_default_instance() {
    return reinterpret_cast<const LinkSetCamSchedReq*>(
               &_LinkSetCamSchedReq_default_instance_);
  }

  void Swap(LinkSetCamSchedReq* other);

  // implements Message ----------------------------------------------

  inline LinkSetCamSchedReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkSetCamSchedReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkSetCamSchedReq& from);
  void MergeFrom(const LinkSetCamSchedReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkSetCamSchedReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidCamera cCam = 1;
  bool has_ccam() const;
  void clear_ccam();
  static const int kCCamFieldNumber = 1;
  const ::VidCamera& ccam() const;
  ::VidCamera* mutable_ccam();
  ::VidCamera* release_ccam();
  void set_allocated_ccam(::VidCamera* ccam);

  // @@protoc_insertion_point(class_scope:LinkSetCamSchedReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidCamera* ccam_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkSetCamSchedResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkSetCamSchedResp) */ {
 public:
  LinkSetCamSchedResp();
  virtual ~LinkSetCamSchedResp();

  LinkSetCamSchedResp(const LinkSetCamSchedResp& from);

  inline LinkSetCamSchedResp& operator=(const LinkSetCamSchedResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkSetCamSchedResp& default_instance();

  static inline const LinkSetCamSchedResp* internal_default_instance() {
    return reinterpret_cast<const LinkSetCamSchedResp*>(
               &_LinkSetCamSchedResp_default_instance_);
  }

  void Swap(LinkSetCamSchedResp* other);

  // implements Message ----------------------------------------------

  inline LinkSetCamSchedResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkSetCamSchedResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkSetCamSchedResp& from);
  void MergeFrom(const LinkSetCamSchedResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkSetCamSchedResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkSetCamSchedResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkGetStreamListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkGetStreamListReq) */ {
 public:
  LinkGetStreamListReq();
  virtual ~LinkGetStreamListReq();

  LinkGetStreamListReq(const LinkGetStreamListReq& from);

  inline LinkGetStreamListReq& operator=(const LinkGetStreamListReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkGetStreamListReq& default_instance();

  static inline const LinkGetStreamListReq* internal_default_instance() {
    return reinterpret_cast<const LinkGetStreamListReq*>(
               &_LinkGetStreamListReq_default_instance_);
  }

  void Swap(LinkGetStreamListReq* other);

  // implements Message ----------------------------------------------

  inline LinkGetStreamListReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkGetStreamListReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkGetStreamListReq& from);
  void MergeFrom(const LinkGetStreamListReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkGetStreamListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkGetStreamListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkGetStreamListResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkGetStreamListResp) */ {
 public:
  LinkGetStreamListResp();
  virtual ~LinkGetStreamListResp();

  LinkGetStreamListResp(const LinkGetStreamListResp& from);

  inline LinkGetStreamListResp& operator=(const LinkGetStreamListResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkGetStreamListResp& default_instance();

  static inline const LinkGetStreamListResp* internal_default_instance() {
    return reinterpret_cast<const LinkGetStreamListResp*>(
               &_LinkGetStreamListResp_default_instance_);
  }

  void Swap(LinkGetStreamListResp* other);

  // implements Message ----------------------------------------------

  inline LinkGetStreamListResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkGetStreamListResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkGetStreamListResp& from);
  void MergeFrom(const LinkGetStreamListResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkGetStreamListResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidStreamList cList = 1;
  bool has_clist() const;
  void clear_clist();
  static const int kCListFieldNumber = 1;
  const ::VidStreamList& clist() const;
  ::VidStreamList* mutable_clist();
  ::VidStreamList* release_clist();
  void set_allocated_clist(::VidStreamList* clist);

  // @@protoc_insertion_point(class_scope:LinkGetStreamListResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidStreamList* clist_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkVidDiskListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkVidDiskListReq) */ {
 public:
  LinkVidDiskListReq();
  virtual ~LinkVidDiskListReq();

  LinkVidDiskListReq(const LinkVidDiskListReq& from);

  inline LinkVidDiskListReq& operator=(const LinkVidDiskListReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkVidDiskListReq& default_instance();

  static inline const LinkVidDiskListReq* internal_default_instance() {
    return reinterpret_cast<const LinkVidDiskListReq*>(
               &_LinkVidDiskListReq_default_instance_);
  }

  void Swap(LinkVidDiskListReq* other);

  // implements Message ----------------------------------------------

  inline LinkVidDiskListReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkVidDiskListReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkVidDiskListReq& from);
  void MergeFrom(const LinkVidDiskListReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkVidDiskListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bAll = 1;
  void clear_ball();
  static const int kBAllFieldNumber = 1;
  bool ball() const;
  void set_ball(bool value);

  // @@protoc_insertion_point(class_scope:LinkVidDiskListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ball_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkVidDiskListResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkVidDiskListResp) */ {
 public:
  LinkVidDiskListResp();
  virtual ~LinkVidDiskListResp();

  LinkVidDiskListResp(const LinkVidDiskListResp& from);

  inline LinkVidDiskListResp& operator=(const LinkVidDiskListResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkVidDiskListResp& default_instance();

  static inline const LinkVidDiskListResp* internal_default_instance() {
    return reinterpret_cast<const LinkVidDiskListResp*>(
               &_LinkVidDiskListResp_default_instance_);
  }

  void Swap(LinkVidDiskListResp* other);

  // implements Message ----------------------------------------------

  inline LinkVidDiskListResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkVidDiskListResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkVidDiskListResp& from);
  void MergeFrom(const LinkVidDiskListResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkVidDiskListResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidDiskList cDisk = 1;
  bool has_cdisk() const;
  void clear_cdisk();
  static const int kCDiskFieldNumber = 1;
  const ::VidDiskList& cdisk() const;
  ::VidDiskList* mutable_cdisk();
  ::VidDiskList* release_cdisk();
  void set_allocated_cdisk(::VidDiskList* cdisk);

  // @@protoc_insertion_point(class_scope:LinkVidDiskListResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidDiskList* cdisk_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkSysVidDiskListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkSysVidDiskListReq) */ {
 public:
  LinkSysVidDiskListReq();
  virtual ~LinkSysVidDiskListReq();

  LinkSysVidDiskListReq(const LinkSysVidDiskListReq& from);

  inline LinkSysVidDiskListReq& operator=(const LinkSysVidDiskListReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkSysVidDiskListReq& default_instance();

  static inline const LinkSysVidDiskListReq* internal_default_instance() {
    return reinterpret_cast<const LinkSysVidDiskListReq*>(
               &_LinkSysVidDiskListReq_default_instance_);
  }

  void Swap(LinkSysVidDiskListReq* other);

  // implements Message ----------------------------------------------

  inline LinkSysVidDiskListReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkSysVidDiskListReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkSysVidDiskListReq& from);
  void MergeFrom(const LinkSysVidDiskListReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkSysVidDiskListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bAll = 1;
  void clear_ball();
  static const int kBAllFieldNumber = 1;
  bool ball() const;
  void set_ball(bool value);

  // @@protoc_insertion_point(class_scope:LinkSysVidDiskListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ball_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkSysVidDiskListResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkSysVidDiskListResp) */ {
 public:
  LinkSysVidDiskListResp();
  virtual ~LinkSysVidDiskListResp();

  LinkSysVidDiskListResp(const LinkSysVidDiskListResp& from);

  inline LinkSysVidDiskListResp& operator=(const LinkSysVidDiskListResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkSysVidDiskListResp& default_instance();

  static inline const LinkSysVidDiskListResp* internal_default_instance() {
    return reinterpret_cast<const LinkSysVidDiskListResp*>(
               &_LinkSysVidDiskListResp_default_instance_);
  }

  void Swap(LinkSysVidDiskListResp* other);

  // implements Message ----------------------------------------------

  inline LinkSysVidDiskListResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkSysVidDiskListResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkSysVidDiskListResp& from);
  void MergeFrom(const LinkSysVidDiskListResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkSysVidDiskListResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidDiskList cDisk = 1;
  bool has_cdisk() const;
  void clear_cdisk();
  static const int kCDiskFieldNumber = 1;
  const ::VidDiskList& cdisk() const;
  ::VidDiskList* mutable_cdisk();
  ::VidDiskList* release_cdisk();
  void set_allocated_cdisk(::VidDiskList* cdisk);

  // @@protoc_insertion_point(class_scope:LinkSysVidDiskListResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidDiskList* cdisk_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkAddDiskReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkAddDiskReq) */ {
 public:
  LinkAddDiskReq();
  virtual ~LinkAddDiskReq();

  LinkAddDiskReq(const LinkAddDiskReq& from);

  inline LinkAddDiskReq& operator=(const LinkAddDiskReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkAddDiskReq& default_instance();

  static inline const LinkAddDiskReq* internal_default_instance() {
    return reinterpret_cast<const LinkAddDiskReq*>(
               &_LinkAddDiskReq_default_instance_);
  }

  void Swap(LinkAddDiskReq* other);

  // implements Message ----------------------------------------------

  inline LinkAddDiskReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkAddDiskReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkAddDiskReq& from);
  void MergeFrom(const LinkAddDiskReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkAddDiskReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidDisk cDisk = 1;
  bool has_cdisk() const;
  void clear_cdisk();
  static const int kCDiskFieldNumber = 1;
  const ::VidDisk& cdisk() const;
  ::VidDisk* mutable_cdisk();
  ::VidDisk* release_cdisk();
  void set_allocated_cdisk(::VidDisk* cdisk);

  // @@protoc_insertion_point(class_scope:LinkAddDiskReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidDisk* cdisk_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkAddDiskResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkAddDiskResp) */ {
 public:
  LinkAddDiskResp();
  virtual ~LinkAddDiskResp();

  LinkAddDiskResp(const LinkAddDiskResp& from);

  inline LinkAddDiskResp& operator=(const LinkAddDiskResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkAddDiskResp& default_instance();

  static inline const LinkAddDiskResp* internal_default_instance() {
    return reinterpret_cast<const LinkAddDiskResp*>(
               &_LinkAddDiskResp_default_instance_);
  }

  void Swap(LinkAddDiskResp* other);

  // implements Message ----------------------------------------------

  inline LinkAddDiskResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkAddDiskResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkAddDiskResp& from);
  void MergeFrom(const LinkAddDiskResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkAddDiskResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkAddDiskResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkDelDiskReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkDelDiskReq) */ {
 public:
  LinkDelDiskReq();
  virtual ~LinkDelDiskReq();

  LinkDelDiskReq(const LinkDelDiskReq& from);

  inline LinkDelDiskReq& operator=(const LinkDelDiskReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkDelDiskReq& default_instance();

  static inline const LinkDelDiskReq* internal_default_instance() {
    return reinterpret_cast<const LinkDelDiskReq*>(
               &_LinkDelDiskReq_default_instance_);
  }

  void Swap(LinkDelDiskReq* other);

  // implements Message ----------------------------------------------

  inline LinkDelDiskReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkDelDiskReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkDelDiskReq& from);
  void MergeFrom(const LinkDelDiskReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkDelDiskReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkDelDiskReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkDelDiskResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkDelDiskResp) */ {
 public:
  LinkDelDiskResp();
  virtual ~LinkDelDiskResp();

  LinkDelDiskResp(const LinkDelDiskResp& from);

  inline LinkDelDiskResp& operator=(const LinkDelDiskResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkDelDiskResp& default_instance();

  static inline const LinkDelDiskResp* internal_default_instance() {
    return reinterpret_cast<const LinkDelDiskResp*>(
               &_LinkDelDiskResp_default_instance_);
  }

  void Swap(LinkDelDiskResp* other);

  // implements Message ----------------------------------------------

  inline LinkDelDiskResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkDelDiskResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkDelDiskResp& from);
  void MergeFrom(const LinkDelDiskResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkDelDiskResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkDelDiskResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkUpdateDiskLimitReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkUpdateDiskLimitReq) */ {
 public:
  LinkUpdateDiskLimitReq();
  virtual ~LinkUpdateDiskLimitReq();

  LinkUpdateDiskLimitReq(const LinkUpdateDiskLimitReq& from);

  inline LinkUpdateDiskLimitReq& operator=(const LinkUpdateDiskLimitReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkUpdateDiskLimitReq& default_instance();

  static inline const LinkUpdateDiskLimitReq* internal_default_instance() {
    return reinterpret_cast<const LinkUpdateDiskLimitReq*>(
               &_LinkUpdateDiskLimitReq_default_instance_);
  }

  void Swap(LinkUpdateDiskLimitReq* other);

  // implements Message ----------------------------------------------

  inline LinkUpdateDiskLimitReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkUpdateDiskLimitReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkUpdateDiskLimitReq& from);
  void MergeFrom(const LinkUpdateDiskLimitReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkUpdateDiskLimitReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // int64 nLimit = 2;
  void clear_nlimit();
  static const int kNLimitFieldNumber = 2;
  ::google::protobuf::int64 nlimit() const;
  void set_nlimit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:LinkUpdateDiskLimitReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::int64 nlimit_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkUpdateDiskLimitResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkUpdateDiskLimitResp) */ {
 public:
  LinkUpdateDiskLimitResp();
  virtual ~LinkUpdateDiskLimitResp();

  LinkUpdateDiskLimitResp(const LinkUpdateDiskLimitResp& from);

  inline LinkUpdateDiskLimitResp& operator=(const LinkUpdateDiskLimitResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkUpdateDiskLimitResp& default_instance();

  static inline const LinkUpdateDiskLimitResp* internal_default_instance() {
    return reinterpret_cast<const LinkUpdateDiskLimitResp*>(
               &_LinkUpdateDiskLimitResp_default_instance_);
  }

  void Swap(LinkUpdateDiskLimitResp* other);

  // implements Message ----------------------------------------------

  inline LinkUpdateDiskLimitResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkUpdateDiskLimitResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkUpdateDiskLimitResp& from);
  void MergeFrom(const LinkUpdateDiskLimitResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkUpdateDiskLimitResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkUpdateDiskLimitResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkGetLicReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkGetLicReq) */ {
 public:
  LinkGetLicReq();
  virtual ~LinkGetLicReq();

  LinkGetLicReq(const LinkGetLicReq& from);

  inline LinkGetLicReq& operator=(const LinkGetLicReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkGetLicReq& default_instance();

  static inline const LinkGetLicReq* internal_default_instance() {
    return reinterpret_cast<const LinkGetLicReq*>(
               &_LinkGetLicReq_default_instance_);
  }

  void Swap(LinkGetLicReq* other);

  // implements Message ----------------------------------------------

  inline LinkGetLicReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkGetLicReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkGetLicReq& from);
  void MergeFrom(const LinkGetLicReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkGetLicReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strFake = 1;
  void clear_strfake();
  static const int kStrFakeFieldNumber = 1;
  const ::std::string& strfake() const;
  void set_strfake(const ::std::string& value);
  #if LANG_CXX11
  void set_strfake(::std::string&& value);
  #endif
  void set_strfake(const char* value);
  void set_strfake(const char* value, size_t size);
  ::std::string* mutable_strfake();
  ::std::string* release_strfake();
  void set_allocated_strfake(::std::string* strfake);

  // @@protoc_insertion_point(class_scope:LinkGetLicReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strfake_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkGetLicResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkGetLicResp) */ {
 public:
  LinkGetLicResp();
  virtual ~LinkGetLicResp();

  LinkGetLicResp(const LinkGetLicResp& from);

  inline LinkGetLicResp& operator=(const LinkGetLicResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkGetLicResp& default_instance();

  static inline const LinkGetLicResp* internal_default_instance() {
    return reinterpret_cast<const LinkGetLicResp*>(
               &_LinkGetLicResp_default_instance_);
  }

  void Swap(LinkGetLicResp* other);

  // implements Message ----------------------------------------------

  inline LinkGetLicResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkGetLicResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkGetLicResp& from);
  void MergeFrom(const LinkGetLicResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkGetLicResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strLic = 1;
  void clear_strlic();
  static const int kStrLicFieldNumber = 1;
  const ::std::string& strlic() const;
  void set_strlic(const ::std::string& value);
  #if LANG_CXX11
  void set_strlic(::std::string&& value);
  #endif
  void set_strlic(const char* value);
  void set_strlic(const char* value, size_t size);
  ::std::string* mutable_strlic();
  ::std::string* release_strlic();
  void set_allocated_strlic(::std::string* strlic);

  // string strHostId = 2;
  void clear_strhostid();
  static const int kStrHostIdFieldNumber = 2;
  const ::std::string& strhostid() const;
  void set_strhostid(const ::std::string& value);
  #if LANG_CXX11
  void set_strhostid(::std::string&& value);
  #endif
  void set_strhostid(const char* value);
  void set_strhostid(const char* value, size_t size);
  ::std::string* mutable_strhostid();
  ::std::string* release_strhostid();
  void set_allocated_strhostid(::std::string* strhostid);

  // string strType = 4;
  void clear_strtype();
  static const int kStrTypeFieldNumber = 4;
  const ::std::string& strtype() const;
  void set_strtype(const ::std::string& value);
  #if LANG_CXX11
  void set_strtype(::std::string&& value);
  #endif
  void set_strtype(const char* value);
  void set_strtype(const char* value, size_t size);
  ::std::string* mutable_strtype();
  ::std::string* release_strtype();
  void set_allocated_strtype(::std::string* strtype);

  // string strStartTime = 5;
  void clear_strstarttime();
  static const int kStrStartTimeFieldNumber = 5;
  const ::std::string& strstarttime() const;
  void set_strstarttime(const ::std::string& value);
  #if LANG_CXX11
  void set_strstarttime(::std::string&& value);
  #endif
  void set_strstarttime(const char* value);
  void set_strstarttime(const char* value, size_t size);
  ::std::string* mutable_strstarttime();
  ::std::string* release_strstarttime();
  void set_allocated_strstarttime(::std::string* strstarttime);

  // string strExpireTime = 6;
  void clear_strexpiretime();
  static const int kStrExpireTimeFieldNumber = 6;
  const ::std::string& strexpiretime() const;
  void set_strexpiretime(const ::std::string& value);
  #if LANG_CXX11
  void set_strexpiretime(::std::string&& value);
  #endif
  void set_strexpiretime(const char* value);
  void set_strexpiretime(const char* value, size_t size);
  ::std::string* mutable_strexpiretime();
  ::std::string* release_strexpiretime();
  void set_allocated_strexpiretime(::std::string* strexpiretime);

  // int32 nCh = 3;
  void clear_nch();
  static const int kNChFieldNumber = 3;
  ::google::protobuf::int32 nch() const;
  void set_nch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkGetLicResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strlic_;
  ::google::protobuf::internal::ArenaStringPtr strhostid_;
  ::google::protobuf::internal::ArenaStringPtr strtype_;
  ::google::protobuf::internal::ArenaStringPtr strstarttime_;
  ::google::protobuf::internal::ArenaStringPtr strexpiretime_;
  ::google::protobuf::int32 nch_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkGetVerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkGetVerReq) */ {
 public:
  LinkGetVerReq();
  virtual ~LinkGetVerReq();

  LinkGetVerReq(const LinkGetVerReq& from);

  inline LinkGetVerReq& operator=(const LinkGetVerReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkGetVerReq& default_instance();

  static inline const LinkGetVerReq* internal_default_instance() {
    return reinterpret_cast<const LinkGetVerReq*>(
               &_LinkGetVerReq_default_instance_);
  }

  void Swap(LinkGetVerReq* other);

  // implements Message ----------------------------------------------

  inline LinkGetVerReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkGetVerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkGetVerReq& from);
  void MergeFrom(const LinkGetVerReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkGetVerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strFake = 1;
  void clear_strfake();
  static const int kStrFakeFieldNumber = 1;
  const ::std::string& strfake() const;
  void set_strfake(const ::std::string& value);
  #if LANG_CXX11
  void set_strfake(::std::string&& value);
  #endif
  void set_strfake(const char* value);
  void set_strfake(const char* value, size_t size);
  ::std::string* mutable_strfake();
  ::std::string* release_strfake();
  void set_allocated_strfake(::std::string* strfake);

  // @@protoc_insertion_point(class_scope:LinkGetVerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strfake_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkGetVerResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkGetVerResp) */ {
 public:
  LinkGetVerResp();
  virtual ~LinkGetVerResp();

  LinkGetVerResp(const LinkGetVerResp& from);

  inline LinkGetVerResp& operator=(const LinkGetVerResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkGetVerResp& default_instance();

  static inline const LinkGetVerResp* internal_default_instance() {
    return reinterpret_cast<const LinkGetVerResp*>(
               &_LinkGetVerResp_default_instance_);
  }

  void Swap(LinkGetVerResp* other);

  // implements Message ----------------------------------------------

  inline LinkGetVerResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkGetVerResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkGetVerResp& from);
  void MergeFrom(const LinkGetVerResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkGetVerResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strVer = 1;
  void clear_strver();
  static const int kStrVerFieldNumber = 1;
  const ::std::string& strver() const;
  void set_strver(const ::std::string& value);
  #if LANG_CXX11
  void set_strver(::std::string&& value);
  #endif
  void set_strver(const char* value);
  void set_strver(const char* value, size_t size);
  ::std::string* mutable_strver();
  ::std::string* release_strver();
  void set_allocated_strver(::std::string* strver);

  // string strInfo = 2;
  void clear_strinfo();
  static const int kStrInfoFieldNumber = 2;
  const ::std::string& strinfo() const;
  void set_strinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_strinfo(::std::string&& value);
  #endif
  void set_strinfo(const char* value);
  void set_strinfo(const char* value, size_t size);
  ::std::string* mutable_strinfo();
  ::std::string* release_strinfo();
  void set_allocated_strinfo(::std::string* strinfo);

  // @@protoc_insertion_point(class_scope:LinkGetVerResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strver_;
  ::google::protobuf::internal::ArenaStringPtr strinfo_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkConfLicReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkConfLicReq) */ {
 public:
  LinkConfLicReq();
  virtual ~LinkConfLicReq();

  LinkConfLicReq(const LinkConfLicReq& from);

  inline LinkConfLicReq& operator=(const LinkConfLicReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkConfLicReq& default_instance();

  static inline const LinkConfLicReq* internal_default_instance() {
    return reinterpret_cast<const LinkConfLicReq*>(
               &_LinkConfLicReq_default_instance_);
  }

  void Swap(LinkConfLicReq* other);

  // implements Message ----------------------------------------------

  inline LinkConfLicReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkConfLicReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkConfLicReq& from);
  void MergeFrom(const LinkConfLicReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkConfLicReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strLic = 1;
  void clear_strlic();
  static const int kStrLicFieldNumber = 1;
  const ::std::string& strlic() const;
  void set_strlic(const ::std::string& value);
  #if LANG_CXX11
  void set_strlic(::std::string&& value);
  #endif
  void set_strlic(const char* value);
  void set_strlic(const char* value, size_t size);
  ::std::string* mutable_strlic();
  ::std::string* release_strlic();
  void set_allocated_strlic(::std::string* strlic);

  // @@protoc_insertion_point(class_scope:LinkConfLicReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strlic_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkConfLicResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkConfLicResp) */ {
 public:
  LinkConfLicResp();
  virtual ~LinkConfLicResp();

  LinkConfLicResp(const LinkConfLicResp& from);

  inline LinkConfLicResp& operator=(const LinkConfLicResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkConfLicResp& default_instance();

  static inline const LinkConfLicResp* internal_default_instance() {
    return reinterpret_cast<const LinkConfLicResp*>(
               &_LinkConfLicResp_default_instance_);
  }

  void Swap(LinkConfLicResp* other);

  // implements Message ----------------------------------------------

  inline LinkConfLicResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkConfLicResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkConfLicResp& from);
  void MergeFrom(const LinkConfLicResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkConfLicResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkConfLicResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkAddUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkAddUserReq) */ {
 public:
  LinkAddUserReq();
  virtual ~LinkAddUserReq();

  LinkAddUserReq(const LinkAddUserReq& from);

  inline LinkAddUserReq& operator=(const LinkAddUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkAddUserReq& default_instance();

  static inline const LinkAddUserReq* internal_default_instance() {
    return reinterpret_cast<const LinkAddUserReq*>(
               &_LinkAddUserReq_default_instance_);
  }

  void Swap(LinkAddUserReq* other);

  // implements Message ----------------------------------------------

  inline LinkAddUserReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkAddUserReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkAddUserReq& from);
  void MergeFrom(const LinkAddUserReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkAddUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strUser = 1;
  void clear_struser();
  static const int kStrUserFieldNumber = 1;
  const ::std::string& struser() const;
  void set_struser(const ::std::string& value);
  #if LANG_CXX11
  void set_struser(::std::string&& value);
  #endif
  void set_struser(const char* value);
  void set_struser(const char* value, size_t size);
  ::std::string* mutable_struser();
  ::std::string* release_struser();
  void set_allocated_struser(::std::string* struser);

  // string strPasswd = 2;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 2;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_strpasswd(::std::string&& value);
  #endif
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // @@protoc_insertion_point(class_scope:LinkAddUserReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr struser_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkAddUserResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkAddUserResp) */ {
 public:
  LinkAddUserResp();
  virtual ~LinkAddUserResp();

  LinkAddUserResp(const LinkAddUserResp& from);

  inline LinkAddUserResp& operator=(const LinkAddUserResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkAddUserResp& default_instance();

  static inline const LinkAddUserResp* internal_default_instance() {
    return reinterpret_cast<const LinkAddUserResp*>(
               &_LinkAddUserResp_default_instance_);
  }

  void Swap(LinkAddUserResp* other);

  // implements Message ----------------------------------------------

  inline LinkAddUserResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkAddUserResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkAddUserResp& from);
  void MergeFrom(const LinkAddUserResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkAddUserResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkAddUserResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkHasRecordItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkHasRecordItem) */ {
 public:
  LinkHasRecordItem();
  virtual ~LinkHasRecordItem();

  LinkHasRecordItem(const LinkHasRecordItem& from);

  inline LinkHasRecordItem& operator=(const LinkHasRecordItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkHasRecordItem& default_instance();

  static inline const LinkHasRecordItem* internal_default_instance() {
    return reinterpret_cast<const LinkHasRecordItem*>(
               &_LinkHasRecordItem_default_instance_);
  }

  void Swap(LinkHasRecordItem* other);

  // implements Message ----------------------------------------------

  inline LinkHasRecordItem* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkHasRecordItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkHasRecordItem& from);
  void MergeFrom(const LinkHasRecordItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkHasRecordItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 nId = 1;
  void clear_nid();
  static const int kNIdFieldNumber = 1;
  ::google::protobuf::int64 nid() const;
  void set_nid(::google::protobuf::int64 value);

  // int32 nStart = 2;
  void clear_nstart();
  static const int kNStartFieldNumber = 2;
  ::google::protobuf::int32 nstart() const;
  void set_nstart(::google::protobuf::int32 value);

  // int32 nEnd = 3;
  void clear_nend();
  static const int kNEndFieldNumber = 3;
  ::google::protobuf::int32 nend() const;
  void set_nend(::google::protobuf::int32 value);

  // int32 nType = 4;
  void clear_ntype();
  static const int kNTypeFieldNumber = 4;
  ::google::protobuf::int32 ntype() const;
  void set_ntype(::google::protobuf::int32 value);

  // bool bHas = 5;
  void clear_bhas();
  static const int kBHasFieldNumber = 5;
  bool bhas() const;
  void set_bhas(bool value);

  // @@protoc_insertion_point(class_scope:LinkHasRecordItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 nid_;
  ::google::protobuf::int32 nstart_;
  ::google::protobuf::int32 nend_;
  ::google::protobuf::int32 ntype_;
  bool bhas_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkHasRecordList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkHasRecordList) */ {
 public:
  LinkHasRecordList();
  virtual ~LinkHasRecordList();

  LinkHasRecordList(const LinkHasRecordList& from);

  inline LinkHasRecordList& operator=(const LinkHasRecordList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkHasRecordList& default_instance();

  static inline const LinkHasRecordList* internal_default_instance() {
    return reinterpret_cast<const LinkHasRecordList*>(
               &_LinkHasRecordList_default_instance_);
  }

  void Swap(LinkHasRecordList* other);

  // implements Message ----------------------------------------------

  inline LinkHasRecordList* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkHasRecordList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkHasRecordList& from);
  void MergeFrom(const LinkHasRecordList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkHasRecordList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LinkHasRecordItem cHasRec = 1;
  int chasrec_size() const;
  void clear_chasrec();
  static const int kCHasRecFieldNumber = 1;
  const ::LinkHasRecordItem& chasrec(int index) const;
  ::LinkHasRecordItem* mutable_chasrec(int index);
  ::LinkHasRecordItem* add_chasrec();
  ::google::protobuf::RepeatedPtrField< ::LinkHasRecordItem >*
      mutable_chasrec();
  const ::google::protobuf::RepeatedPtrField< ::LinkHasRecordItem >&
      chasrec() const;

  // @@protoc_insertion_point(class_scope:LinkHasRecordList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::LinkHasRecordItem > chasrec_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkHasRecordReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkHasRecordReq) */ {
 public:
  LinkHasRecordReq();
  virtual ~LinkHasRecordReq();

  LinkHasRecordReq(const LinkHasRecordReq& from);

  inline LinkHasRecordReq& operator=(const LinkHasRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkHasRecordReq& default_instance();

  static inline const LinkHasRecordReq* internal_default_instance() {
    return reinterpret_cast<const LinkHasRecordReq*>(
               &_LinkHasRecordReq_default_instance_);
  }

  void Swap(LinkHasRecordReq* other);

  // implements Message ----------------------------------------------

  inline LinkHasRecordReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkHasRecordReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkHasRecordReq& from);
  void MergeFrom(const LinkHasRecordReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkHasRecordReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // .LinkHasRecordList cList = 2;
  bool has_clist() const;
  void clear_clist();
  static const int kCListFieldNumber = 2;
  const ::LinkHasRecordList& clist() const;
  ::LinkHasRecordList* mutable_clist();
  ::LinkHasRecordList* release_clist();
  void set_allocated_clist(::LinkHasRecordList* clist);

  // @@protoc_insertion_point(class_scope:LinkHasRecordReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::LinkHasRecordList* clist_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkHasRecordResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkHasRecordResp) */ {
 public:
  LinkHasRecordResp();
  virtual ~LinkHasRecordResp();

  LinkHasRecordResp(const LinkHasRecordResp& from);

  inline LinkHasRecordResp& operator=(const LinkHasRecordResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkHasRecordResp& default_instance();

  static inline const LinkHasRecordResp* internal_default_instance() {
    return reinterpret_cast<const LinkHasRecordResp*>(
               &_LinkHasRecordResp_default_instance_);
  }

  void Swap(LinkHasRecordResp* other);

  // implements Message ----------------------------------------------

  inline LinkHasRecordResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkHasRecordResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkHasRecordResp& from);
  void MergeFrom(const LinkHasRecordResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkHasRecordResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LinkHasRecordList cList = 1;
  bool has_clist() const;
  void clear_clist();
  static const int kCListFieldNumber = 1;
  const ::LinkHasRecordList& clist() const;
  ::LinkHasRecordList* mutable_clist();
  ::LinkHasRecordList* release_clist();
  void set_allocated_clist(::LinkHasRecordList* clist);

  // @@protoc_insertion_point(class_scope:LinkHasRecordResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LinkHasRecordList* clist_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkRecordItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkRecordItem) */ {
 public:
  LinkRecordItem();
  virtual ~LinkRecordItem();

  LinkRecordItem(const LinkRecordItem& from);

  inline LinkRecordItem& operator=(const LinkRecordItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkRecordItem& default_instance();

  static inline const LinkRecordItem* internal_default_instance() {
    return reinterpret_cast<const LinkRecordItem*>(
               &_LinkRecordItem_default_instance_);
  }

  void Swap(LinkRecordItem* other);

  // implements Message ----------------------------------------------

  inline LinkRecordItem* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkRecordItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkRecordItem& from);
  void MergeFrom(const LinkRecordItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkRecordItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 nId = 1;
  void clear_nid();
  static const int kNIdFieldNumber = 1;
  ::google::protobuf::int64 nid() const;
  void set_nid(::google::protobuf::int64 value);

  // int32 nStart = 2;
  void clear_nstart();
  static const int kNStartFieldNumber = 2;
  ::google::protobuf::int32 nstart() const;
  void set_nstart(::google::protobuf::int32 value);

  // int32 nEnd = 3;
  void clear_nend();
  static const int kNEndFieldNumber = 3;
  ::google::protobuf::int32 nend() const;
  void set_nend(::google::protobuf::int32 value);

  // int32 nType = 4;
  void clear_ntype();
  static const int kNTypeFieldNumber = 4;
  ::google::protobuf::int32 ntype() const;
  void set_ntype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkRecordItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 nid_;
  ::google::protobuf::int32 nstart_;
  ::google::protobuf::int32 nend_;
  ::google::protobuf::int32 ntype_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkRecordList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkRecordList) */ {
 public:
  LinkRecordList();
  virtual ~LinkRecordList();

  LinkRecordList(const LinkRecordList& from);

  inline LinkRecordList& operator=(const LinkRecordList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkRecordList& default_instance();

  static inline const LinkRecordList* internal_default_instance() {
    return reinterpret_cast<const LinkRecordList*>(
               &_LinkRecordList_default_instance_);
  }

  void Swap(LinkRecordList* other);

  // implements Message ----------------------------------------------

  inline LinkRecordList* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkRecordList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkRecordList& from);
  void MergeFrom(const LinkRecordList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkRecordList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LinkRecordItem cList = 1;
  int clist_size() const;
  void clear_clist();
  static const int kCListFieldNumber = 1;
  const ::LinkRecordItem& clist(int index) const;
  ::LinkRecordItem* mutable_clist(int index);
  ::LinkRecordItem* add_clist();
  ::google::protobuf::RepeatedPtrField< ::LinkRecordItem >*
      mutable_clist();
  const ::google::protobuf::RepeatedPtrField< ::LinkRecordItem >&
      clist() const;

  // @@protoc_insertion_point(class_scope:LinkRecordList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::LinkRecordItem > clist_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkSearchRecordReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkSearchRecordReq) */ {
 public:
  LinkSearchRecordReq();
  virtual ~LinkSearchRecordReq();

  LinkSearchRecordReq(const LinkSearchRecordReq& from);

  inline LinkSearchRecordReq& operator=(const LinkSearchRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkSearchRecordReq& default_instance();

  static inline const LinkSearchRecordReq* internal_default_instance() {
    return reinterpret_cast<const LinkSearchRecordReq*>(
               &_LinkSearchRecordReq_default_instance_);
  }

  void Swap(LinkSearchRecordReq* other);

  // implements Message ----------------------------------------------

  inline LinkSearchRecordReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkSearchRecordReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkSearchRecordReq& from);
  void MergeFrom(const LinkSearchRecordReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkSearchRecordReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // int32 nStart = 2;
  void clear_nstart();
  static const int kNStartFieldNumber = 2;
  ::google::protobuf::int32 nstart() const;
  void set_nstart(::google::protobuf::int32 value);

  // int32 nEnd = 3;
  void clear_nend();
  static const int kNEndFieldNumber = 3;
  ::google::protobuf::int32 nend() const;
  void set_nend(::google::protobuf::int32 value);

  // int32 nType = 4;
  void clear_ntype();
  static const int kNTypeFieldNumber = 4;
  ::google::protobuf::int32 ntype() const;
  void set_ntype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkSearchRecordReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::int32 nstart_;
  ::google::protobuf::int32 nend_;
  ::google::protobuf::int32 ntype_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkSearchRecordResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkSearchRecordResp) */ {
 public:
  LinkSearchRecordResp();
  virtual ~LinkSearchRecordResp();

  LinkSearchRecordResp(const LinkSearchRecordResp& from);

  inline LinkSearchRecordResp& operator=(const LinkSearchRecordResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkSearchRecordResp& default_instance();

  static inline const LinkSearchRecordResp* internal_default_instance() {
    return reinterpret_cast<const LinkSearchRecordResp*>(
               &_LinkSearchRecordResp_default_instance_);
  }

  void Swap(LinkSearchRecordResp* other);

  // implements Message ----------------------------------------------

  inline LinkSearchRecordResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkSearchRecordResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkSearchRecordResp& from);
  void MergeFrom(const LinkSearchRecordResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkSearchRecordResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // .LinkRecordList cList = 2;
  bool has_clist() const;
  void clear_clist();
  static const int kCListFieldNumber = 2;
  const ::LinkRecordList& clist() const;
  ::LinkRecordList* mutable_clist();
  ::LinkRecordList* release_clist();
  void set_allocated_clist(::LinkRecordList* clist);

  // @@protoc_insertion_point(class_scope:LinkSearchRecordResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::LinkRecordList* clist_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkStartLiveCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkStartLiveCmd) */ {
 public:
  LinkStartLiveCmd();
  virtual ~LinkStartLiveCmd();

  LinkStartLiveCmd(const LinkStartLiveCmd& from);

  inline LinkStartLiveCmd& operator=(const LinkStartLiveCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkStartLiveCmd& default_instance();

  static inline const LinkStartLiveCmd* internal_default_instance() {
    return reinterpret_cast<const LinkStartLiveCmd*>(
               &_LinkStartLiveCmd_default_instance_);
  }

  void Swap(LinkStartLiveCmd* other);

  // implements Message ----------------------------------------------

  inline LinkStartLiveCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkStartLiveCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkStartLiveCmd& from);
  void MergeFrom(const LinkStartLiveCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkStartLiveCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // int32 nStream = 2;
  void clear_nstream();
  static const int kNStreamFieldNumber = 2;
  ::google::protobuf::int32 nstream() const;
  void set_nstream(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkStartLiveCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::int32 nstream_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkStopLiveCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkStopLiveCmd) */ {
 public:
  LinkStopLiveCmd();
  virtual ~LinkStopLiveCmd();

  LinkStopLiveCmd(const LinkStopLiveCmd& from);

  inline LinkStopLiveCmd& operator=(const LinkStopLiveCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkStopLiveCmd& default_instance();

  static inline const LinkStopLiveCmd* internal_default_instance() {
    return reinterpret_cast<const LinkStopLiveCmd*>(
               &_LinkStopLiveCmd_default_instance_);
  }

  void Swap(LinkStopLiveCmd* other);

  // implements Message ----------------------------------------------

  inline LinkStopLiveCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkStopLiveCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkStopLiveCmd& from);
  void MergeFrom(const LinkStopLiveCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkStopLiveCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // int32 nStream = 2;
  void clear_nstream();
  static const int kNStreamFieldNumber = 2;
  ::google::protobuf::int32 nstream() const;
  void set_nstream(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkStopLiveCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::int32 nstream_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkPlayBackCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkPlayBackCmd) */ {
 public:
  LinkPlayBackCmd();
  virtual ~LinkPlayBackCmd();

  LinkPlayBackCmd(const LinkPlayBackCmd& from);

  inline LinkPlayBackCmd& operator=(const LinkPlayBackCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkPlayBackCmd& default_instance();

  static inline const LinkPlayBackCmd* internal_default_instance() {
    return reinterpret_cast<const LinkPlayBackCmd*>(
               &_LinkPlayBackCmd_default_instance_);
  }

  void Swap(LinkPlayBackCmd* other);

  // implements Message ----------------------------------------------

  inline LinkPlayBackCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkPlayBackCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkPlayBackCmd& from);
  void MergeFrom(const LinkPlayBackCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkPlayBackCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // int32 nPlaytime = 2;
  void clear_nplaytime();
  static const int kNPlaytimeFieldNumber = 2;
  ::google::protobuf::int32 nplaytime() const;
  void set_nplaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkPlayBackCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::int32 nplaytime_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkPlayPauseCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkPlayPauseCmd) */ {
 public:
  LinkPlayPauseCmd();
  virtual ~LinkPlayPauseCmd();

  LinkPlayPauseCmd(const LinkPlayPauseCmd& from);

  inline LinkPlayPauseCmd& operator=(const LinkPlayPauseCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkPlayPauseCmd& default_instance();

  static inline const LinkPlayPauseCmd* internal_default_instance() {
    return reinterpret_cast<const LinkPlayPauseCmd*>(
               &_LinkPlayPauseCmd_default_instance_);
  }

  void Swap(LinkPlayPauseCmd* other);

  // implements Message ----------------------------------------------

  inline LinkPlayPauseCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkPlayPauseCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkPlayPauseCmd& from);
  void MergeFrom(const LinkPlayPauseCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkPlayPauseCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkPlayPauseCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkPlayResumeCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkPlayResumeCmd) */ {
 public:
  LinkPlayResumeCmd();
  virtual ~LinkPlayResumeCmd();

  LinkPlayResumeCmd(const LinkPlayResumeCmd& from);

  inline LinkPlayResumeCmd& operator=(const LinkPlayResumeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkPlayResumeCmd& default_instance();

  static inline const LinkPlayResumeCmd* internal_default_instance() {
    return reinterpret_cast<const LinkPlayResumeCmd*>(
               &_LinkPlayResumeCmd_default_instance_);
  }

  void Swap(LinkPlayResumeCmd* other);

  // implements Message ----------------------------------------------

  inline LinkPlayResumeCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkPlayResumeCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkPlayResumeCmd& from);
  void MergeFrom(const LinkPlayResumeCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkPlayResumeCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkPlayResumeCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkPlaySeekCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkPlaySeekCmd) */ {
 public:
  LinkPlaySeekCmd();
  virtual ~LinkPlaySeekCmd();

  LinkPlaySeekCmd(const LinkPlaySeekCmd& from);

  inline LinkPlaySeekCmd& operator=(const LinkPlaySeekCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkPlaySeekCmd& default_instance();

  static inline const LinkPlaySeekCmd* internal_default_instance() {
    return reinterpret_cast<const LinkPlaySeekCmd*>(
               &_LinkPlaySeekCmd_default_instance_);
  }

  void Swap(LinkPlaySeekCmd* other);

  // implements Message ----------------------------------------------

  inline LinkPlaySeekCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkPlaySeekCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkPlaySeekCmd& from);
  void MergeFrom(const LinkPlaySeekCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkPlaySeekCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // int32 nPlaytime = 2;
  void clear_nplaytime();
  static const int kNPlaytimeFieldNumber = 2;
  ::google::protobuf::int32 nplaytime() const;
  void set_nplaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkPlaySeekCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::int32 nplaytime_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkPlayStopCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkPlayStopCmd) */ {
 public:
  LinkPlayStopCmd();
  virtual ~LinkPlayStopCmd();

  LinkPlayStopCmd(const LinkPlayStopCmd& from);

  inline LinkPlayStopCmd& operator=(const LinkPlayStopCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkPlayStopCmd& default_instance();

  static inline const LinkPlayStopCmd* internal_default_instance() {
    return reinterpret_cast<const LinkPlayStopCmd*>(
               &_LinkPlayStopCmd_default_instance_);
  }

  void Swap(LinkPlayStopCmd* other);

  // implements Message ----------------------------------------------

  inline LinkPlayStopCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkPlayStopCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkPlayStopCmd& from);
  void MergeFrom(const LinkPlayStopCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkPlayStopCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkPlayStopCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkPtzCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkPtzCmd) */ {
 public:
  LinkPtzCmd();
  virtual ~LinkPtzCmd();

  LinkPtzCmd(const LinkPtzCmd& from);

  inline LinkPtzCmd& operator=(const LinkPtzCmd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkPtzCmd& default_instance();

  static inline const LinkPtzCmd* internal_default_instance() {
    return reinterpret_cast<const LinkPtzCmd*>(
               &_LinkPtzCmd_default_instance_);
  }

  void Swap(LinkPtzCmd* other);

  // implements Message ----------------------------------------------

  inline LinkPtzCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkPtzCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkPtzCmd& from);
  void MergeFrom(const LinkPtzCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkPtzCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // double nParam = 3;
  void clear_nparam();
  static const int kNParamFieldNumber = 3;
  double nparam() const;
  void set_nparam(double value);

  // int32 nAction = 2;
  void clear_naction();
  static const int kNActionFieldNumber = 2;
  ::google::protobuf::int32 naction() const;
  void set_naction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkPtzCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  double nparam_;
  ::google::protobuf::int32 naction_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkCamSearchStartReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkCamSearchStartReq) */ {
 public:
  LinkCamSearchStartReq();
  virtual ~LinkCamSearchStartReq();

  LinkCamSearchStartReq(const LinkCamSearchStartReq& from);

  inline LinkCamSearchStartReq& operator=(const LinkCamSearchStartReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCamSearchStartReq& default_instance();

  static inline const LinkCamSearchStartReq* internal_default_instance() {
    return reinterpret_cast<const LinkCamSearchStartReq*>(
               &_LinkCamSearchStartReq_default_instance_);
  }

  void Swap(LinkCamSearchStartReq* other);

  // implements Message ----------------------------------------------

  inline LinkCamSearchStartReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCamSearchStartReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCamSearchStartReq& from);
  void MergeFrom(const LinkCamSearchStartReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCamSearchStartReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strFake = 1;
  void clear_strfake();
  static const int kStrFakeFieldNumber = 1;
  const ::std::string& strfake() const;
  void set_strfake(const ::std::string& value);
  #if LANG_CXX11
  void set_strfake(::std::string&& value);
  #endif
  void set_strfake(const char* value);
  void set_strfake(const char* value, size_t size);
  ::std::string* mutable_strfake();
  ::std::string* release_strfake();
  void set_allocated_strfake(::std::string* strfake);

  // @@protoc_insertion_point(class_scope:LinkCamSearchStartReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strfake_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkCamSearchStartResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkCamSearchStartResp) */ {
 public:
  LinkCamSearchStartResp();
  virtual ~LinkCamSearchStartResp();

  LinkCamSearchStartResp(const LinkCamSearchStartResp& from);

  inline LinkCamSearchStartResp& operator=(const LinkCamSearchStartResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCamSearchStartResp& default_instance();

  static inline const LinkCamSearchStartResp* internal_default_instance() {
    return reinterpret_cast<const LinkCamSearchStartResp*>(
               &_LinkCamSearchStartResp_default_instance_);
  }

  void Swap(LinkCamSearchStartResp* other);

  // implements Message ----------------------------------------------

  inline LinkCamSearchStartResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCamSearchStartResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCamSearchStartResp& from);
  void MergeFrom(const LinkCamSearchStartResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCamSearchStartResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkCamSearchStartResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkCamSearchStopReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkCamSearchStopReq) */ {
 public:
  LinkCamSearchStopReq();
  virtual ~LinkCamSearchStopReq();

  LinkCamSearchStopReq(const LinkCamSearchStopReq& from);

  inline LinkCamSearchStopReq& operator=(const LinkCamSearchStopReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCamSearchStopReq& default_instance();

  static inline const LinkCamSearchStopReq* internal_default_instance() {
    return reinterpret_cast<const LinkCamSearchStopReq*>(
               &_LinkCamSearchStopReq_default_instance_);
  }

  void Swap(LinkCamSearchStopReq* other);

  // implements Message ----------------------------------------------

  inline LinkCamSearchStopReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCamSearchStopReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCamSearchStopReq& from);
  void MergeFrom(const LinkCamSearchStopReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCamSearchStopReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strFake = 1;
  void clear_strfake();
  static const int kStrFakeFieldNumber = 1;
  const ::std::string& strfake() const;
  void set_strfake(const ::std::string& value);
  #if LANG_CXX11
  void set_strfake(::std::string&& value);
  #endif
  void set_strfake(const char* value);
  void set_strfake(const char* value, size_t size);
  ::std::string* mutable_strfake();
  ::std::string* release_strfake();
  void set_allocated_strfake(::std::string* strfake);

  // @@protoc_insertion_point(class_scope:LinkCamSearchStopReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strfake_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkCamSearchStopResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkCamSearchStopResp) */ {
 public:
  LinkCamSearchStopResp();
  virtual ~LinkCamSearchStopResp();

  LinkCamSearchStopResp(const LinkCamSearchStopResp& from);

  inline LinkCamSearchStopResp& operator=(const LinkCamSearchStopResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCamSearchStopResp& default_instance();

  static inline const LinkCamSearchStopResp* internal_default_instance() {
    return reinterpret_cast<const LinkCamSearchStopResp*>(
               &_LinkCamSearchStopResp_default_instance_);
  }

  void Swap(LinkCamSearchStopResp* other);

  // implements Message ----------------------------------------------

  inline LinkCamSearchStopResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCamSearchStopResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCamSearchStopResp& from);
  void MergeFrom(const LinkCamSearchStopResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCamSearchStopResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkCamSearchStopResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkRegEventReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkRegEventReq) */ {
 public:
  LinkRegEventReq();
  virtual ~LinkRegEventReq();

  LinkRegEventReq(const LinkRegEventReq& from);

  inline LinkRegEventReq& operator=(const LinkRegEventReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkRegEventReq& default_instance();

  static inline const LinkRegEventReq* internal_default_instance() {
    return reinterpret_cast<const LinkRegEventReq*>(
               &_LinkRegEventReq_default_instance_);
  }

  void Swap(LinkRegEventReq* other);

  // implements Message ----------------------------------------------

  inline LinkRegEventReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkRegEventReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkRegEventReq& from);
  void MergeFrom(const LinkRegEventReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkRegEventReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkRegEventReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkRegEventResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkRegEventResp) */ {
 public:
  LinkRegEventResp();
  virtual ~LinkRegEventResp();

  LinkRegEventResp(const LinkRegEventResp& from);

  inline LinkRegEventResp& operator=(const LinkRegEventResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkRegEventResp& default_instance();

  static inline const LinkRegEventResp* internal_default_instance() {
    return reinterpret_cast<const LinkRegEventResp*>(
               &_LinkRegEventResp_default_instance_);
  }

  void Swap(LinkRegEventResp* other);

  // implements Message ----------------------------------------------

  inline LinkRegEventResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkRegEventResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkRegEventResp& from);
  void MergeFrom(const LinkRegEventResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkRegEventResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkRegEventResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkUnRegEventReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkUnRegEventReq) */ {
 public:
  LinkUnRegEventReq();
  virtual ~LinkUnRegEventReq();

  LinkUnRegEventReq(const LinkUnRegEventReq& from);

  inline LinkUnRegEventReq& operator=(const LinkUnRegEventReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkUnRegEventReq& default_instance();

  static inline const LinkUnRegEventReq* internal_default_instance() {
    return reinterpret_cast<const LinkUnRegEventReq*>(
               &_LinkUnRegEventReq_default_instance_);
  }

  void Swap(LinkUnRegEventReq* other);

  // implements Message ----------------------------------------------

  inline LinkUnRegEventReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkUnRegEventReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkUnRegEventReq& from);
  void MergeFrom(const LinkUnRegEventReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkUnRegEventReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkUnRegEventReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkUnRegEventResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkUnRegEventResp) */ {
 public:
  LinkUnRegEventResp();
  virtual ~LinkUnRegEventResp();

  LinkUnRegEventResp(const LinkUnRegEventResp& from);

  inline LinkUnRegEventResp& operator=(const LinkUnRegEventResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkUnRegEventResp& default_instance();

  static inline const LinkUnRegEventResp* internal_default_instance() {
    return reinterpret_cast<const LinkUnRegEventResp*>(
               &_LinkUnRegEventResp_default_instance_);
  }

  void Swap(LinkUnRegEventResp* other);

  // implements Message ----------------------------------------------

  inline LinkUnRegEventResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkUnRegEventResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkUnRegEventResp& from);
  void MergeFrom(const LinkUnRegEventResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkUnRegEventResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkUnRegEventResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkEventSearchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkEventSearchReq) */ {
 public:
  LinkEventSearchReq();
  virtual ~LinkEventSearchReq();

  LinkEventSearchReq(const LinkEventSearchReq& from);

  inline LinkEventSearchReq& operator=(const LinkEventSearchReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkEventSearchReq& default_instance();

  static inline const LinkEventSearchReq* internal_default_instance() {
    return reinterpret_cast<const LinkEventSearchReq*>(
               &_LinkEventSearchReq_default_instance_);
  }

  void Swap(LinkEventSearchReq* other);

  // implements Message ----------------------------------------------

  inline LinkEventSearchReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkEventSearchReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkEventSearchReq& from);
  void MergeFrom(const LinkEventSearchReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkEventSearchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // int32 nStart = 2;
  void clear_nstart();
  static const int kNStartFieldNumber = 2;
  ::google::protobuf::int32 nstart() const;
  void set_nstart(::google::protobuf::int32 value);

  // int32 nEnd = 3;
  void clear_nend();
  static const int kNEndFieldNumber = 3;
  ::google::protobuf::int32 nend() const;
  void set_nend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LinkEventSearchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::int32 nstart_;
  ::google::protobuf::int32 nend_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkEventSearchResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkEventSearchResp) */ {
 public:
  LinkEventSearchResp();
  virtual ~LinkEventSearchResp();

  LinkEventSearchResp(const LinkEventSearchResp& from);

  inline LinkEventSearchResp& operator=(const LinkEventSearchResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkEventSearchResp& default_instance();

  static inline const LinkEventSearchResp* internal_default_instance() {
    return reinterpret_cast<const LinkEventSearchResp*>(
               &_LinkEventSearchResp_default_instance_);
  }

  void Swap(LinkEventSearchResp* other);

  // implements Message ----------------------------------------------

  inline LinkEventSearchResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkEventSearchResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkEventSearchResp& from);
  void MergeFrom(const LinkEventSearchResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkEventSearchResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkEventSearchResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkHandleEventReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkHandleEventReq) */ {
 public:
  LinkHandleEventReq();
  virtual ~LinkHandleEventReq();

  LinkHandleEventReq(const LinkHandleEventReq& from);

  inline LinkHandleEventReq& operator=(const LinkHandleEventReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkHandleEventReq& default_instance();

  static inline const LinkHandleEventReq* internal_default_instance() {
    return reinterpret_cast<const LinkHandleEventReq*>(
               &_LinkHandleEventReq_default_instance_);
  }

  void Swap(LinkHandleEventReq* other);

  // implements Message ----------------------------------------------

  inline LinkHandleEventReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkHandleEventReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkHandleEventReq& from);
  void MergeFrom(const LinkHandleEventReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkHandleEventReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkHandleEventReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkHandleEventResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkHandleEventResp) */ {
 public:
  LinkHandleEventResp();
  virtual ~LinkHandleEventResp();

  LinkHandleEventResp(const LinkHandleEventResp& from);

  inline LinkHandleEventResp& operator=(const LinkHandleEventResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkHandleEventResp& default_instance();

  static inline const LinkHandleEventResp* internal_default_instance() {
    return reinterpret_cast<const LinkHandleEventResp*>(
               &_LinkHandleEventResp_default_instance_);
  }

  void Swap(LinkHandleEventResp* other);

  // implements Message ----------------------------------------------

  inline LinkHandleEventResp* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkHandleEventResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkHandleEventResp& from);
  void MergeFrom(const LinkHandleEventResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkHandleEventResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool bSuccess = 1;
  void clear_bsuccess();
  static const int kBSuccessFieldNumber = 1;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  // @@protoc_insertion_point(class_scope:LinkHandleEventResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool bsuccess_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkCamAddNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkCamAddNotify) */ {
 public:
  LinkCamAddNotify();
  virtual ~LinkCamAddNotify();

  LinkCamAddNotify(const LinkCamAddNotify& from);

  inline LinkCamAddNotify& operator=(const LinkCamAddNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCamAddNotify& default_instance();

  static inline const LinkCamAddNotify* internal_default_instance() {
    return reinterpret_cast<const LinkCamAddNotify*>(
               &_LinkCamAddNotify_default_instance_);
  }

  void Swap(LinkCamAddNotify* other);

  // implements Message ----------------------------------------------

  inline LinkCamAddNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCamAddNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCamAddNotify& from);
  void MergeFrom(const LinkCamAddNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCamAddNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidCamera cCam = 1;
  bool has_ccam() const;
  void clear_ccam();
  static const int kCCamFieldNumber = 1;
  const ::VidCamera& ccam() const;
  ::VidCamera* mutable_ccam();
  ::VidCamera* release_ccam();
  void set_allocated_ccam(::VidCamera* ccam);

  // @@protoc_insertion_point(class_scope:LinkCamAddNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidCamera* ccam_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkCamIdNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkCamIdNotify) */ {
 public:
  LinkCamIdNotify();
  virtual ~LinkCamIdNotify();

  LinkCamIdNotify(const LinkCamIdNotify& from);

  inline LinkCamIdNotify& operator=(const LinkCamIdNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCamIdNotify& default_instance();

  static inline const LinkCamIdNotify* internal_default_instance() {
    return reinterpret_cast<const LinkCamIdNotify*>(
               &_LinkCamIdNotify_default_instance_);
  }

  void Swap(LinkCamIdNotify* other);

  // implements Message ----------------------------------------------

  inline LinkCamIdNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCamIdNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCamIdNotify& from);
  void MergeFrom(const LinkCamIdNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCamIdNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // @@protoc_insertion_point(class_scope:LinkCamIdNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkCamSearchedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkCamSearchedNotify) */ {
 public:
  LinkCamSearchedNotify();
  virtual ~LinkCamSearchedNotify();

  LinkCamSearchedNotify(const LinkCamSearchedNotify& from);

  inline LinkCamSearchedNotify& operator=(const LinkCamSearchedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkCamSearchedNotify& default_instance();

  static inline const LinkCamSearchedNotify* internal_default_instance() {
    return reinterpret_cast<const LinkCamSearchedNotify*>(
               &_LinkCamSearchedNotify_default_instance_);
  }

  void Swap(LinkCamSearchedNotify* other);

  // implements Message ----------------------------------------------

  inline LinkCamSearchedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkCamSearchedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkCamSearchedNotify& from);
  void MergeFrom(const LinkCamSearchedNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkCamSearchedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strIp = 1;
  void clear_strip();
  static const int kStrIpFieldNumber = 1;
  const ::std::string& strip() const;
  void set_strip(const ::std::string& value);
  #if LANG_CXX11
  void set_strip(::std::string&& value);
  #endif
  void set_strip(const char* value);
  void set_strip(const char* value, size_t size);
  ::std::string* mutable_strip();
  ::std::string* release_strip();
  void set_allocated_strip(::std::string* strip);

  // string strPort = 2;
  void clear_strport();
  static const int kStrPortFieldNumber = 2;
  const ::std::string& strport() const;
  void set_strport(const ::std::string& value);
  #if LANG_CXX11
  void set_strport(::std::string&& value);
  #endif
  void set_strport(const char* value);
  void set_strport(const char* value, size_t size);
  ::std::string* mutable_strport();
  ::std::string* release_strport();
  void set_allocated_strport(::std::string* strport);

  // string strModel = 3;
  void clear_strmodel();
  static const int kStrModelFieldNumber = 3;
  const ::std::string& strmodel() const;
  void set_strmodel(const ::std::string& value);
  #if LANG_CXX11
  void set_strmodel(::std::string&& value);
  #endif
  void set_strmodel(const char* value);
  void set_strmodel(const char* value, size_t size);
  ::std::string* mutable_strmodel();
  ::std::string* release_strmodel();
  void set_allocated_strmodel(::std::string* strmodel);

  // string strONVIFAddress = 4;
  void clear_stronvifaddress();
  static const int kStrONVIFAddressFieldNumber = 4;
  const ::std::string& stronvifaddress() const;
  void set_stronvifaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_stronvifaddress(::std::string&& value);
  #endif
  void set_stronvifaddress(const char* value);
  void set_stronvifaddress(const char* value, size_t size);
  ::std::string* mutable_stronvifaddress();
  ::std::string* release_stronvifaddress();
  void set_allocated_stronvifaddress(::std::string* stronvifaddress);

  // @@protoc_insertion_point(class_scope:LinkCamSearchedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strip_;
  ::google::protobuf::internal::ArenaStringPtr strport_;
  ::google::protobuf::internal::ArenaStringPtr strmodel_;
  ::google::protobuf::internal::ArenaStringPtr stronvifaddress_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API LinkEventNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinkEventNotify) */ {
 public:
  LinkEventNotify();
  virtual ~LinkEventNotify();

  LinkEventNotify(const LinkEventNotify& from);

  inline LinkEventNotify& operator=(const LinkEventNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkEventNotify& default_instance();

  static inline const LinkEventNotify* internal_default_instance() {
    return reinterpret_cast<const LinkEventNotify*>(
               &_LinkEventNotify_default_instance_);
  }

  void Swap(LinkEventNotify* other);

  // implements Message ----------------------------------------------

  inline LinkEventNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LinkEventNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LinkEventNotify& from);
  void MergeFrom(const LinkEventNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LinkEventNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidEvent cEvent = 1;
  bool has_cevent() const;
  void clear_cevent();
  static const int kCEventFieldNumber = 1;
  const ::VidEvent& cevent() const;
  ::VidEvent* mutable_cevent();
  ::VidEvent* release_cevent();
  void set_allocated_cevent(::VidEvent* cevent);

  // @@protoc_insertion_point(class_scope:LinkEventNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidEvent* cevent_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_linksystem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LinkLoginReq

// string strUserName = 1;
inline void LinkLoginReq::clear_strusername() {
  strusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkLoginReq::strusername() const {
  // @@protoc_insertion_point(field_get:LinkLoginReq.strUserName)
  return strusername_.GetNoArena();
}
inline void LinkLoginReq::set_strusername(const ::std::string& value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkLoginReq.strUserName)
}
#if LANG_CXX11
inline void LinkLoginReq::set_strusername(::std::string&& value) {
  
  strusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkLoginReq.strUserName)
}
#endif
inline void LinkLoginReq::set_strusername(const char* value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkLoginReq.strUserName)
}
inline void LinkLoginReq::set_strusername(const char* value, size_t size) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkLoginReq.strUserName)
}
inline ::std::string* LinkLoginReq::mutable_strusername() {
  
  // @@protoc_insertion_point(field_mutable:LinkLoginReq.strUserName)
  return strusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkLoginReq::release_strusername() {
  // @@protoc_insertion_point(field_release:LinkLoginReq.strUserName)
  
  return strusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkLoginReq::set_allocated_strusername(::std::string* strusername) {
  if (strusername != NULL) {
    
  } else {
    
  }
  strusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strusername);
  // @@protoc_insertion_point(field_set_allocated:LinkLoginReq.strUserName)
}

// string strPasswd = 2;
inline void LinkLoginReq::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkLoginReq::strpasswd() const {
  // @@protoc_insertion_point(field_get:LinkLoginReq.strPasswd)
  return strpasswd_.GetNoArena();
}
inline void LinkLoginReq::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkLoginReq.strPasswd)
}
#if LANG_CXX11
inline void LinkLoginReq::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkLoginReq.strPasswd)
}
#endif
inline void LinkLoginReq::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkLoginReq.strPasswd)
}
inline void LinkLoginReq::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkLoginReq.strPasswd)
}
inline ::std::string* LinkLoginReq::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:LinkLoginReq.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkLoginReq::release_strpasswd() {
  // @@protoc_insertion_point(field_release:LinkLoginReq.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkLoginReq::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:LinkLoginReq.strPasswd)
}

// -------------------------------------------------------------------

// LinkLoginResp

// string strNonce = 1;
inline void LinkLoginResp::clear_strnonce() {
  strnonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkLoginResp::strnonce() const {
  // @@protoc_insertion_point(field_get:LinkLoginResp.strNonce)
  return strnonce_.GetNoArena();
}
inline void LinkLoginResp::set_strnonce(const ::std::string& value) {
  
  strnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkLoginResp.strNonce)
}
#if LANG_CXX11
inline void LinkLoginResp::set_strnonce(::std::string&& value) {
  
  strnonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkLoginResp.strNonce)
}
#endif
inline void LinkLoginResp::set_strnonce(const char* value) {
  
  strnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkLoginResp.strNonce)
}
inline void LinkLoginResp::set_strnonce(const char* value, size_t size) {
  
  strnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkLoginResp.strNonce)
}
inline ::std::string* LinkLoginResp::mutable_strnonce() {
  
  // @@protoc_insertion_point(field_mutable:LinkLoginResp.strNonce)
  return strnonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkLoginResp::release_strnonce() {
  // @@protoc_insertion_point(field_release:LinkLoginResp.strNonce)
  
  return strnonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkLoginResp::set_allocated_strnonce(::std::string* strnonce) {
  if (strnonce != NULL) {
    
  } else {
    
  }
  strnonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strnonce);
  // @@protoc_insertion_point(field_set_allocated:LinkLoginResp.strNonce)
}

// bool bRetNonce = 2;
inline void LinkLoginResp::clear_bretnonce() {
  bretnonce_ = false;
}
inline bool LinkLoginResp::bretnonce() const {
  // @@protoc_insertion_point(field_get:LinkLoginResp.bRetNonce)
  return bretnonce_;
}
inline void LinkLoginResp::set_bretnonce(bool value) {
  
  bretnonce_ = value;
  // @@protoc_insertion_point(field_set:LinkLoginResp.bRetNonce)
}

// bool bRet = 3;
inline void LinkLoginResp::clear_bret() {
  bret_ = false;
}
inline bool LinkLoginResp::bret() const {
  // @@protoc_insertion_point(field_get:LinkLoginResp.bRet)
  return bret_;
}
inline void LinkLoginResp::set_bret(bool value) {
  
  bret_ = value;
  // @@protoc_insertion_point(field_set:LinkLoginResp.bRet)
}

// -------------------------------------------------------------------

// LinkKeepaliveReq

// int32 nKeepalive = 1;
inline void LinkKeepaliveReq::clear_nkeepalive() {
  nkeepalive_ = 0;
}
inline ::google::protobuf::int32 LinkKeepaliveReq::nkeepalive() const {
  // @@protoc_insertion_point(field_get:LinkKeepaliveReq.nKeepalive)
  return nkeepalive_;
}
inline void LinkKeepaliveReq::set_nkeepalive(::google::protobuf::int32 value) {
  
  nkeepalive_ = value;
  // @@protoc_insertion_point(field_set:LinkKeepaliveReq.nKeepalive)
}

// -------------------------------------------------------------------

// LinkKeepaliveResp

// int32 nKeepalive = 1;
inline void LinkKeepaliveResp::clear_nkeepalive() {
  nkeepalive_ = 0;
}
inline ::google::protobuf::int32 LinkKeepaliveResp::nkeepalive() const {
  // @@protoc_insertion_point(field_get:LinkKeepaliveResp.nKeepalive)
  return nkeepalive_;
}
inline void LinkKeepaliveResp::set_nkeepalive(::google::protobuf::int32 value) {
  
  nkeepalive_ = value;
  // @@protoc_insertion_point(field_set:LinkKeepaliveResp.nKeepalive)
}

// -------------------------------------------------------------------

// LinkRegNotifyReq

// string strFake = 1;
inline void LinkRegNotifyReq::clear_strfake() {
  strfake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkRegNotifyReq::strfake() const {
  // @@protoc_insertion_point(field_get:LinkRegNotifyReq.strFake)
  return strfake_.GetNoArena();
}
inline void LinkRegNotifyReq::set_strfake(const ::std::string& value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkRegNotifyReq.strFake)
}
#if LANG_CXX11
inline void LinkRegNotifyReq::set_strfake(::std::string&& value) {
  
  strfake_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkRegNotifyReq.strFake)
}
#endif
inline void LinkRegNotifyReq::set_strfake(const char* value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkRegNotifyReq.strFake)
}
inline void LinkRegNotifyReq::set_strfake(const char* value, size_t size) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkRegNotifyReq.strFake)
}
inline ::std::string* LinkRegNotifyReq::mutable_strfake() {
  
  // @@protoc_insertion_point(field_mutable:LinkRegNotifyReq.strFake)
  return strfake_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkRegNotifyReq::release_strfake() {
  // @@protoc_insertion_point(field_release:LinkRegNotifyReq.strFake)
  
  return strfake_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkRegNotifyReq::set_allocated_strfake(::std::string* strfake) {
  if (strfake != NULL) {
    
  } else {
    
  }
  strfake_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfake);
  // @@protoc_insertion_point(field_set_allocated:LinkRegNotifyReq.strFake)
}

// -------------------------------------------------------------------

// LinkRegNotifyResp

// bool bSuccess = 1;
inline void LinkRegNotifyResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkRegNotifyResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkRegNotifyResp.bSuccess)
  return bsuccess_;
}
inline void LinkRegNotifyResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkRegNotifyResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkListCamReq

// bool bAll = 1;
inline void LinkListCamReq::clear_ball() {
  ball_ = false;
}
inline bool LinkListCamReq::ball() const {
  // @@protoc_insertion_point(field_get:LinkListCamReq.bAll)
  return ball_;
}
inline void LinkListCamReq::set_ball(bool value) {
  
  ball_ = value;
  // @@protoc_insertion_point(field_set:LinkListCamReq.bAll)
}

// -------------------------------------------------------------------

// LinkListCamResp

// .VidCameraList cList = 1;
inline bool LinkListCamResp::has_clist() const {
  return this != internal_default_instance() && clist_ != NULL;
}
inline void LinkListCamResp::clear_clist() {
  if (GetArenaNoVirtual() == NULL && clist_ != NULL) delete clist_;
  clist_ = NULL;
}
inline const ::VidCameraList& LinkListCamResp::clist() const {
  // @@protoc_insertion_point(field_get:LinkListCamResp.cList)
  return clist_ != NULL ? *clist_
                         : *::VidCameraList::internal_default_instance();
}
inline ::VidCameraList* LinkListCamResp::mutable_clist() {
  
  if (clist_ == NULL) {
    clist_ = new ::VidCameraList;
  }
  // @@protoc_insertion_point(field_mutable:LinkListCamResp.cList)
  return clist_;
}
inline ::VidCameraList* LinkListCamResp::release_clist() {
  // @@protoc_insertion_point(field_release:LinkListCamResp.cList)
  
  ::VidCameraList* temp = clist_;
  clist_ = NULL;
  return temp;
}
inline void LinkListCamResp::set_allocated_clist(::VidCameraList* clist) {
  delete clist_;
  clist_ = clist;
  if (clist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkListCamResp.cList)
}

// -------------------------------------------------------------------

// LinkCamReq

// string strId = 1;
inline void LinkCamReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkCamReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkCamReq.strId)
  return strid_.GetNoArena();
}
inline void LinkCamReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkCamReq.strId)
}
#if LANG_CXX11
inline void LinkCamReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkCamReq.strId)
}
#endif
inline void LinkCamReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkCamReq.strId)
}
inline void LinkCamReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkCamReq.strId)
}
inline ::std::string* LinkCamReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkCamReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkCamReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkCamReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkCamReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkCamReq.strId)
}

// -------------------------------------------------------------------

// LinkCamResp

// .VidCamera cCam = 1;
inline bool LinkCamResp::has_ccam() const {
  return this != internal_default_instance() && ccam_ != NULL;
}
inline void LinkCamResp::clear_ccam() {
  if (GetArenaNoVirtual() == NULL && ccam_ != NULL) delete ccam_;
  ccam_ = NULL;
}
inline const ::VidCamera& LinkCamResp::ccam() const {
  // @@protoc_insertion_point(field_get:LinkCamResp.cCam)
  return ccam_ != NULL ? *ccam_
                         : *::VidCamera::internal_default_instance();
}
inline ::VidCamera* LinkCamResp::mutable_ccam() {
  
  if (ccam_ == NULL) {
    ccam_ = new ::VidCamera;
  }
  // @@protoc_insertion_point(field_mutable:LinkCamResp.cCam)
  return ccam_;
}
inline ::VidCamera* LinkCamResp::release_ccam() {
  // @@protoc_insertion_point(field_release:LinkCamResp.cCam)
  
  ::VidCamera* temp = ccam_;
  ccam_ = NULL;
  return temp;
}
inline void LinkCamResp::set_allocated_ccam(::VidCamera* ccam) {
  delete ccam_;
  ccam_ = ccam;
  if (ccam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkCamResp.cCam)
}

// -------------------------------------------------------------------

// LinkAddCamReq

// .VidCamera cCam = 1;
inline bool LinkAddCamReq::has_ccam() const {
  return this != internal_default_instance() && ccam_ != NULL;
}
inline void LinkAddCamReq::clear_ccam() {
  if (GetArenaNoVirtual() == NULL && ccam_ != NULL) delete ccam_;
  ccam_ = NULL;
}
inline const ::VidCamera& LinkAddCamReq::ccam() const {
  // @@protoc_insertion_point(field_get:LinkAddCamReq.cCam)
  return ccam_ != NULL ? *ccam_
                         : *::VidCamera::internal_default_instance();
}
inline ::VidCamera* LinkAddCamReq::mutable_ccam() {
  
  if (ccam_ == NULL) {
    ccam_ = new ::VidCamera;
  }
  // @@protoc_insertion_point(field_mutable:LinkAddCamReq.cCam)
  return ccam_;
}
inline ::VidCamera* LinkAddCamReq::release_ccam() {
  // @@protoc_insertion_point(field_release:LinkAddCamReq.cCam)
  
  ::VidCamera* temp = ccam_;
  ccam_ = NULL;
  return temp;
}
inline void LinkAddCamReq::set_allocated_ccam(::VidCamera* ccam) {
  delete ccam_;
  ccam_ = ccam;
  if (ccam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkAddCamReq.cCam)
}

// -------------------------------------------------------------------

// LinkAddCamResp

// bool bSuccess = 1;
inline void LinkAddCamResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkAddCamResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkAddCamResp.bSuccess)
  return bsuccess_;
}
inline void LinkAddCamResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkAddCamResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkDelCamReq

// string strId = 1;
inline void LinkDelCamReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkDelCamReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkDelCamReq.strId)
  return strid_.GetNoArena();
}
inline void LinkDelCamReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkDelCamReq.strId)
}
#if LANG_CXX11
inline void LinkDelCamReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkDelCamReq.strId)
}
#endif
inline void LinkDelCamReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkDelCamReq.strId)
}
inline void LinkDelCamReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkDelCamReq.strId)
}
inline ::std::string* LinkDelCamReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkDelCamReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkDelCamReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkDelCamReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkDelCamReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkDelCamReq.strId)
}

// -------------------------------------------------------------------

// LinkDelCamResp

// bool bSuccess = 1;
inline void LinkDelCamResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkDelCamResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkDelCamResp.bSuccess)
  return bsuccess_;
}
inline void LinkDelCamResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkDelCamResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkSetCamSchedReq

// .VidCamera cCam = 1;
inline bool LinkSetCamSchedReq::has_ccam() const {
  return this != internal_default_instance() && ccam_ != NULL;
}
inline void LinkSetCamSchedReq::clear_ccam() {
  if (GetArenaNoVirtual() == NULL && ccam_ != NULL) delete ccam_;
  ccam_ = NULL;
}
inline const ::VidCamera& LinkSetCamSchedReq::ccam() const {
  // @@protoc_insertion_point(field_get:LinkSetCamSchedReq.cCam)
  return ccam_ != NULL ? *ccam_
                         : *::VidCamera::internal_default_instance();
}
inline ::VidCamera* LinkSetCamSchedReq::mutable_ccam() {
  
  if (ccam_ == NULL) {
    ccam_ = new ::VidCamera;
  }
  // @@protoc_insertion_point(field_mutable:LinkSetCamSchedReq.cCam)
  return ccam_;
}
inline ::VidCamera* LinkSetCamSchedReq::release_ccam() {
  // @@protoc_insertion_point(field_release:LinkSetCamSchedReq.cCam)
  
  ::VidCamera* temp = ccam_;
  ccam_ = NULL;
  return temp;
}
inline void LinkSetCamSchedReq::set_allocated_ccam(::VidCamera* ccam) {
  delete ccam_;
  ccam_ = ccam;
  if (ccam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkSetCamSchedReq.cCam)
}

// -------------------------------------------------------------------

// LinkSetCamSchedResp

// bool bSuccess = 1;
inline void LinkSetCamSchedResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkSetCamSchedResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkSetCamSchedResp.bSuccess)
  return bsuccess_;
}
inline void LinkSetCamSchedResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkSetCamSchedResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkGetStreamListReq

// string strId = 1;
inline void LinkGetStreamListReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetStreamListReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkGetStreamListReq.strId)
  return strid_.GetNoArena();
}
inline void LinkGetStreamListReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetStreamListReq.strId)
}
#if LANG_CXX11
inline void LinkGetStreamListReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetStreamListReq.strId)
}
#endif
inline void LinkGetStreamListReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetStreamListReq.strId)
}
inline void LinkGetStreamListReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetStreamListReq.strId)
}
inline ::std::string* LinkGetStreamListReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetStreamListReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetStreamListReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkGetStreamListReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetStreamListReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkGetStreamListReq.strId)
}

// -------------------------------------------------------------------

// LinkGetStreamListResp

// .VidStreamList cList = 1;
inline bool LinkGetStreamListResp::has_clist() const {
  return this != internal_default_instance() && clist_ != NULL;
}
inline void LinkGetStreamListResp::clear_clist() {
  if (GetArenaNoVirtual() == NULL && clist_ != NULL) delete clist_;
  clist_ = NULL;
}
inline const ::VidStreamList& LinkGetStreamListResp::clist() const {
  // @@protoc_insertion_point(field_get:LinkGetStreamListResp.cList)
  return clist_ != NULL ? *clist_
                         : *::VidStreamList::internal_default_instance();
}
inline ::VidStreamList* LinkGetStreamListResp::mutable_clist() {
  
  if (clist_ == NULL) {
    clist_ = new ::VidStreamList;
  }
  // @@protoc_insertion_point(field_mutable:LinkGetStreamListResp.cList)
  return clist_;
}
inline ::VidStreamList* LinkGetStreamListResp::release_clist() {
  // @@protoc_insertion_point(field_release:LinkGetStreamListResp.cList)
  
  ::VidStreamList* temp = clist_;
  clist_ = NULL;
  return temp;
}
inline void LinkGetStreamListResp::set_allocated_clist(::VidStreamList* clist) {
  delete clist_;
  clist_ = clist;
  if (clist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkGetStreamListResp.cList)
}

// -------------------------------------------------------------------

// LinkVidDiskListReq

// bool bAll = 1;
inline void LinkVidDiskListReq::clear_ball() {
  ball_ = false;
}
inline bool LinkVidDiskListReq::ball() const {
  // @@protoc_insertion_point(field_get:LinkVidDiskListReq.bAll)
  return ball_;
}
inline void LinkVidDiskListReq::set_ball(bool value) {
  
  ball_ = value;
  // @@protoc_insertion_point(field_set:LinkVidDiskListReq.bAll)
}

// -------------------------------------------------------------------

// LinkVidDiskListResp

// .VidDiskList cDisk = 1;
inline bool LinkVidDiskListResp::has_cdisk() const {
  return this != internal_default_instance() && cdisk_ != NULL;
}
inline void LinkVidDiskListResp::clear_cdisk() {
  if (GetArenaNoVirtual() == NULL && cdisk_ != NULL) delete cdisk_;
  cdisk_ = NULL;
}
inline const ::VidDiskList& LinkVidDiskListResp::cdisk() const {
  // @@protoc_insertion_point(field_get:LinkVidDiskListResp.cDisk)
  return cdisk_ != NULL ? *cdisk_
                         : *::VidDiskList::internal_default_instance();
}
inline ::VidDiskList* LinkVidDiskListResp::mutable_cdisk() {
  
  if (cdisk_ == NULL) {
    cdisk_ = new ::VidDiskList;
  }
  // @@protoc_insertion_point(field_mutable:LinkVidDiskListResp.cDisk)
  return cdisk_;
}
inline ::VidDiskList* LinkVidDiskListResp::release_cdisk() {
  // @@protoc_insertion_point(field_release:LinkVidDiskListResp.cDisk)
  
  ::VidDiskList* temp = cdisk_;
  cdisk_ = NULL;
  return temp;
}
inline void LinkVidDiskListResp::set_allocated_cdisk(::VidDiskList* cdisk) {
  delete cdisk_;
  cdisk_ = cdisk;
  if (cdisk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkVidDiskListResp.cDisk)
}

// -------------------------------------------------------------------

// LinkSysVidDiskListReq

// bool bAll = 1;
inline void LinkSysVidDiskListReq::clear_ball() {
  ball_ = false;
}
inline bool LinkSysVidDiskListReq::ball() const {
  // @@protoc_insertion_point(field_get:LinkSysVidDiskListReq.bAll)
  return ball_;
}
inline void LinkSysVidDiskListReq::set_ball(bool value) {
  
  ball_ = value;
  // @@protoc_insertion_point(field_set:LinkSysVidDiskListReq.bAll)
}

// -------------------------------------------------------------------

// LinkSysVidDiskListResp

// .VidDiskList cDisk = 1;
inline bool LinkSysVidDiskListResp::has_cdisk() const {
  return this != internal_default_instance() && cdisk_ != NULL;
}
inline void LinkSysVidDiskListResp::clear_cdisk() {
  if (GetArenaNoVirtual() == NULL && cdisk_ != NULL) delete cdisk_;
  cdisk_ = NULL;
}
inline const ::VidDiskList& LinkSysVidDiskListResp::cdisk() const {
  // @@protoc_insertion_point(field_get:LinkSysVidDiskListResp.cDisk)
  return cdisk_ != NULL ? *cdisk_
                         : *::VidDiskList::internal_default_instance();
}
inline ::VidDiskList* LinkSysVidDiskListResp::mutable_cdisk() {
  
  if (cdisk_ == NULL) {
    cdisk_ = new ::VidDiskList;
  }
  // @@protoc_insertion_point(field_mutable:LinkSysVidDiskListResp.cDisk)
  return cdisk_;
}
inline ::VidDiskList* LinkSysVidDiskListResp::release_cdisk() {
  // @@protoc_insertion_point(field_release:LinkSysVidDiskListResp.cDisk)
  
  ::VidDiskList* temp = cdisk_;
  cdisk_ = NULL;
  return temp;
}
inline void LinkSysVidDiskListResp::set_allocated_cdisk(::VidDiskList* cdisk) {
  delete cdisk_;
  cdisk_ = cdisk;
  if (cdisk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkSysVidDiskListResp.cDisk)
}

// -------------------------------------------------------------------

// LinkAddDiskReq

// .VidDisk cDisk = 1;
inline bool LinkAddDiskReq::has_cdisk() const {
  return this != internal_default_instance() && cdisk_ != NULL;
}
inline void LinkAddDiskReq::clear_cdisk() {
  if (GetArenaNoVirtual() == NULL && cdisk_ != NULL) delete cdisk_;
  cdisk_ = NULL;
}
inline const ::VidDisk& LinkAddDiskReq::cdisk() const {
  // @@protoc_insertion_point(field_get:LinkAddDiskReq.cDisk)
  return cdisk_ != NULL ? *cdisk_
                         : *::VidDisk::internal_default_instance();
}
inline ::VidDisk* LinkAddDiskReq::mutable_cdisk() {
  
  if (cdisk_ == NULL) {
    cdisk_ = new ::VidDisk;
  }
  // @@protoc_insertion_point(field_mutable:LinkAddDiskReq.cDisk)
  return cdisk_;
}
inline ::VidDisk* LinkAddDiskReq::release_cdisk() {
  // @@protoc_insertion_point(field_release:LinkAddDiskReq.cDisk)
  
  ::VidDisk* temp = cdisk_;
  cdisk_ = NULL;
  return temp;
}
inline void LinkAddDiskReq::set_allocated_cdisk(::VidDisk* cdisk) {
  delete cdisk_;
  cdisk_ = cdisk;
  if (cdisk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkAddDiskReq.cDisk)
}

// -------------------------------------------------------------------

// LinkAddDiskResp

// bool bSuccess = 1;
inline void LinkAddDiskResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkAddDiskResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkAddDiskResp.bSuccess)
  return bsuccess_;
}
inline void LinkAddDiskResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkAddDiskResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkDelDiskReq

// string strId = 1;
inline void LinkDelDiskReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkDelDiskReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkDelDiskReq.strId)
  return strid_.GetNoArena();
}
inline void LinkDelDiskReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkDelDiskReq.strId)
}
#if LANG_CXX11
inline void LinkDelDiskReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkDelDiskReq.strId)
}
#endif
inline void LinkDelDiskReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkDelDiskReq.strId)
}
inline void LinkDelDiskReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkDelDiskReq.strId)
}
inline ::std::string* LinkDelDiskReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkDelDiskReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkDelDiskReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkDelDiskReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkDelDiskReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkDelDiskReq.strId)
}

// -------------------------------------------------------------------

// LinkDelDiskResp

// bool bSuccess = 1;
inline void LinkDelDiskResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkDelDiskResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkDelDiskResp.bSuccess)
  return bsuccess_;
}
inline void LinkDelDiskResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkDelDiskResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkUpdateDiskLimitReq

// string strId = 1;
inline void LinkUpdateDiskLimitReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkUpdateDiskLimitReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkUpdateDiskLimitReq.strId)
  return strid_.GetNoArena();
}
inline void LinkUpdateDiskLimitReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkUpdateDiskLimitReq.strId)
}
#if LANG_CXX11
inline void LinkUpdateDiskLimitReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkUpdateDiskLimitReq.strId)
}
#endif
inline void LinkUpdateDiskLimitReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkUpdateDiskLimitReq.strId)
}
inline void LinkUpdateDiskLimitReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkUpdateDiskLimitReq.strId)
}
inline ::std::string* LinkUpdateDiskLimitReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkUpdateDiskLimitReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkUpdateDiskLimitReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkUpdateDiskLimitReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkUpdateDiskLimitReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkUpdateDiskLimitReq.strId)
}

// int64 nLimit = 2;
inline void LinkUpdateDiskLimitReq::clear_nlimit() {
  nlimit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LinkUpdateDiskLimitReq::nlimit() const {
  // @@protoc_insertion_point(field_get:LinkUpdateDiskLimitReq.nLimit)
  return nlimit_;
}
inline void LinkUpdateDiskLimitReq::set_nlimit(::google::protobuf::int64 value) {
  
  nlimit_ = value;
  // @@protoc_insertion_point(field_set:LinkUpdateDiskLimitReq.nLimit)
}

// -------------------------------------------------------------------

// LinkUpdateDiskLimitResp

// bool bSuccess = 1;
inline void LinkUpdateDiskLimitResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkUpdateDiskLimitResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkUpdateDiskLimitResp.bSuccess)
  return bsuccess_;
}
inline void LinkUpdateDiskLimitResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkUpdateDiskLimitResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkGetLicReq

// string strFake = 1;
inline void LinkGetLicReq::clear_strfake() {
  strfake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetLicReq::strfake() const {
  // @@protoc_insertion_point(field_get:LinkGetLicReq.strFake)
  return strfake_.GetNoArena();
}
inline void LinkGetLicReq::set_strfake(const ::std::string& value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicReq.strFake)
}
#if LANG_CXX11
inline void LinkGetLicReq::set_strfake(::std::string&& value) {
  
  strfake_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicReq.strFake)
}
#endif
inline void LinkGetLicReq::set_strfake(const char* value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicReq.strFake)
}
inline void LinkGetLicReq::set_strfake(const char* value, size_t size) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicReq.strFake)
}
inline ::std::string* LinkGetLicReq::mutable_strfake() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicReq.strFake)
  return strfake_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetLicReq::release_strfake() {
  // @@protoc_insertion_point(field_release:LinkGetLicReq.strFake)
  
  return strfake_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetLicReq::set_allocated_strfake(::std::string* strfake) {
  if (strfake != NULL) {
    
  } else {
    
  }
  strfake_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfake);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicReq.strFake)
}

// -------------------------------------------------------------------

// LinkGetLicResp

// string strLic = 1;
inline void LinkGetLicResp::clear_strlic() {
  strlic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetLicResp::strlic() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strLic)
  return strlic_.GetNoArena();
}
inline void LinkGetLicResp::set_strlic(const ::std::string& value) {
  
  strlic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strLic)
}
#if LANG_CXX11
inline void LinkGetLicResp::set_strlic(::std::string&& value) {
  
  strlic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strLic)
}
#endif
inline void LinkGetLicResp::set_strlic(const char* value) {
  
  strlic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strLic)
}
inline void LinkGetLicResp::set_strlic(const char* value, size_t size) {
  
  strlic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strLic)
}
inline ::std::string* LinkGetLicResp::mutable_strlic() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strLic)
  return strlic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetLicResp::release_strlic() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strLic)
  
  return strlic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetLicResp::set_allocated_strlic(::std::string* strlic) {
  if (strlic != NULL) {
    
  } else {
    
  }
  strlic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strlic);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strLic)
}

// string strHostId = 2;
inline void LinkGetLicResp::clear_strhostid() {
  strhostid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetLicResp::strhostid() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strHostId)
  return strhostid_.GetNoArena();
}
inline void LinkGetLicResp::set_strhostid(const ::std::string& value) {
  
  strhostid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strHostId)
}
#if LANG_CXX11
inline void LinkGetLicResp::set_strhostid(::std::string&& value) {
  
  strhostid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strHostId)
}
#endif
inline void LinkGetLicResp::set_strhostid(const char* value) {
  
  strhostid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strHostId)
}
inline void LinkGetLicResp::set_strhostid(const char* value, size_t size) {
  
  strhostid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strHostId)
}
inline ::std::string* LinkGetLicResp::mutable_strhostid() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strHostId)
  return strhostid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetLicResp::release_strhostid() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strHostId)
  
  return strhostid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetLicResp::set_allocated_strhostid(::std::string* strhostid) {
  if (strhostid != NULL) {
    
  } else {
    
  }
  strhostid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strhostid);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strHostId)
}

// int32 nCh = 3;
inline void LinkGetLicResp::clear_nch() {
  nch_ = 0;
}
inline ::google::protobuf::int32 LinkGetLicResp::nch() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.nCh)
  return nch_;
}
inline void LinkGetLicResp::set_nch(::google::protobuf::int32 value) {
  
  nch_ = value;
  // @@protoc_insertion_point(field_set:LinkGetLicResp.nCh)
}

// string strType = 4;
inline void LinkGetLicResp::clear_strtype() {
  strtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetLicResp::strtype() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strType)
  return strtype_.GetNoArena();
}
inline void LinkGetLicResp::set_strtype(const ::std::string& value) {
  
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strType)
}
#if LANG_CXX11
inline void LinkGetLicResp::set_strtype(::std::string&& value) {
  
  strtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strType)
}
#endif
inline void LinkGetLicResp::set_strtype(const char* value) {
  
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strType)
}
inline void LinkGetLicResp::set_strtype(const char* value, size_t size) {
  
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strType)
}
inline ::std::string* LinkGetLicResp::mutable_strtype() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strType)
  return strtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetLicResp::release_strtype() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strType)
  
  return strtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetLicResp::set_allocated_strtype(::std::string* strtype) {
  if (strtype != NULL) {
    
  } else {
    
  }
  strtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtype);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strType)
}

// string strStartTime = 5;
inline void LinkGetLicResp::clear_strstarttime() {
  strstarttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetLicResp::strstarttime() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strStartTime)
  return strstarttime_.GetNoArena();
}
inline void LinkGetLicResp::set_strstarttime(const ::std::string& value) {
  
  strstarttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strStartTime)
}
#if LANG_CXX11
inline void LinkGetLicResp::set_strstarttime(::std::string&& value) {
  
  strstarttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strStartTime)
}
#endif
inline void LinkGetLicResp::set_strstarttime(const char* value) {
  
  strstarttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strStartTime)
}
inline void LinkGetLicResp::set_strstarttime(const char* value, size_t size) {
  
  strstarttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strStartTime)
}
inline ::std::string* LinkGetLicResp::mutable_strstarttime() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strStartTime)
  return strstarttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetLicResp::release_strstarttime() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strStartTime)
  
  return strstarttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetLicResp::set_allocated_strstarttime(::std::string* strstarttime) {
  if (strstarttime != NULL) {
    
  } else {
    
  }
  strstarttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strstarttime);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strStartTime)
}

// string strExpireTime = 6;
inline void LinkGetLicResp::clear_strexpiretime() {
  strexpiretime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetLicResp::strexpiretime() const {
  // @@protoc_insertion_point(field_get:LinkGetLicResp.strExpireTime)
  return strexpiretime_.GetNoArena();
}
inline void LinkGetLicResp::set_strexpiretime(const ::std::string& value) {
  
  strexpiretime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetLicResp.strExpireTime)
}
#if LANG_CXX11
inline void LinkGetLicResp::set_strexpiretime(::std::string&& value) {
  
  strexpiretime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetLicResp.strExpireTime)
}
#endif
inline void LinkGetLicResp::set_strexpiretime(const char* value) {
  
  strexpiretime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetLicResp.strExpireTime)
}
inline void LinkGetLicResp::set_strexpiretime(const char* value, size_t size) {
  
  strexpiretime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetLicResp.strExpireTime)
}
inline ::std::string* LinkGetLicResp::mutable_strexpiretime() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetLicResp.strExpireTime)
  return strexpiretime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetLicResp::release_strexpiretime() {
  // @@protoc_insertion_point(field_release:LinkGetLicResp.strExpireTime)
  
  return strexpiretime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetLicResp::set_allocated_strexpiretime(::std::string* strexpiretime) {
  if (strexpiretime != NULL) {
    
  } else {
    
  }
  strexpiretime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strexpiretime);
  // @@protoc_insertion_point(field_set_allocated:LinkGetLicResp.strExpireTime)
}

// -------------------------------------------------------------------

// LinkGetVerReq

// string strFake = 1;
inline void LinkGetVerReq::clear_strfake() {
  strfake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetVerReq::strfake() const {
  // @@protoc_insertion_point(field_get:LinkGetVerReq.strFake)
  return strfake_.GetNoArena();
}
inline void LinkGetVerReq::set_strfake(const ::std::string& value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetVerReq.strFake)
}
#if LANG_CXX11
inline void LinkGetVerReq::set_strfake(::std::string&& value) {
  
  strfake_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetVerReq.strFake)
}
#endif
inline void LinkGetVerReq::set_strfake(const char* value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetVerReq.strFake)
}
inline void LinkGetVerReq::set_strfake(const char* value, size_t size) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetVerReq.strFake)
}
inline ::std::string* LinkGetVerReq::mutable_strfake() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetVerReq.strFake)
  return strfake_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetVerReq::release_strfake() {
  // @@protoc_insertion_point(field_release:LinkGetVerReq.strFake)
  
  return strfake_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetVerReq::set_allocated_strfake(::std::string* strfake) {
  if (strfake != NULL) {
    
  } else {
    
  }
  strfake_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfake);
  // @@protoc_insertion_point(field_set_allocated:LinkGetVerReq.strFake)
}

// -------------------------------------------------------------------

// LinkGetVerResp

// string strVer = 1;
inline void LinkGetVerResp::clear_strver() {
  strver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetVerResp::strver() const {
  // @@protoc_insertion_point(field_get:LinkGetVerResp.strVer)
  return strver_.GetNoArena();
}
inline void LinkGetVerResp::set_strver(const ::std::string& value) {
  
  strver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetVerResp.strVer)
}
#if LANG_CXX11
inline void LinkGetVerResp::set_strver(::std::string&& value) {
  
  strver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetVerResp.strVer)
}
#endif
inline void LinkGetVerResp::set_strver(const char* value) {
  
  strver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetVerResp.strVer)
}
inline void LinkGetVerResp::set_strver(const char* value, size_t size) {
  
  strver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetVerResp.strVer)
}
inline ::std::string* LinkGetVerResp::mutable_strver() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetVerResp.strVer)
  return strver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetVerResp::release_strver() {
  // @@protoc_insertion_point(field_release:LinkGetVerResp.strVer)
  
  return strver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetVerResp::set_allocated_strver(::std::string* strver) {
  if (strver != NULL) {
    
  } else {
    
  }
  strver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strver);
  // @@protoc_insertion_point(field_set_allocated:LinkGetVerResp.strVer)
}

// string strInfo = 2;
inline void LinkGetVerResp::clear_strinfo() {
  strinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkGetVerResp::strinfo() const {
  // @@protoc_insertion_point(field_get:LinkGetVerResp.strInfo)
  return strinfo_.GetNoArena();
}
inline void LinkGetVerResp::set_strinfo(const ::std::string& value) {
  
  strinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkGetVerResp.strInfo)
}
#if LANG_CXX11
inline void LinkGetVerResp::set_strinfo(::std::string&& value) {
  
  strinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkGetVerResp.strInfo)
}
#endif
inline void LinkGetVerResp::set_strinfo(const char* value) {
  
  strinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkGetVerResp.strInfo)
}
inline void LinkGetVerResp::set_strinfo(const char* value, size_t size) {
  
  strinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkGetVerResp.strInfo)
}
inline ::std::string* LinkGetVerResp::mutable_strinfo() {
  
  // @@protoc_insertion_point(field_mutable:LinkGetVerResp.strInfo)
  return strinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkGetVerResp::release_strinfo() {
  // @@protoc_insertion_point(field_release:LinkGetVerResp.strInfo)
  
  return strinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkGetVerResp::set_allocated_strinfo(::std::string* strinfo) {
  if (strinfo != NULL) {
    
  } else {
    
  }
  strinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strinfo);
  // @@protoc_insertion_point(field_set_allocated:LinkGetVerResp.strInfo)
}

// -------------------------------------------------------------------

// LinkConfLicReq

// string strLic = 1;
inline void LinkConfLicReq::clear_strlic() {
  strlic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkConfLicReq::strlic() const {
  // @@protoc_insertion_point(field_get:LinkConfLicReq.strLic)
  return strlic_.GetNoArena();
}
inline void LinkConfLicReq::set_strlic(const ::std::string& value) {
  
  strlic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkConfLicReq.strLic)
}
#if LANG_CXX11
inline void LinkConfLicReq::set_strlic(::std::string&& value) {
  
  strlic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkConfLicReq.strLic)
}
#endif
inline void LinkConfLicReq::set_strlic(const char* value) {
  
  strlic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkConfLicReq.strLic)
}
inline void LinkConfLicReq::set_strlic(const char* value, size_t size) {
  
  strlic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkConfLicReq.strLic)
}
inline ::std::string* LinkConfLicReq::mutable_strlic() {
  
  // @@protoc_insertion_point(field_mutable:LinkConfLicReq.strLic)
  return strlic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkConfLicReq::release_strlic() {
  // @@protoc_insertion_point(field_release:LinkConfLicReq.strLic)
  
  return strlic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkConfLicReq::set_allocated_strlic(::std::string* strlic) {
  if (strlic != NULL) {
    
  } else {
    
  }
  strlic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strlic);
  // @@protoc_insertion_point(field_set_allocated:LinkConfLicReq.strLic)
}

// -------------------------------------------------------------------

// LinkConfLicResp

// bool bSuccess = 1;
inline void LinkConfLicResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkConfLicResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkConfLicResp.bSuccess)
  return bsuccess_;
}
inline void LinkConfLicResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkConfLicResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkAddUserReq

// string strUser = 1;
inline void LinkAddUserReq::clear_struser() {
  struser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkAddUserReq::struser() const {
  // @@protoc_insertion_point(field_get:LinkAddUserReq.strUser)
  return struser_.GetNoArena();
}
inline void LinkAddUserReq::set_struser(const ::std::string& value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkAddUserReq.strUser)
}
#if LANG_CXX11
inline void LinkAddUserReq::set_struser(::std::string&& value) {
  
  struser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkAddUserReq.strUser)
}
#endif
inline void LinkAddUserReq::set_struser(const char* value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkAddUserReq.strUser)
}
inline void LinkAddUserReq::set_struser(const char* value, size_t size) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkAddUserReq.strUser)
}
inline ::std::string* LinkAddUserReq::mutable_struser() {
  
  // @@protoc_insertion_point(field_mutable:LinkAddUserReq.strUser)
  return struser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkAddUserReq::release_struser() {
  // @@protoc_insertion_point(field_release:LinkAddUserReq.strUser)
  
  return struser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkAddUserReq::set_allocated_struser(::std::string* struser) {
  if (struser != NULL) {
    
  } else {
    
  }
  struser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struser);
  // @@protoc_insertion_point(field_set_allocated:LinkAddUserReq.strUser)
}

// string strPasswd = 2;
inline void LinkAddUserReq::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkAddUserReq::strpasswd() const {
  // @@protoc_insertion_point(field_get:LinkAddUserReq.strPasswd)
  return strpasswd_.GetNoArena();
}
inline void LinkAddUserReq::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkAddUserReq.strPasswd)
}
#if LANG_CXX11
inline void LinkAddUserReq::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkAddUserReq.strPasswd)
}
#endif
inline void LinkAddUserReq::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkAddUserReq.strPasswd)
}
inline void LinkAddUserReq::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkAddUserReq.strPasswd)
}
inline ::std::string* LinkAddUserReq::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:LinkAddUserReq.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkAddUserReq::release_strpasswd() {
  // @@protoc_insertion_point(field_release:LinkAddUserReq.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkAddUserReq::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:LinkAddUserReq.strPasswd)
}

// -------------------------------------------------------------------

// LinkAddUserResp

// bool bSuccess = 1;
inline void LinkAddUserResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkAddUserResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkAddUserResp.bSuccess)
  return bsuccess_;
}
inline void LinkAddUserResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkAddUserResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkHasRecordItem

// int64 nId = 1;
inline void LinkHasRecordItem::clear_nid() {
  nid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LinkHasRecordItem::nid() const {
  // @@protoc_insertion_point(field_get:LinkHasRecordItem.nId)
  return nid_;
}
inline void LinkHasRecordItem::set_nid(::google::protobuf::int64 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:LinkHasRecordItem.nId)
}

// int32 nStart = 2;
inline void LinkHasRecordItem::clear_nstart() {
  nstart_ = 0;
}
inline ::google::protobuf::int32 LinkHasRecordItem::nstart() const {
  // @@protoc_insertion_point(field_get:LinkHasRecordItem.nStart)
  return nstart_;
}
inline void LinkHasRecordItem::set_nstart(::google::protobuf::int32 value) {
  
  nstart_ = value;
  // @@protoc_insertion_point(field_set:LinkHasRecordItem.nStart)
}

// int32 nEnd = 3;
inline void LinkHasRecordItem::clear_nend() {
  nend_ = 0;
}
inline ::google::protobuf::int32 LinkHasRecordItem::nend() const {
  // @@protoc_insertion_point(field_get:LinkHasRecordItem.nEnd)
  return nend_;
}
inline void LinkHasRecordItem::set_nend(::google::protobuf::int32 value) {
  
  nend_ = value;
  // @@protoc_insertion_point(field_set:LinkHasRecordItem.nEnd)
}

// int32 nType = 4;
inline void LinkHasRecordItem::clear_ntype() {
  ntype_ = 0;
}
inline ::google::protobuf::int32 LinkHasRecordItem::ntype() const {
  // @@protoc_insertion_point(field_get:LinkHasRecordItem.nType)
  return ntype_;
}
inline void LinkHasRecordItem::set_ntype(::google::protobuf::int32 value) {
  
  ntype_ = value;
  // @@protoc_insertion_point(field_set:LinkHasRecordItem.nType)
}

// bool bHas = 5;
inline void LinkHasRecordItem::clear_bhas() {
  bhas_ = false;
}
inline bool LinkHasRecordItem::bhas() const {
  // @@protoc_insertion_point(field_get:LinkHasRecordItem.bHas)
  return bhas_;
}
inline void LinkHasRecordItem::set_bhas(bool value) {
  
  bhas_ = value;
  // @@protoc_insertion_point(field_set:LinkHasRecordItem.bHas)
}

// -------------------------------------------------------------------

// LinkHasRecordList

// repeated .LinkHasRecordItem cHasRec = 1;
inline int LinkHasRecordList::chasrec_size() const {
  return chasrec_.size();
}
inline void LinkHasRecordList::clear_chasrec() {
  chasrec_.Clear();
}
inline const ::LinkHasRecordItem& LinkHasRecordList::chasrec(int index) const {
  // @@protoc_insertion_point(field_get:LinkHasRecordList.cHasRec)
  return chasrec_.Get(index);
}
inline ::LinkHasRecordItem* LinkHasRecordList::mutable_chasrec(int index) {
  // @@protoc_insertion_point(field_mutable:LinkHasRecordList.cHasRec)
  return chasrec_.Mutable(index);
}
inline ::LinkHasRecordItem* LinkHasRecordList::add_chasrec() {
  // @@protoc_insertion_point(field_add:LinkHasRecordList.cHasRec)
  return chasrec_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::LinkHasRecordItem >*
LinkHasRecordList::mutable_chasrec() {
  // @@protoc_insertion_point(field_mutable_list:LinkHasRecordList.cHasRec)
  return &chasrec_;
}
inline const ::google::protobuf::RepeatedPtrField< ::LinkHasRecordItem >&
LinkHasRecordList::chasrec() const {
  // @@protoc_insertion_point(field_list:LinkHasRecordList.cHasRec)
  return chasrec_;
}

// -------------------------------------------------------------------

// LinkHasRecordReq

// string strId = 1;
inline void LinkHasRecordReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkHasRecordReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkHasRecordReq.strId)
  return strid_.GetNoArena();
}
inline void LinkHasRecordReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkHasRecordReq.strId)
}
#if LANG_CXX11
inline void LinkHasRecordReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkHasRecordReq.strId)
}
#endif
inline void LinkHasRecordReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkHasRecordReq.strId)
}
inline void LinkHasRecordReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkHasRecordReq.strId)
}
inline ::std::string* LinkHasRecordReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkHasRecordReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkHasRecordReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkHasRecordReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkHasRecordReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkHasRecordReq.strId)
}

// .LinkHasRecordList cList = 2;
inline bool LinkHasRecordReq::has_clist() const {
  return this != internal_default_instance() && clist_ != NULL;
}
inline void LinkHasRecordReq::clear_clist() {
  if (GetArenaNoVirtual() == NULL && clist_ != NULL) delete clist_;
  clist_ = NULL;
}
inline const ::LinkHasRecordList& LinkHasRecordReq::clist() const {
  // @@protoc_insertion_point(field_get:LinkHasRecordReq.cList)
  return clist_ != NULL ? *clist_
                         : *::LinkHasRecordList::internal_default_instance();
}
inline ::LinkHasRecordList* LinkHasRecordReq::mutable_clist() {
  
  if (clist_ == NULL) {
    clist_ = new ::LinkHasRecordList;
  }
  // @@protoc_insertion_point(field_mutable:LinkHasRecordReq.cList)
  return clist_;
}
inline ::LinkHasRecordList* LinkHasRecordReq::release_clist() {
  // @@protoc_insertion_point(field_release:LinkHasRecordReq.cList)
  
  ::LinkHasRecordList* temp = clist_;
  clist_ = NULL;
  return temp;
}
inline void LinkHasRecordReq::set_allocated_clist(::LinkHasRecordList* clist) {
  delete clist_;
  clist_ = clist;
  if (clist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkHasRecordReq.cList)
}

// -------------------------------------------------------------------

// LinkHasRecordResp

// .LinkHasRecordList cList = 1;
inline bool LinkHasRecordResp::has_clist() const {
  return this != internal_default_instance() && clist_ != NULL;
}
inline void LinkHasRecordResp::clear_clist() {
  if (GetArenaNoVirtual() == NULL && clist_ != NULL) delete clist_;
  clist_ = NULL;
}
inline const ::LinkHasRecordList& LinkHasRecordResp::clist() const {
  // @@protoc_insertion_point(field_get:LinkHasRecordResp.cList)
  return clist_ != NULL ? *clist_
                         : *::LinkHasRecordList::internal_default_instance();
}
inline ::LinkHasRecordList* LinkHasRecordResp::mutable_clist() {
  
  if (clist_ == NULL) {
    clist_ = new ::LinkHasRecordList;
  }
  // @@protoc_insertion_point(field_mutable:LinkHasRecordResp.cList)
  return clist_;
}
inline ::LinkHasRecordList* LinkHasRecordResp::release_clist() {
  // @@protoc_insertion_point(field_release:LinkHasRecordResp.cList)
  
  ::LinkHasRecordList* temp = clist_;
  clist_ = NULL;
  return temp;
}
inline void LinkHasRecordResp::set_allocated_clist(::LinkHasRecordList* clist) {
  delete clist_;
  clist_ = clist;
  if (clist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkHasRecordResp.cList)
}

// -------------------------------------------------------------------

// LinkRecordItem

// int64 nId = 1;
inline void LinkRecordItem::clear_nid() {
  nid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LinkRecordItem::nid() const {
  // @@protoc_insertion_point(field_get:LinkRecordItem.nId)
  return nid_;
}
inline void LinkRecordItem::set_nid(::google::protobuf::int64 value) {
  
  nid_ = value;
  // @@protoc_insertion_point(field_set:LinkRecordItem.nId)
}

// int32 nStart = 2;
inline void LinkRecordItem::clear_nstart() {
  nstart_ = 0;
}
inline ::google::protobuf::int32 LinkRecordItem::nstart() const {
  // @@protoc_insertion_point(field_get:LinkRecordItem.nStart)
  return nstart_;
}
inline void LinkRecordItem::set_nstart(::google::protobuf::int32 value) {
  
  nstart_ = value;
  // @@protoc_insertion_point(field_set:LinkRecordItem.nStart)
}

// int32 nEnd = 3;
inline void LinkRecordItem::clear_nend() {
  nend_ = 0;
}
inline ::google::protobuf::int32 LinkRecordItem::nend() const {
  // @@protoc_insertion_point(field_get:LinkRecordItem.nEnd)
  return nend_;
}
inline void LinkRecordItem::set_nend(::google::protobuf::int32 value) {
  
  nend_ = value;
  // @@protoc_insertion_point(field_set:LinkRecordItem.nEnd)
}

// int32 nType = 4;
inline void LinkRecordItem::clear_ntype() {
  ntype_ = 0;
}
inline ::google::protobuf::int32 LinkRecordItem::ntype() const {
  // @@protoc_insertion_point(field_get:LinkRecordItem.nType)
  return ntype_;
}
inline void LinkRecordItem::set_ntype(::google::protobuf::int32 value) {
  
  ntype_ = value;
  // @@protoc_insertion_point(field_set:LinkRecordItem.nType)
}

// -------------------------------------------------------------------

// LinkRecordList

// repeated .LinkRecordItem cList = 1;
inline int LinkRecordList::clist_size() const {
  return clist_.size();
}
inline void LinkRecordList::clear_clist() {
  clist_.Clear();
}
inline const ::LinkRecordItem& LinkRecordList::clist(int index) const {
  // @@protoc_insertion_point(field_get:LinkRecordList.cList)
  return clist_.Get(index);
}
inline ::LinkRecordItem* LinkRecordList::mutable_clist(int index) {
  // @@protoc_insertion_point(field_mutable:LinkRecordList.cList)
  return clist_.Mutable(index);
}
inline ::LinkRecordItem* LinkRecordList::add_clist() {
  // @@protoc_insertion_point(field_add:LinkRecordList.cList)
  return clist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::LinkRecordItem >*
LinkRecordList::mutable_clist() {
  // @@protoc_insertion_point(field_mutable_list:LinkRecordList.cList)
  return &clist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::LinkRecordItem >&
LinkRecordList::clist() const {
  // @@protoc_insertion_point(field_list:LinkRecordList.cList)
  return clist_;
}

// -------------------------------------------------------------------

// LinkSearchRecordReq

// string strId = 1;
inline void LinkSearchRecordReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkSearchRecordReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkSearchRecordReq.strId)
  return strid_.GetNoArena();
}
inline void LinkSearchRecordReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkSearchRecordReq.strId)
}
#if LANG_CXX11
inline void LinkSearchRecordReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkSearchRecordReq.strId)
}
#endif
inline void LinkSearchRecordReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkSearchRecordReq.strId)
}
inline void LinkSearchRecordReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkSearchRecordReq.strId)
}
inline ::std::string* LinkSearchRecordReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkSearchRecordReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkSearchRecordReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkSearchRecordReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkSearchRecordReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkSearchRecordReq.strId)
}

// int32 nStart = 2;
inline void LinkSearchRecordReq::clear_nstart() {
  nstart_ = 0;
}
inline ::google::protobuf::int32 LinkSearchRecordReq::nstart() const {
  // @@protoc_insertion_point(field_get:LinkSearchRecordReq.nStart)
  return nstart_;
}
inline void LinkSearchRecordReq::set_nstart(::google::protobuf::int32 value) {
  
  nstart_ = value;
  // @@protoc_insertion_point(field_set:LinkSearchRecordReq.nStart)
}

// int32 nEnd = 3;
inline void LinkSearchRecordReq::clear_nend() {
  nend_ = 0;
}
inline ::google::protobuf::int32 LinkSearchRecordReq::nend() const {
  // @@protoc_insertion_point(field_get:LinkSearchRecordReq.nEnd)
  return nend_;
}
inline void LinkSearchRecordReq::set_nend(::google::protobuf::int32 value) {
  
  nend_ = value;
  // @@protoc_insertion_point(field_set:LinkSearchRecordReq.nEnd)
}

// int32 nType = 4;
inline void LinkSearchRecordReq::clear_ntype() {
  ntype_ = 0;
}
inline ::google::protobuf::int32 LinkSearchRecordReq::ntype() const {
  // @@protoc_insertion_point(field_get:LinkSearchRecordReq.nType)
  return ntype_;
}
inline void LinkSearchRecordReq::set_ntype(::google::protobuf::int32 value) {
  
  ntype_ = value;
  // @@protoc_insertion_point(field_set:LinkSearchRecordReq.nType)
}

// -------------------------------------------------------------------

// LinkSearchRecordResp

// string strId = 1;
inline void LinkSearchRecordResp::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkSearchRecordResp::strid() const {
  // @@protoc_insertion_point(field_get:LinkSearchRecordResp.strId)
  return strid_.GetNoArena();
}
inline void LinkSearchRecordResp::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkSearchRecordResp.strId)
}
#if LANG_CXX11
inline void LinkSearchRecordResp::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkSearchRecordResp.strId)
}
#endif
inline void LinkSearchRecordResp::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkSearchRecordResp.strId)
}
inline void LinkSearchRecordResp::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkSearchRecordResp.strId)
}
inline ::std::string* LinkSearchRecordResp::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkSearchRecordResp.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkSearchRecordResp::release_strid() {
  // @@protoc_insertion_point(field_release:LinkSearchRecordResp.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkSearchRecordResp::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkSearchRecordResp.strId)
}

// .LinkRecordList cList = 2;
inline bool LinkSearchRecordResp::has_clist() const {
  return this != internal_default_instance() && clist_ != NULL;
}
inline void LinkSearchRecordResp::clear_clist() {
  if (GetArenaNoVirtual() == NULL && clist_ != NULL) delete clist_;
  clist_ = NULL;
}
inline const ::LinkRecordList& LinkSearchRecordResp::clist() const {
  // @@protoc_insertion_point(field_get:LinkSearchRecordResp.cList)
  return clist_ != NULL ? *clist_
                         : *::LinkRecordList::internal_default_instance();
}
inline ::LinkRecordList* LinkSearchRecordResp::mutable_clist() {
  
  if (clist_ == NULL) {
    clist_ = new ::LinkRecordList;
  }
  // @@protoc_insertion_point(field_mutable:LinkSearchRecordResp.cList)
  return clist_;
}
inline ::LinkRecordList* LinkSearchRecordResp::release_clist() {
  // @@protoc_insertion_point(field_release:LinkSearchRecordResp.cList)
  
  ::LinkRecordList* temp = clist_;
  clist_ = NULL;
  return temp;
}
inline void LinkSearchRecordResp::set_allocated_clist(::LinkRecordList* clist) {
  delete clist_;
  clist_ = clist;
  if (clist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkSearchRecordResp.cList)
}

// -------------------------------------------------------------------

// LinkStartLiveCmd

// string strId = 1;
inline void LinkStartLiveCmd::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkStartLiveCmd::strid() const {
  // @@protoc_insertion_point(field_get:LinkStartLiveCmd.strId)
  return strid_.GetNoArena();
}
inline void LinkStartLiveCmd::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkStartLiveCmd.strId)
}
#if LANG_CXX11
inline void LinkStartLiveCmd::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkStartLiveCmd.strId)
}
#endif
inline void LinkStartLiveCmd::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkStartLiveCmd.strId)
}
inline void LinkStartLiveCmd::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkStartLiveCmd.strId)
}
inline ::std::string* LinkStartLiveCmd::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkStartLiveCmd.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkStartLiveCmd::release_strid() {
  // @@protoc_insertion_point(field_release:LinkStartLiveCmd.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkStartLiveCmd::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkStartLiveCmd.strId)
}

// int32 nStream = 2;
inline void LinkStartLiveCmd::clear_nstream() {
  nstream_ = 0;
}
inline ::google::protobuf::int32 LinkStartLiveCmd::nstream() const {
  // @@protoc_insertion_point(field_get:LinkStartLiveCmd.nStream)
  return nstream_;
}
inline void LinkStartLiveCmd::set_nstream(::google::protobuf::int32 value) {
  
  nstream_ = value;
  // @@protoc_insertion_point(field_set:LinkStartLiveCmd.nStream)
}

// -------------------------------------------------------------------

// LinkStopLiveCmd

// string strId = 1;
inline void LinkStopLiveCmd::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkStopLiveCmd::strid() const {
  // @@protoc_insertion_point(field_get:LinkStopLiveCmd.strId)
  return strid_.GetNoArena();
}
inline void LinkStopLiveCmd::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkStopLiveCmd.strId)
}
#if LANG_CXX11
inline void LinkStopLiveCmd::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkStopLiveCmd.strId)
}
#endif
inline void LinkStopLiveCmd::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkStopLiveCmd.strId)
}
inline void LinkStopLiveCmd::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkStopLiveCmd.strId)
}
inline ::std::string* LinkStopLiveCmd::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkStopLiveCmd.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkStopLiveCmd::release_strid() {
  // @@protoc_insertion_point(field_release:LinkStopLiveCmd.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkStopLiveCmd::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkStopLiveCmd.strId)
}

// int32 nStream = 2;
inline void LinkStopLiveCmd::clear_nstream() {
  nstream_ = 0;
}
inline ::google::protobuf::int32 LinkStopLiveCmd::nstream() const {
  // @@protoc_insertion_point(field_get:LinkStopLiveCmd.nStream)
  return nstream_;
}
inline void LinkStopLiveCmd::set_nstream(::google::protobuf::int32 value) {
  
  nstream_ = value;
  // @@protoc_insertion_point(field_set:LinkStopLiveCmd.nStream)
}

// -------------------------------------------------------------------

// LinkPlayBackCmd

// string strId = 1;
inline void LinkPlayBackCmd::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkPlayBackCmd::strid() const {
  // @@protoc_insertion_point(field_get:LinkPlayBackCmd.strId)
  return strid_.GetNoArena();
}
inline void LinkPlayBackCmd::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkPlayBackCmd.strId)
}
#if LANG_CXX11
inline void LinkPlayBackCmd::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkPlayBackCmd.strId)
}
#endif
inline void LinkPlayBackCmd::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkPlayBackCmd.strId)
}
inline void LinkPlayBackCmd::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkPlayBackCmd.strId)
}
inline ::std::string* LinkPlayBackCmd::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkPlayBackCmd.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkPlayBackCmd::release_strid() {
  // @@protoc_insertion_point(field_release:LinkPlayBackCmd.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkPlayBackCmd::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkPlayBackCmd.strId)
}

// int32 nPlaytime = 2;
inline void LinkPlayBackCmd::clear_nplaytime() {
  nplaytime_ = 0;
}
inline ::google::protobuf::int32 LinkPlayBackCmd::nplaytime() const {
  // @@protoc_insertion_point(field_get:LinkPlayBackCmd.nPlaytime)
  return nplaytime_;
}
inline void LinkPlayBackCmd::set_nplaytime(::google::protobuf::int32 value) {
  
  nplaytime_ = value;
  // @@protoc_insertion_point(field_set:LinkPlayBackCmd.nPlaytime)
}

// -------------------------------------------------------------------

// LinkPlayPauseCmd

// string strId = 1;
inline void LinkPlayPauseCmd::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkPlayPauseCmd::strid() const {
  // @@protoc_insertion_point(field_get:LinkPlayPauseCmd.strId)
  return strid_.GetNoArena();
}
inline void LinkPlayPauseCmd::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkPlayPauseCmd.strId)
}
#if LANG_CXX11
inline void LinkPlayPauseCmd::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkPlayPauseCmd.strId)
}
#endif
inline void LinkPlayPauseCmd::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkPlayPauseCmd.strId)
}
inline void LinkPlayPauseCmd::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkPlayPauseCmd.strId)
}
inline ::std::string* LinkPlayPauseCmd::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkPlayPauseCmd.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkPlayPauseCmd::release_strid() {
  // @@protoc_insertion_point(field_release:LinkPlayPauseCmd.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkPlayPauseCmd::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkPlayPauseCmd.strId)
}

// -------------------------------------------------------------------

// LinkPlayResumeCmd

// string strId = 1;
inline void LinkPlayResumeCmd::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkPlayResumeCmd::strid() const {
  // @@protoc_insertion_point(field_get:LinkPlayResumeCmd.strId)
  return strid_.GetNoArena();
}
inline void LinkPlayResumeCmd::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkPlayResumeCmd.strId)
}
#if LANG_CXX11
inline void LinkPlayResumeCmd::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkPlayResumeCmd.strId)
}
#endif
inline void LinkPlayResumeCmd::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkPlayResumeCmd.strId)
}
inline void LinkPlayResumeCmd::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkPlayResumeCmd.strId)
}
inline ::std::string* LinkPlayResumeCmd::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkPlayResumeCmd.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkPlayResumeCmd::release_strid() {
  // @@protoc_insertion_point(field_release:LinkPlayResumeCmd.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkPlayResumeCmd::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkPlayResumeCmd.strId)
}

// -------------------------------------------------------------------

// LinkPlaySeekCmd

// string strId = 1;
inline void LinkPlaySeekCmd::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkPlaySeekCmd::strid() const {
  // @@protoc_insertion_point(field_get:LinkPlaySeekCmd.strId)
  return strid_.GetNoArena();
}
inline void LinkPlaySeekCmd::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkPlaySeekCmd.strId)
}
#if LANG_CXX11
inline void LinkPlaySeekCmd::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkPlaySeekCmd.strId)
}
#endif
inline void LinkPlaySeekCmd::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkPlaySeekCmd.strId)
}
inline void LinkPlaySeekCmd::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkPlaySeekCmd.strId)
}
inline ::std::string* LinkPlaySeekCmd::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkPlaySeekCmd.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkPlaySeekCmd::release_strid() {
  // @@protoc_insertion_point(field_release:LinkPlaySeekCmd.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkPlaySeekCmd::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkPlaySeekCmd.strId)
}

// int32 nPlaytime = 2;
inline void LinkPlaySeekCmd::clear_nplaytime() {
  nplaytime_ = 0;
}
inline ::google::protobuf::int32 LinkPlaySeekCmd::nplaytime() const {
  // @@protoc_insertion_point(field_get:LinkPlaySeekCmd.nPlaytime)
  return nplaytime_;
}
inline void LinkPlaySeekCmd::set_nplaytime(::google::protobuf::int32 value) {
  
  nplaytime_ = value;
  // @@protoc_insertion_point(field_set:LinkPlaySeekCmd.nPlaytime)
}

// -------------------------------------------------------------------

// LinkPlayStopCmd

// string strId = 1;
inline void LinkPlayStopCmd::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkPlayStopCmd::strid() const {
  // @@protoc_insertion_point(field_get:LinkPlayStopCmd.strId)
  return strid_.GetNoArena();
}
inline void LinkPlayStopCmd::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkPlayStopCmd.strId)
}
#if LANG_CXX11
inline void LinkPlayStopCmd::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkPlayStopCmd.strId)
}
#endif
inline void LinkPlayStopCmd::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkPlayStopCmd.strId)
}
inline void LinkPlayStopCmd::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkPlayStopCmd.strId)
}
inline ::std::string* LinkPlayStopCmd::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkPlayStopCmd.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkPlayStopCmd::release_strid() {
  // @@protoc_insertion_point(field_release:LinkPlayStopCmd.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkPlayStopCmd::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkPlayStopCmd.strId)
}

// -------------------------------------------------------------------

// LinkPtzCmd

// string strId = 1;
inline void LinkPtzCmd::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkPtzCmd::strid() const {
  // @@protoc_insertion_point(field_get:LinkPtzCmd.strId)
  return strid_.GetNoArena();
}
inline void LinkPtzCmd::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkPtzCmd.strId)
}
#if LANG_CXX11
inline void LinkPtzCmd::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkPtzCmd.strId)
}
#endif
inline void LinkPtzCmd::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkPtzCmd.strId)
}
inline void LinkPtzCmd::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkPtzCmd.strId)
}
inline ::std::string* LinkPtzCmd::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkPtzCmd.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkPtzCmd::release_strid() {
  // @@protoc_insertion_point(field_release:LinkPtzCmd.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkPtzCmd::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkPtzCmd.strId)
}

// int32 nAction = 2;
inline void LinkPtzCmd::clear_naction() {
  naction_ = 0;
}
inline ::google::protobuf::int32 LinkPtzCmd::naction() const {
  // @@protoc_insertion_point(field_get:LinkPtzCmd.nAction)
  return naction_;
}
inline void LinkPtzCmd::set_naction(::google::protobuf::int32 value) {
  
  naction_ = value;
  // @@protoc_insertion_point(field_set:LinkPtzCmd.nAction)
}

// double nParam = 3;
inline void LinkPtzCmd::clear_nparam() {
  nparam_ = 0;
}
inline double LinkPtzCmd::nparam() const {
  // @@protoc_insertion_point(field_get:LinkPtzCmd.nParam)
  return nparam_;
}
inline void LinkPtzCmd::set_nparam(double value) {
  
  nparam_ = value;
  // @@protoc_insertion_point(field_set:LinkPtzCmd.nParam)
}

// -------------------------------------------------------------------

// LinkCamSearchStartReq

// string strFake = 1;
inline void LinkCamSearchStartReq::clear_strfake() {
  strfake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkCamSearchStartReq::strfake() const {
  // @@protoc_insertion_point(field_get:LinkCamSearchStartReq.strFake)
  return strfake_.GetNoArena();
}
inline void LinkCamSearchStartReq::set_strfake(const ::std::string& value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkCamSearchStartReq.strFake)
}
#if LANG_CXX11
inline void LinkCamSearchStartReq::set_strfake(::std::string&& value) {
  
  strfake_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkCamSearchStartReq.strFake)
}
#endif
inline void LinkCamSearchStartReq::set_strfake(const char* value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkCamSearchStartReq.strFake)
}
inline void LinkCamSearchStartReq::set_strfake(const char* value, size_t size) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkCamSearchStartReq.strFake)
}
inline ::std::string* LinkCamSearchStartReq::mutable_strfake() {
  
  // @@protoc_insertion_point(field_mutable:LinkCamSearchStartReq.strFake)
  return strfake_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkCamSearchStartReq::release_strfake() {
  // @@protoc_insertion_point(field_release:LinkCamSearchStartReq.strFake)
  
  return strfake_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkCamSearchStartReq::set_allocated_strfake(::std::string* strfake) {
  if (strfake != NULL) {
    
  } else {
    
  }
  strfake_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfake);
  // @@protoc_insertion_point(field_set_allocated:LinkCamSearchStartReq.strFake)
}

// -------------------------------------------------------------------

// LinkCamSearchStartResp

// bool bSuccess = 1;
inline void LinkCamSearchStartResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkCamSearchStartResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkCamSearchStartResp.bSuccess)
  return bsuccess_;
}
inline void LinkCamSearchStartResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkCamSearchStartResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkCamSearchStopReq

// string strFake = 1;
inline void LinkCamSearchStopReq::clear_strfake() {
  strfake_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkCamSearchStopReq::strfake() const {
  // @@protoc_insertion_point(field_get:LinkCamSearchStopReq.strFake)
  return strfake_.GetNoArena();
}
inline void LinkCamSearchStopReq::set_strfake(const ::std::string& value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkCamSearchStopReq.strFake)
}
#if LANG_CXX11
inline void LinkCamSearchStopReq::set_strfake(::std::string&& value) {
  
  strfake_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkCamSearchStopReq.strFake)
}
#endif
inline void LinkCamSearchStopReq::set_strfake(const char* value) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkCamSearchStopReq.strFake)
}
inline void LinkCamSearchStopReq::set_strfake(const char* value, size_t size) {
  
  strfake_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkCamSearchStopReq.strFake)
}
inline ::std::string* LinkCamSearchStopReq::mutable_strfake() {
  
  // @@protoc_insertion_point(field_mutable:LinkCamSearchStopReq.strFake)
  return strfake_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkCamSearchStopReq::release_strfake() {
  // @@protoc_insertion_point(field_release:LinkCamSearchStopReq.strFake)
  
  return strfake_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkCamSearchStopReq::set_allocated_strfake(::std::string* strfake) {
  if (strfake != NULL) {
    
  } else {
    
  }
  strfake_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfake);
  // @@protoc_insertion_point(field_set_allocated:LinkCamSearchStopReq.strFake)
}

// -------------------------------------------------------------------

// LinkCamSearchStopResp

// bool bSuccess = 1;
inline void LinkCamSearchStopResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkCamSearchStopResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkCamSearchStopResp.bSuccess)
  return bsuccess_;
}
inline void LinkCamSearchStopResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkCamSearchStopResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkRegEventReq

// string strId = 1;
inline void LinkRegEventReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkRegEventReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkRegEventReq.strId)
  return strid_.GetNoArena();
}
inline void LinkRegEventReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkRegEventReq.strId)
}
#if LANG_CXX11
inline void LinkRegEventReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkRegEventReq.strId)
}
#endif
inline void LinkRegEventReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkRegEventReq.strId)
}
inline void LinkRegEventReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkRegEventReq.strId)
}
inline ::std::string* LinkRegEventReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkRegEventReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkRegEventReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkRegEventReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkRegEventReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkRegEventReq.strId)
}

// -------------------------------------------------------------------

// LinkRegEventResp

// bool bSuccess = 1;
inline void LinkRegEventResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkRegEventResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkRegEventResp.bSuccess)
  return bsuccess_;
}
inline void LinkRegEventResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkRegEventResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkUnRegEventReq

// string strId = 1;
inline void LinkUnRegEventReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkUnRegEventReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkUnRegEventReq.strId)
  return strid_.GetNoArena();
}
inline void LinkUnRegEventReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkUnRegEventReq.strId)
}
#if LANG_CXX11
inline void LinkUnRegEventReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkUnRegEventReq.strId)
}
#endif
inline void LinkUnRegEventReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkUnRegEventReq.strId)
}
inline void LinkUnRegEventReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkUnRegEventReq.strId)
}
inline ::std::string* LinkUnRegEventReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkUnRegEventReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkUnRegEventReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkUnRegEventReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkUnRegEventReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkUnRegEventReq.strId)
}

// -------------------------------------------------------------------

// LinkUnRegEventResp

// bool bSuccess = 1;
inline void LinkUnRegEventResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkUnRegEventResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkUnRegEventResp.bSuccess)
  return bsuccess_;
}
inline void LinkUnRegEventResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkUnRegEventResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkEventSearchReq

// string strId = 1;
inline void LinkEventSearchReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkEventSearchReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkEventSearchReq.strId)
  return strid_.GetNoArena();
}
inline void LinkEventSearchReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkEventSearchReq.strId)
}
#if LANG_CXX11
inline void LinkEventSearchReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkEventSearchReq.strId)
}
#endif
inline void LinkEventSearchReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkEventSearchReq.strId)
}
inline void LinkEventSearchReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkEventSearchReq.strId)
}
inline ::std::string* LinkEventSearchReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkEventSearchReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkEventSearchReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkEventSearchReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkEventSearchReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkEventSearchReq.strId)
}

// int32 nStart = 2;
inline void LinkEventSearchReq::clear_nstart() {
  nstart_ = 0;
}
inline ::google::protobuf::int32 LinkEventSearchReq::nstart() const {
  // @@protoc_insertion_point(field_get:LinkEventSearchReq.nStart)
  return nstart_;
}
inline void LinkEventSearchReq::set_nstart(::google::protobuf::int32 value) {
  
  nstart_ = value;
  // @@protoc_insertion_point(field_set:LinkEventSearchReq.nStart)
}

// int32 nEnd = 3;
inline void LinkEventSearchReq::clear_nend() {
  nend_ = 0;
}
inline ::google::protobuf::int32 LinkEventSearchReq::nend() const {
  // @@protoc_insertion_point(field_get:LinkEventSearchReq.nEnd)
  return nend_;
}
inline void LinkEventSearchReq::set_nend(::google::protobuf::int32 value) {
  
  nend_ = value;
  // @@protoc_insertion_point(field_set:LinkEventSearchReq.nEnd)
}

// -------------------------------------------------------------------

// LinkEventSearchResp

// bool bSuccess = 1;
inline void LinkEventSearchResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkEventSearchResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkEventSearchResp.bSuccess)
  return bsuccess_;
}
inline void LinkEventSearchResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkEventSearchResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkHandleEventReq

// string strId = 1;
inline void LinkHandleEventReq::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkHandleEventReq::strid() const {
  // @@protoc_insertion_point(field_get:LinkHandleEventReq.strId)
  return strid_.GetNoArena();
}
inline void LinkHandleEventReq::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkHandleEventReq.strId)
}
#if LANG_CXX11
inline void LinkHandleEventReq::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkHandleEventReq.strId)
}
#endif
inline void LinkHandleEventReq::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkHandleEventReq.strId)
}
inline void LinkHandleEventReq::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkHandleEventReq.strId)
}
inline ::std::string* LinkHandleEventReq::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkHandleEventReq.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkHandleEventReq::release_strid() {
  // @@protoc_insertion_point(field_release:LinkHandleEventReq.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkHandleEventReq::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkHandleEventReq.strId)
}

// -------------------------------------------------------------------

// LinkHandleEventResp

// bool bSuccess = 1;
inline void LinkHandleEventResp::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool LinkHandleEventResp::bsuccess() const {
  // @@protoc_insertion_point(field_get:LinkHandleEventResp.bSuccess)
  return bsuccess_;
}
inline void LinkHandleEventResp::set_bsuccess(bool value) {
  
  bsuccess_ = value;
  // @@protoc_insertion_point(field_set:LinkHandleEventResp.bSuccess)
}

// -------------------------------------------------------------------

// LinkCamAddNotify

// .VidCamera cCam = 1;
inline bool LinkCamAddNotify::has_ccam() const {
  return this != internal_default_instance() && ccam_ != NULL;
}
inline void LinkCamAddNotify::clear_ccam() {
  if (GetArenaNoVirtual() == NULL && ccam_ != NULL) delete ccam_;
  ccam_ = NULL;
}
inline const ::VidCamera& LinkCamAddNotify::ccam() const {
  // @@protoc_insertion_point(field_get:LinkCamAddNotify.cCam)
  return ccam_ != NULL ? *ccam_
                         : *::VidCamera::internal_default_instance();
}
inline ::VidCamera* LinkCamAddNotify::mutable_ccam() {
  
  if (ccam_ == NULL) {
    ccam_ = new ::VidCamera;
  }
  // @@protoc_insertion_point(field_mutable:LinkCamAddNotify.cCam)
  return ccam_;
}
inline ::VidCamera* LinkCamAddNotify::release_ccam() {
  // @@protoc_insertion_point(field_release:LinkCamAddNotify.cCam)
  
  ::VidCamera* temp = ccam_;
  ccam_ = NULL;
  return temp;
}
inline void LinkCamAddNotify::set_allocated_ccam(::VidCamera* ccam) {
  delete ccam_;
  ccam_ = ccam;
  if (ccam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkCamAddNotify.cCam)
}

// -------------------------------------------------------------------

// LinkCamIdNotify

// string strId = 1;
inline void LinkCamIdNotify::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkCamIdNotify::strid() const {
  // @@protoc_insertion_point(field_get:LinkCamIdNotify.strId)
  return strid_.GetNoArena();
}
inline void LinkCamIdNotify::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkCamIdNotify.strId)
}
#if LANG_CXX11
inline void LinkCamIdNotify::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkCamIdNotify.strId)
}
#endif
inline void LinkCamIdNotify::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkCamIdNotify.strId)
}
inline void LinkCamIdNotify::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkCamIdNotify.strId)
}
inline ::std::string* LinkCamIdNotify::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:LinkCamIdNotify.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkCamIdNotify::release_strid() {
  // @@protoc_insertion_point(field_release:LinkCamIdNotify.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkCamIdNotify::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:LinkCamIdNotify.strId)
}

// -------------------------------------------------------------------

// LinkCamSearchedNotify

// string strIp = 1;
inline void LinkCamSearchedNotify::clear_strip() {
  strip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkCamSearchedNotify::strip() const {
  // @@protoc_insertion_point(field_get:LinkCamSearchedNotify.strIp)
  return strip_.GetNoArena();
}
inline void LinkCamSearchedNotify::set_strip(const ::std::string& value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkCamSearchedNotify.strIp)
}
#if LANG_CXX11
inline void LinkCamSearchedNotify::set_strip(::std::string&& value) {
  
  strip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkCamSearchedNotify.strIp)
}
#endif
inline void LinkCamSearchedNotify::set_strip(const char* value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkCamSearchedNotify.strIp)
}
inline void LinkCamSearchedNotify::set_strip(const char* value, size_t size) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkCamSearchedNotify.strIp)
}
inline ::std::string* LinkCamSearchedNotify::mutable_strip() {
  
  // @@protoc_insertion_point(field_mutable:LinkCamSearchedNotify.strIp)
  return strip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkCamSearchedNotify::release_strip() {
  // @@protoc_insertion_point(field_release:LinkCamSearchedNotify.strIp)
  
  return strip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkCamSearchedNotify::set_allocated_strip(::std::string* strip) {
  if (strip != NULL) {
    
  } else {
    
  }
  strip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strip);
  // @@protoc_insertion_point(field_set_allocated:LinkCamSearchedNotify.strIp)
}

// string strPort = 2;
inline void LinkCamSearchedNotify::clear_strport() {
  strport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkCamSearchedNotify::strport() const {
  // @@protoc_insertion_point(field_get:LinkCamSearchedNotify.strPort)
  return strport_.GetNoArena();
}
inline void LinkCamSearchedNotify::set_strport(const ::std::string& value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkCamSearchedNotify.strPort)
}
#if LANG_CXX11
inline void LinkCamSearchedNotify::set_strport(::std::string&& value) {
  
  strport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkCamSearchedNotify.strPort)
}
#endif
inline void LinkCamSearchedNotify::set_strport(const char* value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkCamSearchedNotify.strPort)
}
inline void LinkCamSearchedNotify::set_strport(const char* value, size_t size) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkCamSearchedNotify.strPort)
}
inline ::std::string* LinkCamSearchedNotify::mutable_strport() {
  
  // @@protoc_insertion_point(field_mutable:LinkCamSearchedNotify.strPort)
  return strport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkCamSearchedNotify::release_strport() {
  // @@protoc_insertion_point(field_release:LinkCamSearchedNotify.strPort)
  
  return strport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkCamSearchedNotify::set_allocated_strport(::std::string* strport) {
  if (strport != NULL) {
    
  } else {
    
  }
  strport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strport);
  // @@protoc_insertion_point(field_set_allocated:LinkCamSearchedNotify.strPort)
}

// string strModel = 3;
inline void LinkCamSearchedNotify::clear_strmodel() {
  strmodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkCamSearchedNotify::strmodel() const {
  // @@protoc_insertion_point(field_get:LinkCamSearchedNotify.strModel)
  return strmodel_.GetNoArena();
}
inline void LinkCamSearchedNotify::set_strmodel(const ::std::string& value) {
  
  strmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkCamSearchedNotify.strModel)
}
#if LANG_CXX11
inline void LinkCamSearchedNotify::set_strmodel(::std::string&& value) {
  
  strmodel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkCamSearchedNotify.strModel)
}
#endif
inline void LinkCamSearchedNotify::set_strmodel(const char* value) {
  
  strmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkCamSearchedNotify.strModel)
}
inline void LinkCamSearchedNotify::set_strmodel(const char* value, size_t size) {
  
  strmodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkCamSearchedNotify.strModel)
}
inline ::std::string* LinkCamSearchedNotify::mutable_strmodel() {
  
  // @@protoc_insertion_point(field_mutable:LinkCamSearchedNotify.strModel)
  return strmodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkCamSearchedNotify::release_strmodel() {
  // @@protoc_insertion_point(field_release:LinkCamSearchedNotify.strModel)
  
  return strmodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkCamSearchedNotify::set_allocated_strmodel(::std::string* strmodel) {
  if (strmodel != NULL) {
    
  } else {
    
  }
  strmodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmodel);
  // @@protoc_insertion_point(field_set_allocated:LinkCamSearchedNotify.strModel)
}

// string strONVIFAddress = 4;
inline void LinkCamSearchedNotify::clear_stronvifaddress() {
  stronvifaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LinkCamSearchedNotify::stronvifaddress() const {
  // @@protoc_insertion_point(field_get:LinkCamSearchedNotify.strONVIFAddress)
  return stronvifaddress_.GetNoArena();
}
inline void LinkCamSearchedNotify::set_stronvifaddress(const ::std::string& value) {
  
  stronvifaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LinkCamSearchedNotify.strONVIFAddress)
}
#if LANG_CXX11
inline void LinkCamSearchedNotify::set_stronvifaddress(::std::string&& value) {
  
  stronvifaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LinkCamSearchedNotify.strONVIFAddress)
}
#endif
inline void LinkCamSearchedNotify::set_stronvifaddress(const char* value) {
  
  stronvifaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LinkCamSearchedNotify.strONVIFAddress)
}
inline void LinkCamSearchedNotify::set_stronvifaddress(const char* value, size_t size) {
  
  stronvifaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LinkCamSearchedNotify.strONVIFAddress)
}
inline ::std::string* LinkCamSearchedNotify::mutable_stronvifaddress() {
  
  // @@protoc_insertion_point(field_mutable:LinkCamSearchedNotify.strONVIFAddress)
  return stronvifaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LinkCamSearchedNotify::release_stronvifaddress() {
  // @@protoc_insertion_point(field_release:LinkCamSearchedNotify.strONVIFAddress)
  
  return stronvifaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LinkCamSearchedNotify::set_allocated_stronvifaddress(::std::string* stronvifaddress) {
  if (stronvifaddress != NULL) {
    
  } else {
    
  }
  stronvifaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stronvifaddress);
  // @@protoc_insertion_point(field_set_allocated:LinkCamSearchedNotify.strONVIFAddress)
}

// -------------------------------------------------------------------

// LinkEventNotify

// .VidEvent cEvent = 1;
inline bool LinkEventNotify::has_cevent() const {
  return this != internal_default_instance() && cevent_ != NULL;
}
inline void LinkEventNotify::clear_cevent() {
  if (GetArenaNoVirtual() == NULL && cevent_ != NULL) delete cevent_;
  cevent_ = NULL;
}
inline const ::VidEvent& LinkEventNotify::cevent() const {
  // @@protoc_insertion_point(field_get:LinkEventNotify.cEvent)
  return cevent_ != NULL ? *cevent_
                         : *::VidEvent::internal_default_instance();
}
inline ::VidEvent* LinkEventNotify::mutable_cevent() {
  
  if (cevent_ == NULL) {
    cevent_ = new ::VidEvent;
  }
  // @@protoc_insertion_point(field_mutable:LinkEventNotify.cEvent)
  return cevent_;
}
inline ::VidEvent* LinkEventNotify::release_cevent() {
  // @@protoc_insertion_point(field_release:LinkEventNotify.cEvent)
  
  ::VidEvent* temp = cevent_;
  cevent_ = NULL;
  return temp;
}
inline void LinkEventNotify::set_allocated_cevent(::VidEvent* cevent) {
  delete cevent_;
  cevent_ = cevent;
  if (cevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LinkEventNotify.cEvent)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_linksystem_2eproto__INCLUDED
