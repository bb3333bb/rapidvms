// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vidconf.proto

#ifndef PROTOBUF_vidconf_2eproto__INCLUDED
#define PROTOBUF_vidconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class VidBlob;
class VidBlobDefaultTypeInternal;
VE_LIBRARY_API extern VidBlobDefaultTypeInternal _VidBlob_default_instance_;
class VidBlobList;
class VidBlobListDefaultTypeInternal;
VE_LIBRARY_API extern VidBlobListDefaultTypeInternal _VidBlobList_default_instance_;
class VidCamera;
class VidCameraDefaultTypeInternal;
VE_LIBRARY_API extern VidCameraDefaultTypeInternal _VidCamera_default_instance_;
class VidCameraId;
class VidCameraIdDefaultTypeInternal;
VE_LIBRARY_API extern VidCameraIdDefaultTypeInternal _VidCameraId_default_instance_;
class VidCameraList;
class VidCameraListDefaultTypeInternal;
VE_LIBRARY_API extern VidCameraListDefaultTypeInternal _VidCameraList_default_instance_;
class VidClientConf;
class VidClientConfDefaultTypeInternal;
VE_LIBRARY_API extern VidClientConfDefaultTypeInternal _VidClientConf_default_instance_;
class VidDisk;
class VidDiskDefaultTypeInternal;
VE_LIBRARY_API extern VidDiskDefaultTypeInternal _VidDisk_default_instance_;
class VidDiskList;
class VidDiskListDefaultTypeInternal;
VE_LIBRARY_API extern VidDiskListDefaultTypeInternal _VidDiskList_default_instance_;
class VidEmap;
class VidEmapDefaultTypeInternal;
VE_LIBRARY_API extern VidEmapDefaultTypeInternal _VidEmap_default_instance_;
class VidEmapCamera;
class VidEmapCameraDefaultTypeInternal;
VE_LIBRARY_API extern VidEmapCameraDefaultTypeInternal _VidEmapCamera_default_instance_;
class VidEmapList;
class VidEmapListDefaultTypeInternal;
VE_LIBRARY_API extern VidEmapListDefaultTypeInternal _VidEmapList_default_instance_;
class VidEvent;
class VidEventDefaultTypeInternal;
VE_LIBRARY_API extern VidEventDefaultTypeInternal _VidEvent_default_instance_;
class VidEventDBConf;
class VidEventDBConfDefaultTypeInternal;
VE_LIBRARY_API extern VidEventDBConfDefaultTypeInternal _VidEventDBConf_default_instance_;
class VidGroup;
class VidGroupDefaultTypeInternal;
VE_LIBRARY_API extern VidGroupDefaultTypeInternal _VidGroup_default_instance_;
class VidGroupList;
class VidGroupListDefaultTypeInternal;
VE_LIBRARY_API extern VidGroupListDefaultTypeInternal _VidGroupList_default_instance_;
class VidHDFSConf;
class VidHDFSConfDefaultTypeInternal;
VE_LIBRARY_API extern VidHDFSConfDefaultTypeInternal _VidHDFSConf_default_instance_;
class VidStor;
class VidStorDefaultTypeInternal;
VE_LIBRARY_API extern VidStorDefaultTypeInternal _VidStor_default_instance_;
class VidStorList;
class VidStorListDefaultTypeInternal;
VE_LIBRARY_API extern VidStorListDefaultTypeInternal _VidStorList_default_instance_;
class VidStorServerConf;
class VidStorServerConfDefaultTypeInternal;
VE_LIBRARY_API extern VidStorServerConfDefaultTypeInternal _VidStorServerConf_default_instance_;
class VidStream;
class VidStreamDefaultTypeInternal;
VE_LIBRARY_API extern VidStreamDefaultTypeInternal _VidStream_default_instance_;
class VidStreamList;
class VidStreamListDefaultTypeInternal;
VE_LIBRARY_API extern VidStreamListDefaultTypeInternal _VidStreamList_default_instance_;
class VidTour;
class VidTourDefaultTypeInternal;
VE_LIBRARY_API extern VidTourDefaultTypeInternal _VidTour_default_instance_;
class VidTourList;
class VidTourListDefaultTypeInternal;
VE_LIBRARY_API extern VidTourListDefaultTypeInternal _VidTourList_default_instance_;
class VidUser;
class VidUserDefaultTypeInternal;
VE_LIBRARY_API extern VidUserDefaultTypeInternal _VidUser_default_instance_;
class VidUserList;
class VidUserListDefaultTypeInternal;
VE_LIBRARY_API extern VidUserListDefaultTypeInternal _VidUserList_default_instance_;
class VidView;
class VidViewDefaultTypeInternal;
VE_LIBRARY_API extern VidViewDefaultTypeInternal _VidView_default_instance_;
class VidViewList;
class VidViewListDefaultTypeInternal;
VE_LIBRARY_API extern VidViewListDefaultTypeInternal _VidViewList_default_instance_;
class VidViewWindow;
class VidViewWindowDefaultTypeInternal;
VE_LIBRARY_API extern VidViewWindowDefaultTypeInternal _VidViewWindow_default_instance_;

namespace protobuf_vidconf_2eproto {
// Internal implementation detail -- do not call these.
struct VE_LIBRARY_API TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void VE_LIBRARY_API AddDescriptors();
void VE_LIBRARY_API InitDefaults();
}  // namespace protobuf_vidconf_2eproto

enum CameraType {
  VID_0 = 0,
  VID_USB = 1,
  VID_FILE = 2,
  VID_RTSP = 3,
  VID_ONVIF_S = 4,
  VID_GB28181 = 5,
  VID_MJPEG = 6,
  CameraType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
VE_LIBRARY_API bool CameraType_IsValid(int value);
const CameraType CameraType_MIN = VID_0;
const CameraType CameraType_MAX = VID_MJPEG;
const int CameraType_ARRAYSIZE = CameraType_MAX + 1;

VE_LIBRARY_API const ::google::protobuf::EnumDescriptor* CameraType_descriptor();
inline const ::std::string& CameraType_Name(CameraType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraType_descriptor(), value);
}
inline bool CameraType_Parse(
    const ::std::string& name, CameraType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
enum VidRecType {
  VID_R_OFF = 0,
  VID_R_ALARM = 1,
  VID_R_SCHED = 2,
  VidRecType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VidRecType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
VE_LIBRARY_API bool VidRecType_IsValid(int value);
const VidRecType VidRecType_MIN = VID_R_OFF;
const VidRecType VidRecType_MAX = VID_R_SCHED;
const int VidRecType_ARRAYSIZE = VidRecType_MAX + 1;

VE_LIBRARY_API const ::google::protobuf::EnumDescriptor* VidRecType_descriptor();
inline const ::std::string& VidRecType_Name(VidRecType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VidRecType_descriptor(), value);
}
inline bool VidRecType_Parse(
    const ::std::string& name, VidRecType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VidRecType>(
    VidRecType_descriptor(), name, value);
}
enum CameraConnectType {
  VID_CONNECT_0 = 0,
  VID_CONNECT_TCP = 1,
  VID_CONNECT_UDP = 2,
  CameraConnectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraConnectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
VE_LIBRARY_API bool CameraConnectType_IsValid(int value);
const CameraConnectType CameraConnectType_MIN = VID_CONNECT_0;
const CameraConnectType CameraConnectType_MAX = VID_CONNECT_UDP;
const int CameraConnectType_ARRAYSIZE = CameraConnectType_MAX + 1;

VE_LIBRARY_API const ::google::protobuf::EnumDescriptor* CameraConnectType_descriptor();
inline const ::std::string& CameraConnectType_Name(CameraConnectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraConnectType_descriptor(), value);
}
inline bool CameraConnectType_Parse(
    const ::std::string& name, CameraConnectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraConnectType>(
    CameraConnectType_descriptor(), name, value);
}
enum OnvifEventLevel {
  VID_ONVIF_EVENT_OFF = 0,
  VID_ONVIF_EVENT_FULL = 1,
  VID_ONVIF_EVENT_MOTION = 2,
  OnvifEventLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OnvifEventLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
VE_LIBRARY_API bool OnvifEventLevel_IsValid(int value);
const OnvifEventLevel OnvifEventLevel_MIN = VID_ONVIF_EVENT_OFF;
const OnvifEventLevel OnvifEventLevel_MAX = VID_ONVIF_EVENT_MOTION;
const int OnvifEventLevel_ARRAYSIZE = OnvifEventLevel_MAX + 1;

VE_LIBRARY_API const ::google::protobuf::EnumDescriptor* OnvifEventLevel_descriptor();
inline const ::std::string& OnvifEventLevel_Name(OnvifEventLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    OnvifEventLevel_descriptor(), value);
}
inline bool OnvifEventLevel_Parse(
    const ::std::string& name, OnvifEventLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OnvifEventLevel>(
    OnvifEventLevel_descriptor(), name, value);
}
enum VidLanguage {
  VID_LANG_AUTO = 0,
  VID_EN = 1,
  VID_ZH_CN = 2,
  VidLanguage_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VidLanguage_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
VE_LIBRARY_API bool VidLanguage_IsValid(int value);
const VidLanguage VidLanguage_MIN = VID_LANG_AUTO;
const VidLanguage VidLanguage_MAX = VID_ZH_CN;
const int VidLanguage_ARRAYSIZE = VidLanguage_MAX + 1;

VE_LIBRARY_API const ::google::protobuf::EnumDescriptor* VidLanguage_descriptor();
inline const ::std::string& VidLanguage_Name(VidLanguage value) {
  return ::google::protobuf::internal::NameOfEnum(
    VidLanguage_descriptor(), value);
}
inline bool VidLanguage_Parse(
    const ::std::string& name, VidLanguage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VidLanguage>(
    VidLanguage_descriptor(), name, value);
}
enum VidLayout {
  VID_LAYOUT_MODE_0 = 0,
  VID_LAYOUT_MODE_1 = 1,
  VID_LAYOUT_MODE_2X2 = 2,
  VID_LAYOUT_MODE_3X3 = 3,
  VID_LAYOUT_MODE_4X4 = 4,
  VID_LAYOUT_MODE_6 = 5,
  VID_LAYOUT_MODE_8 = 6,
  VID_LAYOUT_MODE_12p1 = 7,
  VID_LAYOUT_MODE_5x5 = 8,
  VID_LAYOUT_MODE_6x6 = 9,
  VID_LAYOUT_MODE_8x8 = 10,
  VID_LAYOUT_MODE_ONE = 11,
  VID_LAYOUT_MODE_1x3 = 12,
  VID_LAYOUT_MODE_1p6 = 13,
  VidLayout_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VidLayout_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
VE_LIBRARY_API bool VidLayout_IsValid(int value);
const VidLayout VidLayout_MIN = VID_LAYOUT_MODE_0;
const VidLayout VidLayout_MAX = VID_LAYOUT_MODE_1p6;
const int VidLayout_ARRAYSIZE = VidLayout_MAX + 1;

VE_LIBRARY_API const ::google::protobuf::EnumDescriptor* VidLayout_descriptor();
inline const ::std::string& VidLayout_Name(VidLayout value) {
  return ::google::protobuf::internal::NameOfEnum(
    VidLayout_descriptor(), value);
}
inline bool VidLayout_Parse(
    const ::std::string& name, VidLayout* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VidLayout>(
    VidLayout_descriptor(), name, value);
}
enum VidEventDBType {
  VID_DB_SQLITE = 0,
  VID_DB_POSTGRESQL = 1,
  VidEventDBType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VidEventDBType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
VE_LIBRARY_API bool VidEventDBType_IsValid(int value);
const VidEventDBType VidEventDBType_MIN = VID_DB_SQLITE;
const VidEventDBType VidEventDBType_MAX = VID_DB_POSTGRESQL;
const int VidEventDBType_ARRAYSIZE = VidEventDBType_MAX + 1;

VE_LIBRARY_API const ::google::protobuf::EnumDescriptor* VidEventDBType_descriptor();
inline const ::std::string& VidEventDBType_Name(VidEventDBType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VidEventDBType_descriptor(), value);
}
inline bool VidEventDBType_Parse(
    const ::std::string& name, VidEventDBType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VidEventDBType>(
    VidEventDBType_descriptor(), name, value);
}
// ===================================================================

class VE_LIBRARY_API VidUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidUser) */ {
 public:
  VidUser();
  virtual ~VidUser();

  VidUser(const VidUser& from);

  inline VidUser& operator=(const VidUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidUser& default_instance();

  static inline const VidUser* internal_default_instance() {
    return reinterpret_cast<const VidUser*>(
               &_VidUser_default_instance_);
  }

  void Swap(VidUser* other);

  // implements Message ----------------------------------------------

  inline VidUser* New() const PROTOBUF_FINAL { return New(NULL); }

  VidUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidUser& from);
  void MergeFrom(const VidUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // string strPasswd = 3;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 3;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_strpasswd(::std::string&& value);
  #endif
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // string strRoleId = 4;
  void clear_strroleid();
  static const int kStrRoleIdFieldNumber = 4;
  const ::std::string& strroleid() const;
  void set_strroleid(const ::std::string& value);
  #if LANG_CXX11
  void set_strroleid(::std::string&& value);
  #endif
  void set_strroleid(const char* value);
  void set_strroleid(const char* value, size_t size);
  ::std::string* mutable_strroleid();
  ::std::string* release_strroleid();
  void set_allocated_strroleid(::std::string* strroleid);

  // @@protoc_insertion_point(class_scope:VidUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  ::google::protobuf::internal::ArenaStringPtr strroleid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidUserList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidUserList) */ {
 public:
  VidUserList();
  virtual ~VidUserList();

  VidUserList(const VidUserList& from);

  inline VidUserList& operator=(const VidUserList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidUserList& default_instance();

  static inline const VidUserList* internal_default_instance() {
    return reinterpret_cast<const VidUserList*>(
               &_VidUserList_default_instance_);
  }

  void Swap(VidUserList* other);

  // implements Message ----------------------------------------------

  inline VidUserList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidUserList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidUserList& from);
  void MergeFrom(const VidUserList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidUserList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidUser cVidUser = 1;
  int cviduser_size() const;
  void clear_cviduser();
  static const int kCVidUserFieldNumber = 1;
  const ::VidUser& cviduser(int index) const;
  ::VidUser* mutable_cviduser(int index);
  ::VidUser* add_cviduser();
  ::google::protobuf::RepeatedPtrField< ::VidUser >*
      mutable_cviduser();
  const ::google::protobuf::RepeatedPtrField< ::VidUser >&
      cviduser() const;

  // @@protoc_insertion_point(class_scope:VidUserList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidUser > cviduser_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidStorServerConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidStorServerConf) */ {
 public:
  VidStorServerConf();
  virtual ~VidStorServerConf();

  VidStorServerConf(const VidStorServerConf& from);

  inline VidStorServerConf& operator=(const VidStorServerConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidStorServerConf& default_instance();

  static inline const VidStorServerConf* internal_default_instance() {
    return reinterpret_cast<const VidStorServerConf*>(
               &_VidStorServerConf_default_instance_);
  }

  void Swap(VidStorServerConf* other);

  // implements Message ----------------------------------------------

  inline VidStorServerConf* New() const PROTOBUF_FINAL { return New(NULL); }

  VidStorServerConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidStorServerConf& from);
  void MergeFrom(const VidStorServerConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidStorServerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strAdminPasswd = 2;
  void clear_stradminpasswd();
  static const int kStrAdminPasswdFieldNumber = 2;
  const ::std::string& stradminpasswd() const;
  void set_stradminpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_stradminpasswd(::std::string&& value);
  #endif
  void set_stradminpasswd(const char* value);
  void set_stradminpasswd(const char* value, size_t size);
  ::std::string* mutable_stradminpasswd();
  ::std::string* release_stradminpasswd();
  void set_allocated_stradminpasswd(::std::string* stradminpasswd);

  // int32 nOapiPort = 1;
  void clear_noapiport();
  static const int kNOapiPortFieldNumber = 1;
  ::google::protobuf::int32 noapiport() const;
  void set_noapiport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VidStorServerConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stradminpasswd_;
  ::google::protobuf::int32 noapiport_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidCamera : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidCamera) */ {
 public:
  VidCamera();
  virtual ~VidCamera();

  VidCamera(const VidCamera& from);

  inline VidCamera& operator=(const VidCamera& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidCamera& default_instance();

  static inline const VidCamera* internal_default_instance() {
    return reinterpret_cast<const VidCamera*>(
               &_VidCamera_default_instance_);
  }

  void Swap(VidCamera* other);

  // implements Message ----------------------------------------------

  inline VidCamera* New() const PROTOBUF_FINAL { return New(NULL); }

  VidCamera* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidCamera& from);
  void MergeFrom(const VidCamera& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidCamera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string cRecSched = 20;
  int crecsched_size() const;
  void clear_crecsched();
  static const int kCRecSchedFieldNumber = 20;
  const ::std::string& crecsched(int index) const;
  ::std::string* mutable_crecsched(int index);
  void set_crecsched(int index, const ::std::string& value);
  void set_crecsched(int index, const char* value);
  void set_crecsched(int index, const char* value, size_t size);
  ::std::string* add_crecsched();
  void add_crecsched(const ::std::string& value);
  void add_crecsched(const char* value);
  void add_crecsched(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& crecsched() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_crecsched();

  // string strId = 2;
  void clear_strid();
  static const int kStrIdFieldNumber = 2;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string strName = 3;
  void clear_strname();
  static const int kStrNameFieldNumber = 3;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // string strIP = 5;
  void clear_strip();
  static const int kStrIPFieldNumber = 5;
  const ::std::string& strip() const;
  void set_strip(const ::std::string& value);
  #if LANG_CXX11
  void set_strip(::std::string&& value);
  #endif
  void set_strip(const char* value);
  void set_strip(const char* value, size_t size);
  ::std::string* mutable_strip();
  ::std::string* release_strip();
  void set_allocated_strip(::std::string* strip);

  // string strPort = 6;
  void clear_strport();
  static const int kStrPortFieldNumber = 6;
  const ::std::string& strport() const;
  void set_strport(const ::std::string& value);
  #if LANG_CXX11
  void set_strport(::std::string&& value);
  #endif
  void set_strport(const char* value);
  void set_strport(const char* value, size_t size);
  ::std::string* mutable_strport();
  ::std::string* release_strport();
  void set_allocated_strport(::std::string* strport);

  // string strUser = 7;
  void clear_struser();
  static const int kStrUserFieldNumber = 7;
  const ::std::string& struser() const;
  void set_struser(const ::std::string& value);
  #if LANG_CXX11
  void set_struser(::std::string&& value);
  #endif
  void set_struser(const char* value);
  void set_struser(const char* value, size_t size);
  ::std::string* mutable_struser();
  ::std::string* release_struser();
  void set_allocated_struser(::std::string* struser);

  // string strPasswd = 8;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 8;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_strpasswd(::std::string&& value);
  #endif
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // string strONVIFAddress = 9;
  void clear_stronvifaddress();
  static const int kStrONVIFAddressFieldNumber = 9;
  const ::std::string& stronvifaddress() const;
  void set_stronvifaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_stronvifaddress(::std::string&& value);
  #endif
  void set_stronvifaddress(const char* value);
  void set_stronvifaddress(const char* value, size_t size);
  ::std::string* mutable_stronvifaddress();
  ::std::string* release_stronvifaddress();
  void set_allocated_stronvifaddress(::std::string* stronvifaddress);

  // string strProfileToken1 = 11;
  void clear_strprofiletoken1();
  static const int kStrProfileToken1FieldNumber = 11;
  const ::std::string& strprofiletoken1() const;
  void set_strprofiletoken1(const ::std::string& value);
  #if LANG_CXX11
  void set_strprofiletoken1(::std::string&& value);
  #endif
  void set_strprofiletoken1(const char* value);
  void set_strprofiletoken1(const char* value, size_t size);
  ::std::string* mutable_strprofiletoken1();
  ::std::string* release_strprofiletoken1();
  void set_allocated_strprofiletoken1(::std::string* strprofiletoken1);

  // string strProfileToken2 = 12;
  void clear_strprofiletoken2();
  static const int kStrProfileToken2FieldNumber = 12;
  const ::std::string& strprofiletoken2() const;
  void set_strprofiletoken2(const ::std::string& value);
  #if LANG_CXX11
  void set_strprofiletoken2(::std::string&& value);
  #endif
  void set_strprofiletoken2(const char* value);
  void set_strprofiletoken2(const char* value, size_t size);
  ::std::string* mutable_strprofiletoken2();
  ::std::string* release_strprofiletoken2();
  void set_allocated_strprofiletoken2(::std::string* strprofiletoken2);

  // string strFile = 13;
  void clear_strfile();
  static const int kStrFileFieldNumber = 13;
  const ::std::string& strfile() const;
  void set_strfile(const ::std::string& value);
  #if LANG_CXX11
  void set_strfile(::std::string&& value);
  #endif
  void set_strfile(const char* value);
  void set_strfile(const char* value, size_t size);
  ::std::string* mutable_strfile();
  ::std::string* release_strfile();
  void set_allocated_strfile(::std::string* strfile);

  // string strRTSPUrl = 14;
  void clear_strrtspurl();
  static const int kStrRTSPUrlFieldNumber = 14;
  const ::std::string& strrtspurl() const;
  void set_strrtspurl(const ::std::string& value);
  #if LANG_CXX11
  void set_strrtspurl(::std::string&& value);
  #endif
  void set_strrtspurl(const char* value);
  void set_strrtspurl(const char* value, size_t size);
  ::std::string* mutable_strrtspurl();
  ::std::string* release_strrtspurl();
  void set_allocated_strrtspurl(::std::string* strrtspurl);

  // string strSched = 27;
  void clear_strsched();
  static const int kStrSchedFieldNumber = 27;
  const ::std::string& strsched() const;
  void set_strsched(const ::std::string& value);
  #if LANG_CXX11
  void set_strsched(::std::string&& value);
  #endif
  void set_strsched(const char* value);
  void set_strsched(const char* value, size_t size);
  ::std::string* mutable_strsched();
  ::std::string* release_strsched();
  void set_allocated_strsched(::std::string* strsched);

  // string strMotReg = 28;
  void clear_strmotreg();
  static const int kStrMotRegFieldNumber = 28;
  const ::std::string& strmotreg() const;
  void set_strmotreg(const ::std::string& value);
  #if LANG_CXX11
  void set_strmotreg(::std::string&& value);
  #endif
  void set_strmotreg(const char* value);
  void set_strmotreg(const char* value, size_t size);
  ::std::string* mutable_strmotreg();
  ::std::string* release_strmotreg();
  void set_allocated_strmotreg(::std::string* strmotreg);

  // .CameraType nType = 4;
  void clear_ntype();
  static const int kNTypeFieldNumber = 4;
  ::CameraType ntype() const;
  void set_ntype(::CameraType value);

  // bool bDisable = 1;
  void clear_bdisable();
  static const int kBDisableFieldNumber = 1;
  bool bdisable() const;
  void set_bdisable(bool value);

  // bool bProfileToken = 10;
  void clear_bprofiletoken();
  static const int kBProfileTokenFieldNumber = 10;
  bool bprofiletoken() const;
  void set_bprofiletoken(bool value);

  // bool bHWaccel = 15;
  void clear_bhwaccel();
  static const int kBHWaccelFieldNumber = 15;
  bool bhwaccel() const;
  void set_bhwaccel(bool value);

  // bool bServerMotion = 16;
  void clear_bservermotion();
  static const int kBServerMotionFieldNumber = 16;
  bool bservermotion() const;
  void set_bservermotion(bool value);

  // .CameraConnectType nConnectType = 17;
  void clear_nconnecttype();
  static const int kNConnectTypeFieldNumber = 17;
  ::CameraConnectType nconnecttype() const;
  void set_nconnecttype(::CameraConnectType value);

  // int32 nPreRecSec = 21;
  void clear_nprerecsec();
  static const int kNPreRecSecFieldNumber = 21;
  ::google::protobuf::int32 nprerecsec() const;
  void set_nprerecsec(::google::protobuf::int32 value);

  // int32 nPostRecSec = 22;
  void clear_npostrecsec();
  static const int kNPostRecSecFieldNumber = 22;
  ::google::protobuf::int32 npostrecsec() const;
  void set_npostrecsec(::google::protobuf::int32 value);

  // int32 nRecordStream = 24;
  void clear_nrecordstream();
  static const int kNRecordStreamFieldNumber = 24;
  ::google::protobuf::int32 nrecordstream() const;
  void set_nrecordstream(::google::protobuf::int32 value);

  // int32 nServerMotionStream = 25;
  void clear_nservermotionstream();
  static const int kNServerMotionStreamFieldNumber = 25;
  ::google::protobuf::int32 nservermotionstream() const;
  void set_nservermotionstream(::google::protobuf::int32 value);

  // bool bHDFSRecord = 18;
  void clear_bhdfsrecord();
  static const int kBHDFSRecordFieldNumber = 18;
  bool bhdfsrecord() const;
  void set_bhdfsrecord(bool value);

  // bool bMotionJPEG = 23;
  void clear_bmotionjpeg();
  static const int kBMotionJPEGFieldNumber = 23;
  bool bmotionjpeg() const;
  void set_bmotionjpeg(bool value);

  // bool bOnline = 29;
  void clear_bonline();
  static const int kBOnlineFieldNumber = 29;
  bool bonline() const;
  void set_bonline(bool value);

  // bool bRec = 30;
  void clear_brec();
  static const int kBRecFieldNumber = 30;
  bool brec() const;
  void set_brec(bool value);

  // .OnvifEventLevel nOnvifEvtLevel = 26;
  void clear_nonvifevtlevel();
  static const int kNOnvifEvtLevelFieldNumber = 26;
  ::OnvifEventLevel nonvifevtlevel() const;
  void set_nonvifevtlevel(::OnvifEventLevel value);

  // @@protoc_insertion_point(class_scope:VidCamera)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> crecsched_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::internal::ArenaStringPtr strip_;
  ::google::protobuf::internal::ArenaStringPtr strport_;
  ::google::protobuf::internal::ArenaStringPtr struser_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  ::google::protobuf::internal::ArenaStringPtr stronvifaddress_;
  ::google::protobuf::internal::ArenaStringPtr strprofiletoken1_;
  ::google::protobuf::internal::ArenaStringPtr strprofiletoken2_;
  ::google::protobuf::internal::ArenaStringPtr strfile_;
  ::google::protobuf::internal::ArenaStringPtr strrtspurl_;
  ::google::protobuf::internal::ArenaStringPtr strsched_;
  ::google::protobuf::internal::ArenaStringPtr strmotreg_;
  int ntype_;
  bool bdisable_;
  bool bprofiletoken_;
  bool bhwaccel_;
  bool bservermotion_;
  int nconnecttype_;
  ::google::protobuf::int32 nprerecsec_;
  ::google::protobuf::int32 npostrecsec_;
  ::google::protobuf::int32 nrecordstream_;
  ::google::protobuf::int32 nservermotionstream_;
  bool bhdfsrecord_;
  bool bmotionjpeg_;
  bool bonline_;
  bool brec_;
  int nonvifevtlevel_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidCameraList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidCameraList) */ {
 public:
  VidCameraList();
  virtual ~VidCameraList();

  VidCameraList(const VidCameraList& from);

  inline VidCameraList& operator=(const VidCameraList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidCameraList& default_instance();

  static inline const VidCameraList* internal_default_instance() {
    return reinterpret_cast<const VidCameraList*>(
               &_VidCameraList_default_instance_);
  }

  void Swap(VidCameraList* other);

  // implements Message ----------------------------------------------

  inline VidCameraList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidCameraList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidCameraList& from);
  void MergeFrom(const VidCameraList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidCameraList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidCamera cVidCamera = 1;
  int cvidcamera_size() const;
  void clear_cvidcamera();
  static const int kCVidCameraFieldNumber = 1;
  const ::VidCamera& cvidcamera(int index) const;
  ::VidCamera* mutable_cvidcamera(int index);
  ::VidCamera* add_cvidcamera();
  ::google::protobuf::RepeatedPtrField< ::VidCamera >*
      mutable_cvidcamera();
  const ::google::protobuf::RepeatedPtrField< ::VidCamera >&
      cvidcamera() const;

  // @@protoc_insertion_point(class_scope:VidCameraList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidCamera > cvidcamera_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidDisk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidDisk) */ {
 public:
  VidDisk();
  virtual ~VidDisk();

  VidDisk(const VidDisk& from);

  inline VidDisk& operator=(const VidDisk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidDisk& default_instance();

  static inline const VidDisk* internal_default_instance() {
    return reinterpret_cast<const VidDisk*>(
               &_VidDisk_default_instance_);
  }

  void Swap(VidDisk* other);

  // implements Message ----------------------------------------------

  inline VidDisk* New() const PROTOBUF_FINAL { return New(NULL); }

  VidDisk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidDisk& from);
  void MergeFrom(const VidDisk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidDisk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string strPath = 2;
  void clear_strpath();
  static const int kStrPathFieldNumber = 2;
  const ::std::string& strpath() const;
  void set_strpath(const ::std::string& value);
  #if LANG_CXX11
  void set_strpath(::std::string&& value);
  #endif
  void set_strpath(const char* value);
  void set_strpath(const char* value, size_t size);
  ::std::string* mutable_strpath();
  ::std::string* release_strpath();
  void set_allocated_strpath(::std::string* strpath);

  // int64 nTotalSize = 3;
  void clear_ntotalsize();
  static const int kNTotalSizeFieldNumber = 3;
  ::google::protobuf::int64 ntotalsize() const;
  void set_ntotalsize(::google::protobuf::int64 value);

  // int64 nFreeSize = 4;
  void clear_nfreesize();
  static const int kNFreeSizeFieldNumber = 4;
  ::google::protobuf::int64 nfreesize() const;
  void set_nfreesize(::google::protobuf::int64 value);

  // int64 nStorLimit = 5;
  void clear_nstorlimit();
  static const int kNStorLimitFieldNumber = 5;
  ::google::protobuf::int64 nstorlimit() const;
  void set_nstorlimit(::google::protobuf::int64 value);

  // int64 nStorUsed = 6;
  void clear_nstorused();
  static const int kNStorUsedFieldNumber = 6;
  ::google::protobuf::int64 nstorused() const;
  void set_nstorused(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:VidDisk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strpath_;
  ::google::protobuf::int64 ntotalsize_;
  ::google::protobuf::int64 nfreesize_;
  ::google::protobuf::int64 nstorlimit_;
  ::google::protobuf::int64 nstorused_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidDiskList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidDiskList) */ {
 public:
  VidDiskList();
  virtual ~VidDiskList();

  VidDiskList(const VidDiskList& from);

  inline VidDiskList& operator=(const VidDiskList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidDiskList& default_instance();

  static inline const VidDiskList* internal_default_instance() {
    return reinterpret_cast<const VidDiskList*>(
               &_VidDiskList_default_instance_);
  }

  void Swap(VidDiskList* other);

  // implements Message ----------------------------------------------

  inline VidDiskList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidDiskList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidDiskList& from);
  void MergeFrom(const VidDiskList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidDiskList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidDisk cVidDisk = 1;
  int cviddisk_size() const;
  void clear_cviddisk();
  static const int kCVidDiskFieldNumber = 1;
  const ::VidDisk& cviddisk(int index) const;
  ::VidDisk* mutable_cviddisk(int index);
  ::VidDisk* add_cviddisk();
  ::google::protobuf::RepeatedPtrField< ::VidDisk >*
      mutable_cviddisk();
  const ::google::protobuf::RepeatedPtrField< ::VidDisk >&
      cviddisk() const;

  // @@protoc_insertion_point(class_scope:VidDiskList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidDisk > cviddisk_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidHDFSConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidHDFSConf) */ {
 public:
  VidHDFSConf();
  virtual ~VidHDFSConf();

  VidHDFSConf(const VidHDFSConf& from);

  inline VidHDFSConf& operator=(const VidHDFSConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidHDFSConf& default_instance();

  static inline const VidHDFSConf* internal_default_instance() {
    return reinterpret_cast<const VidHDFSConf*>(
               &_VidHDFSConf_default_instance_);
  }

  void Swap(VidHDFSConf* other);

  // implements Message ----------------------------------------------

  inline VidHDFSConf* New() const PROTOBUF_FINAL { return New(NULL); }

  VidHDFSConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidHDFSConf& from);
  void MergeFrom(const VidHDFSConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidHDFSConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strNameNode = 1;
  void clear_strnamenode();
  static const int kStrNameNodeFieldNumber = 1;
  const ::std::string& strnamenode() const;
  void set_strnamenode(const ::std::string& value);
  #if LANG_CXX11
  void set_strnamenode(::std::string&& value);
  #endif
  void set_strnamenode(const char* value);
  void set_strnamenode(const char* value, size_t size);
  ::std::string* mutable_strnamenode();
  ::std::string* release_strnamenode();
  void set_allocated_strnamenode(::std::string* strnamenode);

  // string strPort = 2;
  void clear_strport();
  static const int kStrPortFieldNumber = 2;
  const ::std::string& strport() const;
  void set_strport(const ::std::string& value);
  #if LANG_CXX11
  void set_strport(::std::string&& value);
  #endif
  void set_strport(const char* value);
  void set_strport(const char* value, size_t size);
  ::std::string* mutable_strport();
  ::std::string* release_strport();
  void set_allocated_strport(::std::string* strport);

  // string strUser = 3;
  void clear_struser();
  static const int kStrUserFieldNumber = 3;
  const ::std::string& struser() const;
  void set_struser(const ::std::string& value);
  #if LANG_CXX11
  void set_struser(::std::string&& value);
  #endif
  void set_struser(const char* value);
  void set_struser(const char* value, size_t size);
  ::std::string* mutable_struser();
  ::std::string* release_struser();
  void set_allocated_struser(::std::string* struser);

  // string strPasswd = 4;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 4;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_strpasswd(::std::string&& value);
  #endif
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // int32 nFileInterval = 5;
  void clear_nfileinterval();
  static const int kNFileIntervalFieldNumber = 5;
  ::google::protobuf::int32 nfileinterval() const;
  void set_nfileinterval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VidHDFSConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strnamenode_;
  ::google::protobuf::internal::ArenaStringPtr strport_;
  ::google::protobuf::internal::ArenaStringPtr struser_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  ::google::protobuf::int32 nfileinterval_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidCameraId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidCameraId) */ {
 public:
  VidCameraId();
  virtual ~VidCameraId();

  VidCameraId(const VidCameraId& from);

  inline VidCameraId& operator=(const VidCameraId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidCameraId& default_instance();

  static inline const VidCameraId* internal_default_instance() {
    return reinterpret_cast<const VidCameraId*>(
               &_VidCameraId_default_instance_);
  }

  void Swap(VidCameraId* other);

  // implements Message ----------------------------------------------

  inline VidCameraId* New() const PROTOBUF_FINAL { return New(NULL); }

  VidCameraId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidCameraId& from);
  void MergeFrom(const VidCameraId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidCameraId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strStorId = 1;
  void clear_strstorid();
  static const int kStrStorIdFieldNumber = 1;
  const ::std::string& strstorid() const;
  void set_strstorid(const ::std::string& value);
  #if LANG_CXX11
  void set_strstorid(::std::string&& value);
  #endif
  void set_strstorid(const char* value);
  void set_strstorid(const char* value, size_t size);
  ::std::string* mutable_strstorid();
  ::std::string* release_strstorid();
  void set_allocated_strstorid(::std::string* strstorid);

  // string strCameraId = 2;
  void clear_strcameraid();
  static const int kStrCameraIdFieldNumber = 2;
  const ::std::string& strcameraid() const;
  void set_strcameraid(const ::std::string& value);
  #if LANG_CXX11
  void set_strcameraid(::std::string&& value);
  #endif
  void set_strcameraid(const char* value);
  void set_strcameraid(const char* value, size_t size);
  ::std::string* mutable_strcameraid();
  ::std::string* release_strcameraid();
  void set_allocated_strcameraid(::std::string* strcameraid);

  // @@protoc_insertion_point(class_scope:VidCameraId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strstorid_;
  ::google::protobuf::internal::ArenaStringPtr strcameraid_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidClientConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidClientConf) */ {
 public:
  VidClientConf();
  virtual ~VidClientConf();

  VidClientConf(const VidClientConf& from);

  inline VidClientConf& operator=(const VidClientConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidClientConf& default_instance();

  static inline const VidClientConf* internal_default_instance() {
    return reinterpret_cast<const VidClientConf*>(
               &_VidClientConf_default_instance_);
  }

  void Swap(VidClientConf* other);

  // implements Message ----------------------------------------------

  inline VidClientConf* New() const PROTOBUF_FINAL { return New(NULL); }

  VidClientConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidClientConf& from);
  void MergeFrom(const VidClientConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidClientConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strAdminPasswd = 2;
  void clear_stradminpasswd();
  static const int kStrAdminPasswdFieldNumber = 2;
  const ::std::string& stradminpasswd() const;
  void set_stradminpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_stradminpasswd(::std::string&& value);
  #endif
  void set_stradminpasswd(const char* value);
  void set_stradminpasswd(const char* value, size_t size);
  ::std::string* mutable_stradminpasswd();
  ::std::string* release_stradminpasswd();
  void set_allocated_stradminpasswd(::std::string* stradminpasswd);

  // .VidLanguage nLang = 1;
  void clear_nlang();
  static const int kNLangFieldNumber = 1;
  ::VidLanguage nlang() const;
  void set_nlang(::VidLanguage value);

  // bool bAutoLogin = 3;
  void clear_bautologin();
  static const int kBAutoLoginFieldNumber = 3;
  bool bautologin() const;
  void set_bautologin(bool value);

  // bool bAutoFullScreen = 4;
  void clear_bautofullscreen();
  static const int kBAutoFullScreenFieldNumber = 4;
  bool bautofullscreen() const;
  void set_bautofullscreen(bool value);

  // @@protoc_insertion_point(class_scope:VidClientConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stradminpasswd_;
  int nlang_;
  bool bautologin_;
  bool bautofullscreen_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidStor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidStor) */ {
 public:
  VidStor();
  virtual ~VidStor();

  VidStor(const VidStor& from);

  inline VidStor& operator=(const VidStor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidStor& default_instance();

  static inline const VidStor* internal_default_instance() {
    return reinterpret_cast<const VidStor*>(
               &_VidStor_default_instance_);
  }

  void Swap(VidStor* other);

  // implements Message ----------------------------------------------

  inline VidStor* New() const PROTOBUF_FINAL { return New(NULL); }

  VidStor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidStor& from);
  void MergeFrom(const VidStor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidStor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // string strIP = 3;
  void clear_strip();
  static const int kStrIPFieldNumber = 3;
  const ::std::string& strip() const;
  void set_strip(const ::std::string& value);
  #if LANG_CXX11
  void set_strip(::std::string&& value);
  #endif
  void set_strip(const char* value);
  void set_strip(const char* value, size_t size);
  ::std::string* mutable_strip();
  ::std::string* release_strip();
  void set_allocated_strip(::std::string* strip);

  // string strPort = 4;
  void clear_strport();
  static const int kStrPortFieldNumber = 4;
  const ::std::string& strport() const;
  void set_strport(const ::std::string& value);
  #if LANG_CXX11
  void set_strport(::std::string&& value);
  #endif
  void set_strport(const char* value);
  void set_strport(const char* value, size_t size);
  ::std::string* mutable_strport();
  ::std::string* release_strport();
  void set_allocated_strport(::std::string* strport);

  // string strUser = 5;
  void clear_struser();
  static const int kStrUserFieldNumber = 5;
  const ::std::string& struser() const;
  void set_struser(const ::std::string& value);
  #if LANG_CXX11
  void set_struser(::std::string&& value);
  #endif
  void set_struser(const char* value);
  void set_struser(const char* value, size_t size);
  ::std::string* mutable_struser();
  ::std::string* release_struser();
  void set_allocated_struser(::std::string* struser);

  // string strPasswd = 6;
  void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 6;
  const ::std::string& strpasswd() const;
  void set_strpasswd(const ::std::string& value);
  #if LANG_CXX11
  void set_strpasswd(::std::string&& value);
  #endif
  void set_strpasswd(const char* value);
  void set_strpasswd(const char* value, size_t size);
  ::std::string* mutable_strpasswd();
  ::std::string* release_strpasswd();
  void set_allocated_strpasswd(::std::string* strpasswd);

  // @@protoc_insertion_point(class_scope:VidStor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::google::protobuf::internal::ArenaStringPtr strip_;
  ::google::protobuf::internal::ArenaStringPtr strport_;
  ::google::protobuf::internal::ArenaStringPtr struser_;
  ::google::protobuf::internal::ArenaStringPtr strpasswd_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidStorList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidStorList) */ {
 public:
  VidStorList();
  virtual ~VidStorList();

  VidStorList(const VidStorList& from);

  inline VidStorList& operator=(const VidStorList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidStorList& default_instance();

  static inline const VidStorList* internal_default_instance() {
    return reinterpret_cast<const VidStorList*>(
               &_VidStorList_default_instance_);
  }

  void Swap(VidStorList* other);

  // implements Message ----------------------------------------------

  inline VidStorList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidStorList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidStorList& from);
  void MergeFrom(const VidStorList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidStorList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidStor cVidStor = 1;
  int cvidstor_size() const;
  void clear_cvidstor();
  static const int kCVidStorFieldNumber = 1;
  const ::VidStor& cvidstor(int index) const;
  ::VidStor* mutable_cvidstor(int index);
  ::VidStor* add_cvidstor();
  ::google::protobuf::RepeatedPtrField< ::VidStor >*
      mutable_cvidstor();
  const ::google::protobuf::RepeatedPtrField< ::VidStor >&
      cvidstor() const;

  // @@protoc_insertion_point(class_scope:VidStorList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidStor > cvidstor_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidViewWindow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidViewWindow) */ {
 public:
  VidViewWindow();
  virtual ~VidViewWindow();

  VidViewWindow(const VidViewWindow& from);

  inline VidViewWindow& operator=(const VidViewWindow& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidViewWindow& default_instance();

  static inline const VidViewWindow* internal_default_instance() {
    return reinterpret_cast<const VidViewWindow*>(
               &_VidViewWindow_default_instance_);
  }

  void Swap(VidViewWindow* other);

  // implements Message ----------------------------------------------

  inline VidViewWindow* New() const PROTOBUF_FINAL { return New(NULL); }

  VidViewWindow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidViewWindow& from);
  void MergeFrom(const VidViewWindow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidViewWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidCameraId cId = 1;
  bool has_cid() const;
  void clear_cid();
  static const int kCIdFieldNumber = 1;
  const ::VidCameraId& cid() const;
  ::VidCameraId* mutable_cid();
  ::VidCameraId* release_cid();
  void set_allocated_cid(::VidCameraId* cid);

  // int32 nWindowsId = 2;
  void clear_nwindowsid();
  static const int kNWindowsIdFieldNumber = 2;
  ::google::protobuf::int32 nwindowsid() const;
  void set_nwindowsid(::google::protobuf::int32 value);

  // bool bHWAccel = 3;
  void clear_bhwaccel();
  static const int kBHWAccelFieldNumber = 3;
  bool bhwaccel() const;
  void set_bhwaccel(bool value);

  // @@protoc_insertion_point(class_scope:VidViewWindow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidCameraId* cid_;
  ::google::protobuf::int32 nwindowsid_;
  bool bhwaccel_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidView : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidView) */ {
 public:
  VidView();
  virtual ~VidView();

  VidView(const VidView& from);

  inline VidView& operator=(const VidView& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidView& default_instance();

  static inline const VidView* internal_default_instance() {
    return reinterpret_cast<const VidView*>(
               &_VidView_default_instance_);
  }

  void Swap(VidView* other);

  // implements Message ----------------------------------------------

  inline VidView* New() const PROTOBUF_FINAL { return New(NULL); }

  VidView* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidView& from);
  void MergeFrom(const VidView& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidViewWindow cView = 3;
  int cview_size() const;
  void clear_cview();
  static const int kCViewFieldNumber = 3;
  const ::VidViewWindow& cview(int index) const;
  ::VidViewWindow* mutable_cview(int index);
  ::VidViewWindow* add_cview();
  ::google::protobuf::RepeatedPtrField< ::VidViewWindow >*
      mutable_cview();
  const ::google::protobuf::RepeatedPtrField< ::VidViewWindow >&
      cview() const;

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // .VidLayout cLayout = 4;
  void clear_clayout();
  static const int kCLayoutFieldNumber = 4;
  ::VidLayout clayout() const;
  void set_clayout(::VidLayout value);

  // @@protoc_insertion_point(class_scope:VidView)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidViewWindow > cview_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  int clayout_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidViewList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidViewList) */ {
 public:
  VidViewList();
  virtual ~VidViewList();

  VidViewList(const VidViewList& from);

  inline VidViewList& operator=(const VidViewList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidViewList& default_instance();

  static inline const VidViewList* internal_default_instance() {
    return reinterpret_cast<const VidViewList*>(
               &_VidViewList_default_instance_);
  }

  void Swap(VidViewList* other);

  // implements Message ----------------------------------------------

  inline VidViewList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidViewList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidViewList& from);
  void MergeFrom(const VidViewList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidViewList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidView cVidView = 1;
  int cvidview_size() const;
  void clear_cvidview();
  static const int kCVidViewFieldNumber = 1;
  const ::VidView& cvidview(int index) const;
  ::VidView* mutable_cvidview(int index);
  ::VidView* add_cvidview();
  ::google::protobuf::RepeatedPtrField< ::VidView >*
      mutable_cvidview();
  const ::google::protobuf::RepeatedPtrField< ::VidView >&
      cvidview() const;

  // @@protoc_insertion_point(class_scope:VidViewList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidView > cvidview_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidTour : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidTour) */ {
 public:
  VidTour();
  virtual ~VidTour();

  VidTour(const VidTour& from);

  inline VidTour& operator=(const VidTour& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidTour& default_instance();

  static inline const VidTour* internal_default_instance() {
    return reinterpret_cast<const VidTour*>(
               &_VidTour_default_instance_);
  }

  void Swap(VidTour* other);

  // implements Message ----------------------------------------------

  inline VidTour* New() const PROTOBUF_FINAL { return New(NULL); }

  VidTour* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidTour& from);
  void MergeFrom(const VidTour& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidTour* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string strView = 3;
  int strview_size() const;
  void clear_strview();
  static const int kStrViewFieldNumber = 3;
  const ::std::string& strview(int index) const;
  ::std::string* mutable_strview(int index);
  void set_strview(int index, const ::std::string& value);
  void set_strview(int index, const char* value);
  void set_strview(int index, const char* value, size_t size);
  ::std::string* add_strview();
  void add_strview(const ::std::string& value);
  void add_strview(const char* value);
  void add_strview(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& strview() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strview();

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // @@protoc_insertion_point(class_scope:VidTour)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strview_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidTourList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidTourList) */ {
 public:
  VidTourList();
  virtual ~VidTourList();

  VidTourList(const VidTourList& from);

  inline VidTourList& operator=(const VidTourList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidTourList& default_instance();

  static inline const VidTourList* internal_default_instance() {
    return reinterpret_cast<const VidTourList*>(
               &_VidTourList_default_instance_);
  }

  void Swap(VidTourList* other);

  // implements Message ----------------------------------------------

  inline VidTourList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidTourList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidTourList& from);
  void MergeFrom(const VidTourList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidTourList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidTour cVidTour = 1;
  int cvidtour_size() const;
  void clear_cvidtour();
  static const int kCVidTourFieldNumber = 1;
  const ::VidTour& cvidtour(int index) const;
  ::VidTour* mutable_cvidtour(int index);
  ::VidTour* add_cvidtour();
  ::google::protobuf::RepeatedPtrField< ::VidTour >*
      mutable_cvidtour();
  const ::google::protobuf::RepeatedPtrField< ::VidTour >&
      cvidtour() const;

  // @@protoc_insertion_point(class_scope:VidTourList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidTour > cvidtour_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidGroup) */ {
 public:
  VidGroup();
  virtual ~VidGroup();

  VidGroup(const VidGroup& from);

  inline VidGroup& operator=(const VidGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidGroup& default_instance();

  static inline const VidGroup* internal_default_instance() {
    return reinterpret_cast<const VidGroup*>(
               &_VidGroup_default_instance_);
  }

  void Swap(VidGroup* other);

  // implements Message ----------------------------------------------

  inline VidGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  VidGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidGroup& from);
  void MergeFrom(const VidGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidCameraId cGroup = 3;
  int cgroup_size() const;
  void clear_cgroup();
  static const int kCGroupFieldNumber = 3;
  const ::VidCameraId& cgroup(int index) const;
  ::VidCameraId* mutable_cgroup(int index);
  ::VidCameraId* add_cgroup();
  ::google::protobuf::RepeatedPtrField< ::VidCameraId >*
      mutable_cgroup();
  const ::google::protobuf::RepeatedPtrField< ::VidCameraId >&
      cgroup() const;

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // @@protoc_insertion_point(class_scope:VidGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidCameraId > cgroup_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidGroupList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidGroupList) */ {
 public:
  VidGroupList();
  virtual ~VidGroupList();

  VidGroupList(const VidGroupList& from);

  inline VidGroupList& operator=(const VidGroupList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidGroupList& default_instance();

  static inline const VidGroupList* internal_default_instance() {
    return reinterpret_cast<const VidGroupList*>(
               &_VidGroupList_default_instance_);
  }

  void Swap(VidGroupList* other);

  // implements Message ----------------------------------------------

  inline VidGroupList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidGroupList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidGroupList& from);
  void MergeFrom(const VidGroupList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidGroupList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidGroup cVidGroup = 1;
  int cvidgroup_size() const;
  void clear_cvidgroup();
  static const int kCVidGroupFieldNumber = 1;
  const ::VidGroup& cvidgroup(int index) const;
  ::VidGroup* mutable_cvidgroup(int index);
  ::VidGroup* add_cvidgroup();
  ::google::protobuf::RepeatedPtrField< ::VidGroup >*
      mutable_cvidgroup();
  const ::google::protobuf::RepeatedPtrField< ::VidGroup >&
      cvidgroup() const;

  // @@protoc_insertion_point(class_scope:VidGroupList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidGroup > cvidgroup_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidEmapCamera : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidEmapCamera) */ {
 public:
  VidEmapCamera();
  virtual ~VidEmapCamera();

  VidEmapCamera(const VidEmapCamera& from);

  inline VidEmapCamera& operator=(const VidEmapCamera& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidEmapCamera& default_instance();

  static inline const VidEmapCamera* internal_default_instance() {
    return reinterpret_cast<const VidEmapCamera*>(
               &_VidEmapCamera_default_instance_);
  }

  void Swap(VidEmapCamera* other);

  // implements Message ----------------------------------------------

  inline VidEmapCamera* New() const PROTOBUF_FINAL { return New(NULL); }

  VidEmapCamera* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidEmapCamera& from);
  void MergeFrom(const VidEmapCamera& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidEmapCamera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .VidCameraId cId = 1;
  bool has_cid() const;
  void clear_cid();
  static const int kCIdFieldNumber = 1;
  const ::VidCameraId& cid() const;
  ::VidCameraId* mutable_cid();
  ::VidCameraId* release_cid();
  void set_allocated_cid(::VidCameraId* cid);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  ::google::protobuf::int32 w() const;
  void set_w(::google::protobuf::int32 value);

  // int32 h = 5;
  void clear_h();
  static const int kHFieldNumber = 5;
  ::google::protobuf::int32 h() const;
  void set_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VidEmapCamera)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::VidCameraId* cid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidEmap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidEmap) */ {
 public:
  VidEmap();
  virtual ~VidEmap();

  VidEmap(const VidEmap& from);

  inline VidEmap& operator=(const VidEmap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidEmap& default_instance();

  static inline const VidEmap* internal_default_instance() {
    return reinterpret_cast<const VidEmap*>(
               &_VidEmap_default_instance_);
  }

  void Swap(VidEmap* other);

  // implements Message ----------------------------------------------

  inline VidEmap* New() const PROTOBUF_FINAL { return New(NULL); }

  VidEmap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidEmap& from);
  void MergeFrom(const VidEmap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidEmap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidEmapCamera cCamera = 3;
  int ccamera_size() const;
  void clear_ccamera();
  static const int kCCameraFieldNumber = 3;
  const ::VidEmapCamera& ccamera(int index) const;
  ::VidEmapCamera* mutable_ccamera(int index);
  ::VidEmapCamera* add_ccamera();
  ::google::protobuf::RepeatedPtrField< ::VidEmapCamera >*
      mutable_ccamera();
  const ::google::protobuf::RepeatedPtrField< ::VidEmapCamera >&
      ccamera() const;

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // @@protoc_insertion_point(class_scope:VidEmap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidEmapCamera > ccamera_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidEmapList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidEmapList) */ {
 public:
  VidEmapList();
  virtual ~VidEmapList();

  VidEmapList(const VidEmapList& from);

  inline VidEmapList& operator=(const VidEmapList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidEmapList& default_instance();

  static inline const VidEmapList* internal_default_instance() {
    return reinterpret_cast<const VidEmapList*>(
               &_VidEmapList_default_instance_);
  }

  void Swap(VidEmapList* other);

  // implements Message ----------------------------------------------

  inline VidEmapList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidEmapList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidEmapList& from);
  void MergeFrom(const VidEmapList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidEmapList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidEmap cVidEmap = 1;
  int cvidemap_size() const;
  void clear_cvidemap();
  static const int kCVidEmapFieldNumber = 1;
  const ::VidEmap& cvidemap(int index) const;
  ::VidEmap* mutable_cvidemap(int index);
  ::VidEmap* add_cvidemap();
  ::google::protobuf::RepeatedPtrField< ::VidEmap >*
      mutable_cvidemap();
  const ::google::protobuf::RepeatedPtrField< ::VidEmap >&
      cvidemap() const;

  // @@protoc_insertion_point(class_scope:VidEmapList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidEmap > cvidemap_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidStream) */ {
 public:
  VidStream();
  virtual ~VidStream();

  VidStream(const VidStream& from);

  inline VidStream& operator=(const VidStream& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidStream& default_instance();

  static inline const VidStream* internal_default_instance() {
    return reinterpret_cast<const VidStream*>(
               &_VidStream_default_instance_);
  }

  void Swap(VidStream* other);

  // implements Message ----------------------------------------------

  inline VidStream* New() const PROTOBUF_FINAL { return New(NULL); }

  VidStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidStream& from);
  void MergeFrom(const VidStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strToken = 1;
  void clear_strtoken();
  static const int kStrTokenFieldNumber = 1;
  const ::std::string& strtoken() const;
  void set_strtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_strtoken(::std::string&& value);
  #endif
  void set_strtoken(const char* value);
  void set_strtoken(const char* value, size_t size);
  ::std::string* mutable_strtoken();
  ::std::string* release_strtoken();
  void set_allocated_strtoken(::std::string* strtoken);

  // string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // @@protoc_insertion_point(class_scope:VidStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strtoken_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidStreamList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidStreamList) */ {
 public:
  VidStreamList();
  virtual ~VidStreamList();

  VidStreamList(const VidStreamList& from);

  inline VidStreamList& operator=(const VidStreamList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidStreamList& default_instance();

  static inline const VidStreamList* internal_default_instance() {
    return reinterpret_cast<const VidStreamList*>(
               &_VidStreamList_default_instance_);
  }

  void Swap(VidStreamList* other);

  // implements Message ----------------------------------------------

  inline VidStreamList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidStreamList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidStreamList& from);
  void MergeFrom(const VidStreamList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidStreamList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidStream cVidStream = 1;
  int cvidstream_size() const;
  void clear_cvidstream();
  static const int kCVidStreamFieldNumber = 1;
  const ::VidStream& cvidstream(int index) const;
  ::VidStream* mutable_cvidstream(int index);
  ::VidStream* add_cvidstream();
  ::google::protobuf::RepeatedPtrField< ::VidStream >*
      mutable_cvidstream();
  const ::google::protobuf::RepeatedPtrField< ::VidStream >&
      cvidstream() const;

  // @@protoc_insertion_point(class_scope:VidStreamList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidStream > cvidstream_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidBlob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidBlob) */ {
 public:
  VidBlob();
  virtual ~VidBlob();

  VidBlob(const VidBlob& from);

  inline VidBlob& operator=(const VidBlob& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidBlob& default_instance();

  static inline const VidBlob* internal_default_instance() {
    return reinterpret_cast<const VidBlob*>(
               &_VidBlob_default_instance_);
  }

  void Swap(VidBlob* other);

  // implements Message ----------------------------------------------

  inline VidBlob* New() const PROTOBUF_FINAL { return New(NULL); }

  VidBlob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidBlob& from);
  void MergeFrom(const VidBlob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidBlob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x0 = 1;
  void clear_x0();
  static const int kX0FieldNumber = 1;
  ::google::protobuf::int32 x0() const;
  void set_x0(::google::protobuf::int32 value);

  // int32 y0 = 2;
  void clear_y0();
  static const int kY0FieldNumber = 2;
  ::google::protobuf::int32 y0() const;
  void set_y0(::google::protobuf::int32 value);

  // int32 x1 = 3;
  void clear_x1();
  static const int kX1FieldNumber = 3;
  ::google::protobuf::int32 x1() const;
  void set_x1(::google::protobuf::int32 value);

  // int32 y1 = 4;
  void clear_y1();
  static const int kY1FieldNumber = 4;
  ::google::protobuf::int32 y1() const;
  void set_y1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VidBlob)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x0_;
  ::google::protobuf::int32 y0_;
  ::google::protobuf::int32 x1_;
  ::google::protobuf::int32 y1_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidBlobList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidBlobList) */ {
 public:
  VidBlobList();
  virtual ~VidBlobList();

  VidBlobList(const VidBlobList& from);

  inline VidBlobList& operator=(const VidBlobList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidBlobList& default_instance();

  static inline const VidBlobList* internal_default_instance() {
    return reinterpret_cast<const VidBlobList*>(
               &_VidBlobList_default_instance_);
  }

  void Swap(VidBlobList* other);

  // implements Message ----------------------------------------------

  inline VidBlobList* New() const PROTOBUF_FINAL { return New(NULL); }

  VidBlobList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidBlobList& from);
  void MergeFrom(const VidBlobList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidBlobList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VidBlob cBlob = 1;
  int cblob_size() const;
  void clear_cblob();
  static const int kCBlobFieldNumber = 1;
  const ::VidBlob& cblob(int index) const;
  ::VidBlob* mutable_cblob(int index);
  ::VidBlob* add_cblob();
  ::google::protobuf::RepeatedPtrField< ::VidBlob >*
      mutable_cblob();
  const ::google::protobuf::RepeatedPtrField< ::VidBlob >&
      cblob() const;

  // @@protoc_insertion_point(class_scope:VidBlobList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VidBlob > cblob_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidEventDBConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidEventDBConf) */ {
 public:
  VidEventDBConf();
  virtual ~VidEventDBConf();

  VidEventDBConf(const VidEventDBConf& from);

  inline VidEventDBConf& operator=(const VidEventDBConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidEventDBConf& default_instance();

  static inline const VidEventDBConf* internal_default_instance() {
    return reinterpret_cast<const VidEventDBConf*>(
               &_VidEventDBConf_default_instance_);
  }

  void Swap(VidEventDBConf* other);

  // implements Message ----------------------------------------------

  inline VidEventDBConf* New() const PROTOBUF_FINAL { return New(NULL); }

  VidEventDBConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidEventDBConf& from);
  void MergeFrom(const VidEventDBConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidEventDBConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strDBPath = 2;
  void clear_strdbpath();
  static const int kStrDBPathFieldNumber = 2;
  const ::std::string& strdbpath() const;
  void set_strdbpath(const ::std::string& value);
  #if LANG_CXX11
  void set_strdbpath(::std::string&& value);
  #endif
  void set_strdbpath(const char* value);
  void set_strdbpath(const char* value, size_t size);
  ::std::string* mutable_strdbpath();
  ::std::string* release_strdbpath();
  void set_allocated_strdbpath(::std::string* strdbpath);

  // .VidEventDBType nType = 1;
  void clear_ntype();
  static const int kNTypeFieldNumber = 1;
  ::VidEventDBType ntype() const;
  void set_ntype(::VidEventDBType value);

  // @@protoc_insertion_point(class_scope:VidEventDBConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strdbpath_;
  int ntype_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VE_LIBRARY_API VidEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VidEvent) */ {
 public:
  VidEvent();
  virtual ~VidEvent();

  VidEvent(const VidEvent& from);

  inline VidEvent& operator=(const VidEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidEvent& default_instance();

  static inline const VidEvent* internal_default_instance() {
    return reinterpret_cast<const VidEvent*>(
               &_VidEvent_default_instance_);
  }

  void Swap(VidEvent* other);

  // implements Message ----------------------------------------------

  inline VidEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  VidEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidEvent& from);
  void MergeFrom(const VidEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strId = 1;
  void clear_strid();
  static const int kStrIdFieldNumber = 1;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string strDevice = 2;
  void clear_strdevice();
  static const int kStrDeviceFieldNumber = 2;
  const ::std::string& strdevice() const;
  void set_strdevice(const ::std::string& value);
  #if LANG_CXX11
  void set_strdevice(::std::string&& value);
  #endif
  void set_strdevice(const char* value);
  void set_strdevice(const char* value, size_t size);
  ::std::string* mutable_strdevice();
  ::std::string* release_strdevice();
  void set_allocated_strdevice(::std::string* strdevice);

  // string strDeviceName = 3;
  void clear_strdevicename();
  static const int kStrDeviceNameFieldNumber = 3;
  const ::std::string& strdevicename() const;
  void set_strdevicename(const ::std::string& value);
  #if LANG_CXX11
  void set_strdevicename(::std::string&& value);
  #endif
  void set_strdevicename(const char* value);
  void set_strdevicename(const char* value, size_t size);
  ::std::string* mutable_strdevicename();
  ::std::string* release_strdevicename();
  void set_allocated_strdevicename(::std::string* strdevicename);

  // string strType = 4;
  void clear_strtype();
  static const int kStrTypeFieldNumber = 4;
  const ::std::string& strtype() const;
  void set_strtype(const ::std::string& value);
  #if LANG_CXX11
  void set_strtype(::std::string&& value);
  #endif
  void set_strtype(const char* value);
  void set_strtype(const char* value, size_t size);
  ::std::string* mutable_strtype();
  ::std::string* release_strtype();
  void set_allocated_strtype(::std::string* strtype);

  // string strTime = 6;
  void clear_strtime();
  static const int kStrTimeFieldNumber = 6;
  const ::std::string& strtime() const;
  void set_strtime(const ::std::string& value);
  #if LANG_CXX11
  void set_strtime(::std::string&& value);
  #endif
  void set_strtime(const char* value);
  void set_strtime(const char* value, size_t size);
  ::std::string* mutable_strtime();
  ::std::string* release_strtime();
  void set_allocated_strtime(::std::string* strtime);

  // string strDesc = 7;
  void clear_strdesc();
  static const int kStrDescFieldNumber = 7;
  const ::std::string& strdesc() const;
  void set_strdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_strdesc(::std::string&& value);
  #endif
  void set_strdesc(const char* value);
  void set_strdesc(const char* value, size_t size);
  ::std::string* mutable_strdesc();
  ::std::string* release_strdesc();
  void set_allocated_strdesc(::std::string* strdesc);

  // string strComments = 10;
  void clear_strcomments();
  static const int kStrCommentsFieldNumber = 10;
  const ::std::string& strcomments() const;
  void set_strcomments(const ::std::string& value);
  #if LANG_CXX11
  void set_strcomments(::std::string&& value);
  #endif
  void set_strcomments(const char* value);
  void set_strcomments(const char* value, size_t size);
  ::std::string* mutable_strcomments();
  ::std::string* release_strcomments();
  void set_allocated_strcomments(::std::string* strcomments);

  // string strStorId = 11;
  void clear_strstorid();
  static const int kStrStorIdFieldNumber = 11;
  const ::std::string& strstorid() const;
  void set_strstorid(const ::std::string& value);
  #if LANG_CXX11
  void set_strstorid(::std::string&& value);
  #endif
  void set_strstorid(const char* value);
  void set_strstorid(const char* value, size_t size);
  ::std::string* mutable_strstorid();
  ::std::string* release_strstorid();
  void set_allocated_strstorid(::std::string* strstorid);

  // string strStorName = 12;
  void clear_strstorname();
  static const int kStrStorNameFieldNumber = 12;
  const ::std::string& strstorname() const;
  void set_strstorname(const ::std::string& value);
  #if LANG_CXX11
  void set_strstorname(::std::string&& value);
  #endif
  void set_strstorname(const char* value);
  void set_strstorname(const char* value, size_t size);
  ::std::string* mutable_strstorname();
  ::std::string* release_strstorname();
  void set_allocated_strstorname(::std::string* strstorname);

  // int64 nTime = 5;
  void clear_ntime();
  static const int kNTimeFieldNumber = 5;
  ::google::protobuf::int64 ntime() const;
  void set_ntime(::google::protobuf::int64 value);

  // int64 nIdx = 13;
  void clear_nidx();
  static const int kNIdxFieldNumber = 13;
  ::google::protobuf::int64 nidx() const;
  void set_nidx(::google::protobuf::int64 value);

  // bool bHandled = 8;
  void clear_bhandled();
  static const int kBHandledFieldNumber = 8;
  bool bhandled() const;
  void set_bhandled(bool value);

  // bool bSearched = 9;
  void clear_bsearched();
  static const int kBSearchedFieldNumber = 9;
  bool bsearched() const;
  void set_bsearched(bool value);

  // @@protoc_insertion_point(class_scope:VidEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr strdevice_;
  ::google::protobuf::internal::ArenaStringPtr strdevicename_;
  ::google::protobuf::internal::ArenaStringPtr strtype_;
  ::google::protobuf::internal::ArenaStringPtr strtime_;
  ::google::protobuf::internal::ArenaStringPtr strdesc_;
  ::google::protobuf::internal::ArenaStringPtr strcomments_;
  ::google::protobuf::internal::ArenaStringPtr strstorid_;
  ::google::protobuf::internal::ArenaStringPtr strstorname_;
  ::google::protobuf::int64 ntime_;
  ::google::protobuf::int64 nidx_;
  bool bhandled_;
  bool bsearched_;
  mutable int _cached_size_;
  friend struct VE_LIBRARY_API protobuf_vidconf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VidUser

// string strId = 1;
inline void VidUser::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidUser::strid() const {
  // @@protoc_insertion_point(field_get:VidUser.strId)
  return strid_.GetNoArena();
}
inline void VidUser::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidUser.strId)
}
#if LANG_CXX11
inline void VidUser::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidUser.strId)
}
#endif
inline void VidUser::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidUser.strId)
}
inline void VidUser::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidUser.strId)
}
inline ::std::string* VidUser::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidUser.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidUser::release_strid() {
  // @@protoc_insertion_point(field_release:VidUser.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidUser.strId)
}

// string strName = 2;
inline void VidUser::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidUser::strname() const {
  // @@protoc_insertion_point(field_get:VidUser.strName)
  return strname_.GetNoArena();
}
inline void VidUser::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidUser.strName)
}
#if LANG_CXX11
inline void VidUser::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidUser.strName)
}
#endif
inline void VidUser::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidUser.strName)
}
inline void VidUser::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidUser.strName)
}
inline ::std::string* VidUser::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidUser.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidUser::release_strname() {
  // @@protoc_insertion_point(field_release:VidUser.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidUser.strName)
}

// string strPasswd = 3;
inline void VidUser::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidUser::strpasswd() const {
  // @@protoc_insertion_point(field_get:VidUser.strPasswd)
  return strpasswd_.GetNoArena();
}
inline void VidUser::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidUser.strPasswd)
}
#if LANG_CXX11
inline void VidUser::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidUser.strPasswd)
}
#endif
inline void VidUser::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidUser.strPasswd)
}
inline void VidUser::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidUser.strPasswd)
}
inline ::std::string* VidUser::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidUser.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidUser::release_strpasswd() {
  // @@protoc_insertion_point(field_release:VidUser.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidUser.strPasswd)
}

// string strRoleId = 4;
inline void VidUser::clear_strroleid() {
  strroleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidUser::strroleid() const {
  // @@protoc_insertion_point(field_get:VidUser.strRoleId)
  return strroleid_.GetNoArena();
}
inline void VidUser::set_strroleid(const ::std::string& value) {
  
  strroleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidUser.strRoleId)
}
#if LANG_CXX11
inline void VidUser::set_strroleid(::std::string&& value) {
  
  strroleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidUser.strRoleId)
}
#endif
inline void VidUser::set_strroleid(const char* value) {
  
  strroleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidUser.strRoleId)
}
inline void VidUser::set_strroleid(const char* value, size_t size) {
  
  strroleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidUser.strRoleId)
}
inline ::std::string* VidUser::mutable_strroleid() {
  
  // @@protoc_insertion_point(field_mutable:VidUser.strRoleId)
  return strroleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidUser::release_strroleid() {
  // @@protoc_insertion_point(field_release:VidUser.strRoleId)
  
  return strroleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidUser::set_allocated_strroleid(::std::string* strroleid) {
  if (strroleid != NULL) {
    
  } else {
    
  }
  strroleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strroleid);
  // @@protoc_insertion_point(field_set_allocated:VidUser.strRoleId)
}

// -------------------------------------------------------------------

// VidUserList

// repeated .VidUser cVidUser = 1;
inline int VidUserList::cviduser_size() const {
  return cviduser_.size();
}
inline void VidUserList::clear_cviduser() {
  cviduser_.Clear();
}
inline const ::VidUser& VidUserList::cviduser(int index) const {
  // @@protoc_insertion_point(field_get:VidUserList.cVidUser)
  return cviduser_.Get(index);
}
inline ::VidUser* VidUserList::mutable_cviduser(int index) {
  // @@protoc_insertion_point(field_mutable:VidUserList.cVidUser)
  return cviduser_.Mutable(index);
}
inline ::VidUser* VidUserList::add_cviduser() {
  // @@protoc_insertion_point(field_add:VidUserList.cVidUser)
  return cviduser_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidUser >*
VidUserList::mutable_cviduser() {
  // @@protoc_insertion_point(field_mutable_list:VidUserList.cVidUser)
  return &cviduser_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidUser >&
VidUserList::cviduser() const {
  // @@protoc_insertion_point(field_list:VidUserList.cVidUser)
  return cviduser_;
}

// -------------------------------------------------------------------

// VidStorServerConf

// int32 nOapiPort = 1;
inline void VidStorServerConf::clear_noapiport() {
  noapiport_ = 0;
}
inline ::google::protobuf::int32 VidStorServerConf::noapiport() const {
  // @@protoc_insertion_point(field_get:VidStorServerConf.nOapiPort)
  return noapiport_;
}
inline void VidStorServerConf::set_noapiport(::google::protobuf::int32 value) {
  
  noapiport_ = value;
  // @@protoc_insertion_point(field_set:VidStorServerConf.nOapiPort)
}

// string strAdminPasswd = 2;
inline void VidStorServerConf::clear_stradminpasswd() {
  stradminpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStorServerConf::stradminpasswd() const {
  // @@protoc_insertion_point(field_get:VidStorServerConf.strAdminPasswd)
  return stradminpasswd_.GetNoArena();
}
inline void VidStorServerConf::set_stradminpasswd(const ::std::string& value) {
  
  stradminpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidStorServerConf.strAdminPasswd)
}
#if LANG_CXX11
inline void VidStorServerConf::set_stradminpasswd(::std::string&& value) {
  
  stradminpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidStorServerConf.strAdminPasswd)
}
#endif
inline void VidStorServerConf::set_stradminpasswd(const char* value) {
  
  stradminpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidStorServerConf.strAdminPasswd)
}
inline void VidStorServerConf::set_stradminpasswd(const char* value, size_t size) {
  
  stradminpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidStorServerConf.strAdminPasswd)
}
inline ::std::string* VidStorServerConf::mutable_stradminpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidStorServerConf.strAdminPasswd)
  return stradminpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStorServerConf::release_stradminpasswd() {
  // @@protoc_insertion_point(field_release:VidStorServerConf.strAdminPasswd)
  
  return stradminpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStorServerConf::set_allocated_stradminpasswd(::std::string* stradminpasswd) {
  if (stradminpasswd != NULL) {
    
  } else {
    
  }
  stradminpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stradminpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidStorServerConf.strAdminPasswd)
}

// -------------------------------------------------------------------

// VidCamera

// bool bDisable = 1;
inline void VidCamera::clear_bdisable() {
  bdisable_ = false;
}
inline bool VidCamera::bdisable() const {
  // @@protoc_insertion_point(field_get:VidCamera.bDisable)
  return bdisable_;
}
inline void VidCamera::set_bdisable(bool value) {
  
  bdisable_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.bDisable)
}

// string strId = 2;
inline void VidCamera::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strid() const {
  // @@protoc_insertion_point(field_get:VidCamera.strId)
  return strid_.GetNoArena();
}
inline void VidCamera::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strId)
}
#if LANG_CXX11
inline void VidCamera::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strId)
}
#endif
inline void VidCamera::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strId)
}
inline void VidCamera::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strId)
}
inline ::std::string* VidCamera::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strid() {
  // @@protoc_insertion_point(field_release:VidCamera.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strId)
}

// string strName = 3;
inline void VidCamera::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strname() const {
  // @@protoc_insertion_point(field_get:VidCamera.strName)
  return strname_.GetNoArena();
}
inline void VidCamera::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strName)
}
#if LANG_CXX11
inline void VidCamera::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strName)
}
#endif
inline void VidCamera::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strName)
}
inline void VidCamera::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strName)
}
inline ::std::string* VidCamera::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strname() {
  // @@protoc_insertion_point(field_release:VidCamera.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strName)
}

// .CameraType nType = 4;
inline void VidCamera::clear_ntype() {
  ntype_ = 0;
}
inline ::CameraType VidCamera::ntype() const {
  // @@protoc_insertion_point(field_get:VidCamera.nType)
  return static_cast< ::CameraType >(ntype_);
}
inline void VidCamera::set_ntype(::CameraType value) {
  
  ntype_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.nType)
}

// string strIP = 5;
inline void VidCamera::clear_strip() {
  strip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strip() const {
  // @@protoc_insertion_point(field_get:VidCamera.strIP)
  return strip_.GetNoArena();
}
inline void VidCamera::set_strip(const ::std::string& value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strIP)
}
#if LANG_CXX11
inline void VidCamera::set_strip(::std::string&& value) {
  
  strip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strIP)
}
#endif
inline void VidCamera::set_strip(const char* value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strIP)
}
inline void VidCamera::set_strip(const char* value, size_t size) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strIP)
}
inline ::std::string* VidCamera::mutable_strip() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strIP)
  return strip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strip() {
  // @@protoc_insertion_point(field_release:VidCamera.strIP)
  
  return strip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strip(::std::string* strip) {
  if (strip != NULL) {
    
  } else {
    
  }
  strip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strip);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strIP)
}

// string strPort = 6;
inline void VidCamera::clear_strport() {
  strport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strport() const {
  // @@protoc_insertion_point(field_get:VidCamera.strPort)
  return strport_.GetNoArena();
}
inline void VidCamera::set_strport(const ::std::string& value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strPort)
}
#if LANG_CXX11
inline void VidCamera::set_strport(::std::string&& value) {
  
  strport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strPort)
}
#endif
inline void VidCamera::set_strport(const char* value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strPort)
}
inline void VidCamera::set_strport(const char* value, size_t size) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strPort)
}
inline ::std::string* VidCamera::mutable_strport() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strPort)
  return strport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strport() {
  // @@protoc_insertion_point(field_release:VidCamera.strPort)
  
  return strport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strport(::std::string* strport) {
  if (strport != NULL) {
    
  } else {
    
  }
  strport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strport);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strPort)
}

// string strUser = 7;
inline void VidCamera::clear_struser() {
  struser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::struser() const {
  // @@protoc_insertion_point(field_get:VidCamera.strUser)
  return struser_.GetNoArena();
}
inline void VidCamera::set_struser(const ::std::string& value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strUser)
}
#if LANG_CXX11
inline void VidCamera::set_struser(::std::string&& value) {
  
  struser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strUser)
}
#endif
inline void VidCamera::set_struser(const char* value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strUser)
}
inline void VidCamera::set_struser(const char* value, size_t size) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strUser)
}
inline ::std::string* VidCamera::mutable_struser() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strUser)
  return struser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_struser() {
  // @@protoc_insertion_point(field_release:VidCamera.strUser)
  
  return struser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_struser(::std::string* struser) {
  if (struser != NULL) {
    
  } else {
    
  }
  struser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struser);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strUser)
}

// string strPasswd = 8;
inline void VidCamera::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strpasswd() const {
  // @@protoc_insertion_point(field_get:VidCamera.strPasswd)
  return strpasswd_.GetNoArena();
}
inline void VidCamera::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strPasswd)
}
#if LANG_CXX11
inline void VidCamera::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strPasswd)
}
#endif
inline void VidCamera::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strPasswd)
}
inline void VidCamera::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strPasswd)
}
inline ::std::string* VidCamera::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strpasswd() {
  // @@protoc_insertion_point(field_release:VidCamera.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strPasswd)
}

// string strONVIFAddress = 9;
inline void VidCamera::clear_stronvifaddress() {
  stronvifaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::stronvifaddress() const {
  // @@protoc_insertion_point(field_get:VidCamera.strONVIFAddress)
  return stronvifaddress_.GetNoArena();
}
inline void VidCamera::set_stronvifaddress(const ::std::string& value) {
  
  stronvifaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strONVIFAddress)
}
#if LANG_CXX11
inline void VidCamera::set_stronvifaddress(::std::string&& value) {
  
  stronvifaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strONVIFAddress)
}
#endif
inline void VidCamera::set_stronvifaddress(const char* value) {
  
  stronvifaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strONVIFAddress)
}
inline void VidCamera::set_stronvifaddress(const char* value, size_t size) {
  
  stronvifaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strONVIFAddress)
}
inline ::std::string* VidCamera::mutable_stronvifaddress() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strONVIFAddress)
  return stronvifaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_stronvifaddress() {
  // @@protoc_insertion_point(field_release:VidCamera.strONVIFAddress)
  
  return stronvifaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_stronvifaddress(::std::string* stronvifaddress) {
  if (stronvifaddress != NULL) {
    
  } else {
    
  }
  stronvifaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stronvifaddress);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strONVIFAddress)
}

// bool bProfileToken = 10;
inline void VidCamera::clear_bprofiletoken() {
  bprofiletoken_ = false;
}
inline bool VidCamera::bprofiletoken() const {
  // @@protoc_insertion_point(field_get:VidCamera.bProfileToken)
  return bprofiletoken_;
}
inline void VidCamera::set_bprofiletoken(bool value) {
  
  bprofiletoken_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.bProfileToken)
}

// string strProfileToken1 = 11;
inline void VidCamera::clear_strprofiletoken1() {
  strprofiletoken1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strprofiletoken1() const {
  // @@protoc_insertion_point(field_get:VidCamera.strProfileToken1)
  return strprofiletoken1_.GetNoArena();
}
inline void VidCamera::set_strprofiletoken1(const ::std::string& value) {
  
  strprofiletoken1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strProfileToken1)
}
#if LANG_CXX11
inline void VidCamera::set_strprofiletoken1(::std::string&& value) {
  
  strprofiletoken1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strProfileToken1)
}
#endif
inline void VidCamera::set_strprofiletoken1(const char* value) {
  
  strprofiletoken1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strProfileToken1)
}
inline void VidCamera::set_strprofiletoken1(const char* value, size_t size) {
  
  strprofiletoken1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strProfileToken1)
}
inline ::std::string* VidCamera::mutable_strprofiletoken1() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strProfileToken1)
  return strprofiletoken1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strprofiletoken1() {
  // @@protoc_insertion_point(field_release:VidCamera.strProfileToken1)
  
  return strprofiletoken1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strprofiletoken1(::std::string* strprofiletoken1) {
  if (strprofiletoken1 != NULL) {
    
  } else {
    
  }
  strprofiletoken1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strprofiletoken1);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strProfileToken1)
}

// string strProfileToken2 = 12;
inline void VidCamera::clear_strprofiletoken2() {
  strprofiletoken2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strprofiletoken2() const {
  // @@protoc_insertion_point(field_get:VidCamera.strProfileToken2)
  return strprofiletoken2_.GetNoArena();
}
inline void VidCamera::set_strprofiletoken2(const ::std::string& value) {
  
  strprofiletoken2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strProfileToken2)
}
#if LANG_CXX11
inline void VidCamera::set_strprofiletoken2(::std::string&& value) {
  
  strprofiletoken2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strProfileToken2)
}
#endif
inline void VidCamera::set_strprofiletoken2(const char* value) {
  
  strprofiletoken2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strProfileToken2)
}
inline void VidCamera::set_strprofiletoken2(const char* value, size_t size) {
  
  strprofiletoken2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strProfileToken2)
}
inline ::std::string* VidCamera::mutable_strprofiletoken2() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strProfileToken2)
  return strprofiletoken2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strprofiletoken2() {
  // @@protoc_insertion_point(field_release:VidCamera.strProfileToken2)
  
  return strprofiletoken2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strprofiletoken2(::std::string* strprofiletoken2) {
  if (strprofiletoken2 != NULL) {
    
  } else {
    
  }
  strprofiletoken2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strprofiletoken2);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strProfileToken2)
}

// string strFile = 13;
inline void VidCamera::clear_strfile() {
  strfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strfile() const {
  // @@protoc_insertion_point(field_get:VidCamera.strFile)
  return strfile_.GetNoArena();
}
inline void VidCamera::set_strfile(const ::std::string& value) {
  
  strfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strFile)
}
#if LANG_CXX11
inline void VidCamera::set_strfile(::std::string&& value) {
  
  strfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strFile)
}
#endif
inline void VidCamera::set_strfile(const char* value) {
  
  strfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strFile)
}
inline void VidCamera::set_strfile(const char* value, size_t size) {
  
  strfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strFile)
}
inline ::std::string* VidCamera::mutable_strfile() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strFile)
  return strfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strfile() {
  // @@protoc_insertion_point(field_release:VidCamera.strFile)
  
  return strfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strfile(::std::string* strfile) {
  if (strfile != NULL) {
    
  } else {
    
  }
  strfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfile);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strFile)
}

// string strRTSPUrl = 14;
inline void VidCamera::clear_strrtspurl() {
  strrtspurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strrtspurl() const {
  // @@protoc_insertion_point(field_get:VidCamera.strRTSPUrl)
  return strrtspurl_.GetNoArena();
}
inline void VidCamera::set_strrtspurl(const ::std::string& value) {
  
  strrtspurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strRTSPUrl)
}
#if LANG_CXX11
inline void VidCamera::set_strrtspurl(::std::string&& value) {
  
  strrtspurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strRTSPUrl)
}
#endif
inline void VidCamera::set_strrtspurl(const char* value) {
  
  strrtspurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strRTSPUrl)
}
inline void VidCamera::set_strrtspurl(const char* value, size_t size) {
  
  strrtspurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strRTSPUrl)
}
inline ::std::string* VidCamera::mutable_strrtspurl() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strRTSPUrl)
  return strrtspurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strrtspurl() {
  // @@protoc_insertion_point(field_release:VidCamera.strRTSPUrl)
  
  return strrtspurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strrtspurl(::std::string* strrtspurl) {
  if (strrtspurl != NULL) {
    
  } else {
    
  }
  strrtspurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strrtspurl);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strRTSPUrl)
}

// bool bHWaccel = 15;
inline void VidCamera::clear_bhwaccel() {
  bhwaccel_ = false;
}
inline bool VidCamera::bhwaccel() const {
  // @@protoc_insertion_point(field_get:VidCamera.bHWaccel)
  return bhwaccel_;
}
inline void VidCamera::set_bhwaccel(bool value) {
  
  bhwaccel_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.bHWaccel)
}

// bool bServerMotion = 16;
inline void VidCamera::clear_bservermotion() {
  bservermotion_ = false;
}
inline bool VidCamera::bservermotion() const {
  // @@protoc_insertion_point(field_get:VidCamera.bServerMotion)
  return bservermotion_;
}
inline void VidCamera::set_bservermotion(bool value) {
  
  bservermotion_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.bServerMotion)
}

// .CameraConnectType nConnectType = 17;
inline void VidCamera::clear_nconnecttype() {
  nconnecttype_ = 0;
}
inline ::CameraConnectType VidCamera::nconnecttype() const {
  // @@protoc_insertion_point(field_get:VidCamera.nConnectType)
  return static_cast< ::CameraConnectType >(nconnecttype_);
}
inline void VidCamera::set_nconnecttype(::CameraConnectType value) {
  
  nconnecttype_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.nConnectType)
}

// bool bHDFSRecord = 18;
inline void VidCamera::clear_bhdfsrecord() {
  bhdfsrecord_ = false;
}
inline bool VidCamera::bhdfsrecord() const {
  // @@protoc_insertion_point(field_get:VidCamera.bHDFSRecord)
  return bhdfsrecord_;
}
inline void VidCamera::set_bhdfsrecord(bool value) {
  
  bhdfsrecord_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.bHDFSRecord)
}

// repeated string cRecSched = 20;
inline int VidCamera::crecsched_size() const {
  return crecsched_.size();
}
inline void VidCamera::clear_crecsched() {
  crecsched_.Clear();
}
inline const ::std::string& VidCamera::crecsched(int index) const {
  // @@protoc_insertion_point(field_get:VidCamera.cRecSched)
  return crecsched_.Get(index);
}
inline ::std::string* VidCamera::mutable_crecsched(int index) {
  // @@protoc_insertion_point(field_mutable:VidCamera.cRecSched)
  return crecsched_.Mutable(index);
}
inline void VidCamera::set_crecsched(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:VidCamera.cRecSched)
  crecsched_.Mutable(index)->assign(value);
}
inline void VidCamera::set_crecsched(int index, const char* value) {
  crecsched_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VidCamera.cRecSched)
}
inline void VidCamera::set_crecsched(int index, const char* value, size_t size) {
  crecsched_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VidCamera.cRecSched)
}
inline ::std::string* VidCamera::add_crecsched() {
  // @@protoc_insertion_point(field_add_mutable:VidCamera.cRecSched)
  return crecsched_.Add();
}
inline void VidCamera::add_crecsched(const ::std::string& value) {
  crecsched_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VidCamera.cRecSched)
}
inline void VidCamera::add_crecsched(const char* value) {
  crecsched_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VidCamera.cRecSched)
}
inline void VidCamera::add_crecsched(const char* value, size_t size) {
  crecsched_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VidCamera.cRecSched)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VidCamera::crecsched() const {
  // @@protoc_insertion_point(field_list:VidCamera.cRecSched)
  return crecsched_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VidCamera::mutable_crecsched() {
  // @@protoc_insertion_point(field_mutable_list:VidCamera.cRecSched)
  return &crecsched_;
}

// int32 nPreRecSec = 21;
inline void VidCamera::clear_nprerecsec() {
  nprerecsec_ = 0;
}
inline ::google::protobuf::int32 VidCamera::nprerecsec() const {
  // @@protoc_insertion_point(field_get:VidCamera.nPreRecSec)
  return nprerecsec_;
}
inline void VidCamera::set_nprerecsec(::google::protobuf::int32 value) {
  
  nprerecsec_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.nPreRecSec)
}

// int32 nPostRecSec = 22;
inline void VidCamera::clear_npostrecsec() {
  npostrecsec_ = 0;
}
inline ::google::protobuf::int32 VidCamera::npostrecsec() const {
  // @@protoc_insertion_point(field_get:VidCamera.nPostRecSec)
  return npostrecsec_;
}
inline void VidCamera::set_npostrecsec(::google::protobuf::int32 value) {
  
  npostrecsec_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.nPostRecSec)
}

// bool bMotionJPEG = 23;
inline void VidCamera::clear_bmotionjpeg() {
  bmotionjpeg_ = false;
}
inline bool VidCamera::bmotionjpeg() const {
  // @@protoc_insertion_point(field_get:VidCamera.bMotionJPEG)
  return bmotionjpeg_;
}
inline void VidCamera::set_bmotionjpeg(bool value) {
  
  bmotionjpeg_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.bMotionJPEG)
}

// int32 nRecordStream = 24;
inline void VidCamera::clear_nrecordstream() {
  nrecordstream_ = 0;
}
inline ::google::protobuf::int32 VidCamera::nrecordstream() const {
  // @@protoc_insertion_point(field_get:VidCamera.nRecordStream)
  return nrecordstream_;
}
inline void VidCamera::set_nrecordstream(::google::protobuf::int32 value) {
  
  nrecordstream_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.nRecordStream)
}

// int32 nServerMotionStream = 25;
inline void VidCamera::clear_nservermotionstream() {
  nservermotionstream_ = 0;
}
inline ::google::protobuf::int32 VidCamera::nservermotionstream() const {
  // @@protoc_insertion_point(field_get:VidCamera.nServerMotionStream)
  return nservermotionstream_;
}
inline void VidCamera::set_nservermotionstream(::google::protobuf::int32 value) {
  
  nservermotionstream_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.nServerMotionStream)
}

// .OnvifEventLevel nOnvifEvtLevel = 26;
inline void VidCamera::clear_nonvifevtlevel() {
  nonvifevtlevel_ = 0;
}
inline ::OnvifEventLevel VidCamera::nonvifevtlevel() const {
  // @@protoc_insertion_point(field_get:VidCamera.nOnvifEvtLevel)
  return static_cast< ::OnvifEventLevel >(nonvifevtlevel_);
}
inline void VidCamera::set_nonvifevtlevel(::OnvifEventLevel value) {
  
  nonvifevtlevel_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.nOnvifEvtLevel)
}

// string strSched = 27;
inline void VidCamera::clear_strsched() {
  strsched_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strsched() const {
  // @@protoc_insertion_point(field_get:VidCamera.strSched)
  return strsched_.GetNoArena();
}
inline void VidCamera::set_strsched(const ::std::string& value) {
  
  strsched_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strSched)
}
#if LANG_CXX11
inline void VidCamera::set_strsched(::std::string&& value) {
  
  strsched_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strSched)
}
#endif
inline void VidCamera::set_strsched(const char* value) {
  
  strsched_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strSched)
}
inline void VidCamera::set_strsched(const char* value, size_t size) {
  
  strsched_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strSched)
}
inline ::std::string* VidCamera::mutable_strsched() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strSched)
  return strsched_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strsched() {
  // @@protoc_insertion_point(field_release:VidCamera.strSched)
  
  return strsched_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strsched(::std::string* strsched) {
  if (strsched != NULL) {
    
  } else {
    
  }
  strsched_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strsched);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strSched)
}

// string strMotReg = 28;
inline void VidCamera::clear_strmotreg() {
  strmotreg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCamera::strmotreg() const {
  // @@protoc_insertion_point(field_get:VidCamera.strMotReg)
  return strmotreg_.GetNoArena();
}
inline void VidCamera::set_strmotreg(const ::std::string& value) {
  
  strmotreg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCamera.strMotReg)
}
#if LANG_CXX11
inline void VidCamera::set_strmotreg(::std::string&& value) {
  
  strmotreg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCamera.strMotReg)
}
#endif
inline void VidCamera::set_strmotreg(const char* value) {
  
  strmotreg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCamera.strMotReg)
}
inline void VidCamera::set_strmotreg(const char* value, size_t size) {
  
  strmotreg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCamera.strMotReg)
}
inline ::std::string* VidCamera::mutable_strmotreg() {
  
  // @@protoc_insertion_point(field_mutable:VidCamera.strMotReg)
  return strmotreg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCamera::release_strmotreg() {
  // @@protoc_insertion_point(field_release:VidCamera.strMotReg)
  
  return strmotreg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCamera::set_allocated_strmotreg(::std::string* strmotreg) {
  if (strmotreg != NULL) {
    
  } else {
    
  }
  strmotreg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmotreg);
  // @@protoc_insertion_point(field_set_allocated:VidCamera.strMotReg)
}

// bool bOnline = 29;
inline void VidCamera::clear_bonline() {
  bonline_ = false;
}
inline bool VidCamera::bonline() const {
  // @@protoc_insertion_point(field_get:VidCamera.bOnline)
  return bonline_;
}
inline void VidCamera::set_bonline(bool value) {
  
  bonline_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.bOnline)
}

// bool bRec = 30;
inline void VidCamera::clear_brec() {
  brec_ = false;
}
inline bool VidCamera::brec() const {
  // @@protoc_insertion_point(field_get:VidCamera.bRec)
  return brec_;
}
inline void VidCamera::set_brec(bool value) {
  
  brec_ = value;
  // @@protoc_insertion_point(field_set:VidCamera.bRec)
}

// -------------------------------------------------------------------

// VidCameraList

// repeated .VidCamera cVidCamera = 1;
inline int VidCameraList::cvidcamera_size() const {
  return cvidcamera_.size();
}
inline void VidCameraList::clear_cvidcamera() {
  cvidcamera_.Clear();
}
inline const ::VidCamera& VidCameraList::cvidcamera(int index) const {
  // @@protoc_insertion_point(field_get:VidCameraList.cVidCamera)
  return cvidcamera_.Get(index);
}
inline ::VidCamera* VidCameraList::mutable_cvidcamera(int index) {
  // @@protoc_insertion_point(field_mutable:VidCameraList.cVidCamera)
  return cvidcamera_.Mutable(index);
}
inline ::VidCamera* VidCameraList::add_cvidcamera() {
  // @@protoc_insertion_point(field_add:VidCameraList.cVidCamera)
  return cvidcamera_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidCamera >*
VidCameraList::mutable_cvidcamera() {
  // @@protoc_insertion_point(field_mutable_list:VidCameraList.cVidCamera)
  return &cvidcamera_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidCamera >&
VidCameraList::cvidcamera() const {
  // @@protoc_insertion_point(field_list:VidCameraList.cVidCamera)
  return cvidcamera_;
}

// -------------------------------------------------------------------

// VidDisk

// string strId = 1;
inline void VidDisk::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidDisk::strid() const {
  // @@protoc_insertion_point(field_get:VidDisk.strId)
  return strid_.GetNoArena();
}
inline void VidDisk::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidDisk.strId)
}
#if LANG_CXX11
inline void VidDisk::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidDisk.strId)
}
#endif
inline void VidDisk::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidDisk.strId)
}
inline void VidDisk::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidDisk.strId)
}
inline ::std::string* VidDisk::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidDisk.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidDisk::release_strid() {
  // @@protoc_insertion_point(field_release:VidDisk.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidDisk::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidDisk.strId)
}

// string strPath = 2;
inline void VidDisk::clear_strpath() {
  strpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidDisk::strpath() const {
  // @@protoc_insertion_point(field_get:VidDisk.strPath)
  return strpath_.GetNoArena();
}
inline void VidDisk::set_strpath(const ::std::string& value) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidDisk.strPath)
}
#if LANG_CXX11
inline void VidDisk::set_strpath(::std::string&& value) {
  
  strpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidDisk.strPath)
}
#endif
inline void VidDisk::set_strpath(const char* value) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidDisk.strPath)
}
inline void VidDisk::set_strpath(const char* value, size_t size) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidDisk.strPath)
}
inline ::std::string* VidDisk::mutable_strpath() {
  
  // @@protoc_insertion_point(field_mutable:VidDisk.strPath)
  return strpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidDisk::release_strpath() {
  // @@protoc_insertion_point(field_release:VidDisk.strPath)
  
  return strpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidDisk::set_allocated_strpath(::std::string* strpath) {
  if (strpath != NULL) {
    
  } else {
    
  }
  strpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpath);
  // @@protoc_insertion_point(field_set_allocated:VidDisk.strPath)
}

// int64 nTotalSize = 3;
inline void VidDisk::clear_ntotalsize() {
  ntotalsize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VidDisk::ntotalsize() const {
  // @@protoc_insertion_point(field_get:VidDisk.nTotalSize)
  return ntotalsize_;
}
inline void VidDisk::set_ntotalsize(::google::protobuf::int64 value) {
  
  ntotalsize_ = value;
  // @@protoc_insertion_point(field_set:VidDisk.nTotalSize)
}

// int64 nFreeSize = 4;
inline void VidDisk::clear_nfreesize() {
  nfreesize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VidDisk::nfreesize() const {
  // @@protoc_insertion_point(field_get:VidDisk.nFreeSize)
  return nfreesize_;
}
inline void VidDisk::set_nfreesize(::google::protobuf::int64 value) {
  
  nfreesize_ = value;
  // @@protoc_insertion_point(field_set:VidDisk.nFreeSize)
}

// int64 nStorLimit = 5;
inline void VidDisk::clear_nstorlimit() {
  nstorlimit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VidDisk::nstorlimit() const {
  // @@protoc_insertion_point(field_get:VidDisk.nStorLimit)
  return nstorlimit_;
}
inline void VidDisk::set_nstorlimit(::google::protobuf::int64 value) {
  
  nstorlimit_ = value;
  // @@protoc_insertion_point(field_set:VidDisk.nStorLimit)
}

// int64 nStorUsed = 6;
inline void VidDisk::clear_nstorused() {
  nstorused_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VidDisk::nstorused() const {
  // @@protoc_insertion_point(field_get:VidDisk.nStorUsed)
  return nstorused_;
}
inline void VidDisk::set_nstorused(::google::protobuf::int64 value) {
  
  nstorused_ = value;
  // @@protoc_insertion_point(field_set:VidDisk.nStorUsed)
}

// -------------------------------------------------------------------

// VidDiskList

// repeated .VidDisk cVidDisk = 1;
inline int VidDiskList::cviddisk_size() const {
  return cviddisk_.size();
}
inline void VidDiskList::clear_cviddisk() {
  cviddisk_.Clear();
}
inline const ::VidDisk& VidDiskList::cviddisk(int index) const {
  // @@protoc_insertion_point(field_get:VidDiskList.cVidDisk)
  return cviddisk_.Get(index);
}
inline ::VidDisk* VidDiskList::mutable_cviddisk(int index) {
  // @@protoc_insertion_point(field_mutable:VidDiskList.cVidDisk)
  return cviddisk_.Mutable(index);
}
inline ::VidDisk* VidDiskList::add_cviddisk() {
  // @@protoc_insertion_point(field_add:VidDiskList.cVidDisk)
  return cviddisk_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidDisk >*
VidDiskList::mutable_cviddisk() {
  // @@protoc_insertion_point(field_mutable_list:VidDiskList.cVidDisk)
  return &cviddisk_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidDisk >&
VidDiskList::cviddisk() const {
  // @@protoc_insertion_point(field_list:VidDiskList.cVidDisk)
  return cviddisk_;
}

// -------------------------------------------------------------------

// VidHDFSConf

// string strNameNode = 1;
inline void VidHDFSConf::clear_strnamenode() {
  strnamenode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidHDFSConf::strnamenode() const {
  // @@protoc_insertion_point(field_get:VidHDFSConf.strNameNode)
  return strnamenode_.GetNoArena();
}
inline void VidHDFSConf::set_strnamenode(const ::std::string& value) {
  
  strnamenode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidHDFSConf.strNameNode)
}
#if LANG_CXX11
inline void VidHDFSConf::set_strnamenode(::std::string&& value) {
  
  strnamenode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidHDFSConf.strNameNode)
}
#endif
inline void VidHDFSConf::set_strnamenode(const char* value) {
  
  strnamenode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidHDFSConf.strNameNode)
}
inline void VidHDFSConf::set_strnamenode(const char* value, size_t size) {
  
  strnamenode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidHDFSConf.strNameNode)
}
inline ::std::string* VidHDFSConf::mutable_strnamenode() {
  
  // @@protoc_insertion_point(field_mutable:VidHDFSConf.strNameNode)
  return strnamenode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidHDFSConf::release_strnamenode() {
  // @@protoc_insertion_point(field_release:VidHDFSConf.strNameNode)
  
  return strnamenode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_allocated_strnamenode(::std::string* strnamenode) {
  if (strnamenode != NULL) {
    
  } else {
    
  }
  strnamenode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strnamenode);
  // @@protoc_insertion_point(field_set_allocated:VidHDFSConf.strNameNode)
}

// string strPort = 2;
inline void VidHDFSConf::clear_strport() {
  strport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidHDFSConf::strport() const {
  // @@protoc_insertion_point(field_get:VidHDFSConf.strPort)
  return strport_.GetNoArena();
}
inline void VidHDFSConf::set_strport(const ::std::string& value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidHDFSConf.strPort)
}
#if LANG_CXX11
inline void VidHDFSConf::set_strport(::std::string&& value) {
  
  strport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidHDFSConf.strPort)
}
#endif
inline void VidHDFSConf::set_strport(const char* value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidHDFSConf.strPort)
}
inline void VidHDFSConf::set_strport(const char* value, size_t size) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidHDFSConf.strPort)
}
inline ::std::string* VidHDFSConf::mutable_strport() {
  
  // @@protoc_insertion_point(field_mutable:VidHDFSConf.strPort)
  return strport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidHDFSConf::release_strport() {
  // @@protoc_insertion_point(field_release:VidHDFSConf.strPort)
  
  return strport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_allocated_strport(::std::string* strport) {
  if (strport != NULL) {
    
  } else {
    
  }
  strport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strport);
  // @@protoc_insertion_point(field_set_allocated:VidHDFSConf.strPort)
}

// string strUser = 3;
inline void VidHDFSConf::clear_struser() {
  struser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidHDFSConf::struser() const {
  // @@protoc_insertion_point(field_get:VidHDFSConf.strUser)
  return struser_.GetNoArena();
}
inline void VidHDFSConf::set_struser(const ::std::string& value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidHDFSConf.strUser)
}
#if LANG_CXX11
inline void VidHDFSConf::set_struser(::std::string&& value) {
  
  struser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidHDFSConf.strUser)
}
#endif
inline void VidHDFSConf::set_struser(const char* value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidHDFSConf.strUser)
}
inline void VidHDFSConf::set_struser(const char* value, size_t size) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidHDFSConf.strUser)
}
inline ::std::string* VidHDFSConf::mutable_struser() {
  
  // @@protoc_insertion_point(field_mutable:VidHDFSConf.strUser)
  return struser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidHDFSConf::release_struser() {
  // @@protoc_insertion_point(field_release:VidHDFSConf.strUser)
  
  return struser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_allocated_struser(::std::string* struser) {
  if (struser != NULL) {
    
  } else {
    
  }
  struser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struser);
  // @@protoc_insertion_point(field_set_allocated:VidHDFSConf.strUser)
}

// string strPasswd = 4;
inline void VidHDFSConf::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidHDFSConf::strpasswd() const {
  // @@protoc_insertion_point(field_get:VidHDFSConf.strPasswd)
  return strpasswd_.GetNoArena();
}
inline void VidHDFSConf::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidHDFSConf.strPasswd)
}
#if LANG_CXX11
inline void VidHDFSConf::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidHDFSConf.strPasswd)
}
#endif
inline void VidHDFSConf::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidHDFSConf.strPasswd)
}
inline void VidHDFSConf::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidHDFSConf.strPasswd)
}
inline ::std::string* VidHDFSConf::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidHDFSConf.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidHDFSConf::release_strpasswd() {
  // @@protoc_insertion_point(field_release:VidHDFSConf.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidHDFSConf::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidHDFSConf.strPasswd)
}

// int32 nFileInterval = 5;
inline void VidHDFSConf::clear_nfileinterval() {
  nfileinterval_ = 0;
}
inline ::google::protobuf::int32 VidHDFSConf::nfileinterval() const {
  // @@protoc_insertion_point(field_get:VidHDFSConf.nFileInterval)
  return nfileinterval_;
}
inline void VidHDFSConf::set_nfileinterval(::google::protobuf::int32 value) {
  
  nfileinterval_ = value;
  // @@protoc_insertion_point(field_set:VidHDFSConf.nFileInterval)
}

// -------------------------------------------------------------------

// VidCameraId

// string strStorId = 1;
inline void VidCameraId::clear_strstorid() {
  strstorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCameraId::strstorid() const {
  // @@protoc_insertion_point(field_get:VidCameraId.strStorId)
  return strstorid_.GetNoArena();
}
inline void VidCameraId::set_strstorid(const ::std::string& value) {
  
  strstorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCameraId.strStorId)
}
#if LANG_CXX11
inline void VidCameraId::set_strstorid(::std::string&& value) {
  
  strstorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCameraId.strStorId)
}
#endif
inline void VidCameraId::set_strstorid(const char* value) {
  
  strstorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCameraId.strStorId)
}
inline void VidCameraId::set_strstorid(const char* value, size_t size) {
  
  strstorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCameraId.strStorId)
}
inline ::std::string* VidCameraId::mutable_strstorid() {
  
  // @@protoc_insertion_point(field_mutable:VidCameraId.strStorId)
  return strstorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCameraId::release_strstorid() {
  // @@protoc_insertion_point(field_release:VidCameraId.strStorId)
  
  return strstorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCameraId::set_allocated_strstorid(::std::string* strstorid) {
  if (strstorid != NULL) {
    
  } else {
    
  }
  strstorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strstorid);
  // @@protoc_insertion_point(field_set_allocated:VidCameraId.strStorId)
}

// string strCameraId = 2;
inline void VidCameraId::clear_strcameraid() {
  strcameraid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidCameraId::strcameraid() const {
  // @@protoc_insertion_point(field_get:VidCameraId.strCameraId)
  return strcameraid_.GetNoArena();
}
inline void VidCameraId::set_strcameraid(const ::std::string& value) {
  
  strcameraid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidCameraId.strCameraId)
}
#if LANG_CXX11
inline void VidCameraId::set_strcameraid(::std::string&& value) {
  
  strcameraid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidCameraId.strCameraId)
}
#endif
inline void VidCameraId::set_strcameraid(const char* value) {
  
  strcameraid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidCameraId.strCameraId)
}
inline void VidCameraId::set_strcameraid(const char* value, size_t size) {
  
  strcameraid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidCameraId.strCameraId)
}
inline ::std::string* VidCameraId::mutable_strcameraid() {
  
  // @@protoc_insertion_point(field_mutable:VidCameraId.strCameraId)
  return strcameraid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidCameraId::release_strcameraid() {
  // @@protoc_insertion_point(field_release:VidCameraId.strCameraId)
  
  return strcameraid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidCameraId::set_allocated_strcameraid(::std::string* strcameraid) {
  if (strcameraid != NULL) {
    
  } else {
    
  }
  strcameraid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcameraid);
  // @@protoc_insertion_point(field_set_allocated:VidCameraId.strCameraId)
}

// -------------------------------------------------------------------

// VidClientConf

// .VidLanguage nLang = 1;
inline void VidClientConf::clear_nlang() {
  nlang_ = 0;
}
inline ::VidLanguage VidClientConf::nlang() const {
  // @@protoc_insertion_point(field_get:VidClientConf.nLang)
  return static_cast< ::VidLanguage >(nlang_);
}
inline void VidClientConf::set_nlang(::VidLanguage value) {
  
  nlang_ = value;
  // @@protoc_insertion_point(field_set:VidClientConf.nLang)
}

// string strAdminPasswd = 2;
inline void VidClientConf::clear_stradminpasswd() {
  stradminpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidClientConf::stradminpasswd() const {
  // @@protoc_insertion_point(field_get:VidClientConf.strAdminPasswd)
  return stradminpasswd_.GetNoArena();
}
inline void VidClientConf::set_stradminpasswd(const ::std::string& value) {
  
  stradminpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidClientConf.strAdminPasswd)
}
#if LANG_CXX11
inline void VidClientConf::set_stradminpasswd(::std::string&& value) {
  
  stradminpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidClientConf.strAdminPasswd)
}
#endif
inline void VidClientConf::set_stradminpasswd(const char* value) {
  
  stradminpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidClientConf.strAdminPasswd)
}
inline void VidClientConf::set_stradminpasswd(const char* value, size_t size) {
  
  stradminpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidClientConf.strAdminPasswd)
}
inline ::std::string* VidClientConf::mutable_stradminpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidClientConf.strAdminPasswd)
  return stradminpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidClientConf::release_stradminpasswd() {
  // @@protoc_insertion_point(field_release:VidClientConf.strAdminPasswd)
  
  return stradminpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidClientConf::set_allocated_stradminpasswd(::std::string* stradminpasswd) {
  if (stradminpasswd != NULL) {
    
  } else {
    
  }
  stradminpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stradminpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidClientConf.strAdminPasswd)
}

// bool bAutoLogin = 3;
inline void VidClientConf::clear_bautologin() {
  bautologin_ = false;
}
inline bool VidClientConf::bautologin() const {
  // @@protoc_insertion_point(field_get:VidClientConf.bAutoLogin)
  return bautologin_;
}
inline void VidClientConf::set_bautologin(bool value) {
  
  bautologin_ = value;
  // @@protoc_insertion_point(field_set:VidClientConf.bAutoLogin)
}

// bool bAutoFullScreen = 4;
inline void VidClientConf::clear_bautofullscreen() {
  bautofullscreen_ = false;
}
inline bool VidClientConf::bautofullscreen() const {
  // @@protoc_insertion_point(field_get:VidClientConf.bAutoFullScreen)
  return bautofullscreen_;
}
inline void VidClientConf::set_bautofullscreen(bool value) {
  
  bautofullscreen_ = value;
  // @@protoc_insertion_point(field_set:VidClientConf.bAutoFullScreen)
}

// -------------------------------------------------------------------

// VidStor

// string strId = 1;
inline void VidStor::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strid() const {
  // @@protoc_insertion_point(field_get:VidStor.strId)
  return strid_.GetNoArena();
}
inline void VidStor::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidStor.strId)
}
#if LANG_CXX11
inline void VidStor::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidStor.strId)
}
#endif
inline void VidStor::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidStor.strId)
}
inline void VidStor::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidStor.strId)
}
inline ::std::string* VidStor::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidStor.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strid() {
  // @@protoc_insertion_point(field_release:VidStor.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidStor.strId)
}

// string strName = 2;
inline void VidStor::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strname() const {
  // @@protoc_insertion_point(field_get:VidStor.strName)
  return strname_.GetNoArena();
}
inline void VidStor::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidStor.strName)
}
#if LANG_CXX11
inline void VidStor::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidStor.strName)
}
#endif
inline void VidStor::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidStor.strName)
}
inline void VidStor::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidStor.strName)
}
inline ::std::string* VidStor::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidStor.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strname() {
  // @@protoc_insertion_point(field_release:VidStor.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidStor.strName)
}

// string strIP = 3;
inline void VidStor::clear_strip() {
  strip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strip() const {
  // @@protoc_insertion_point(field_get:VidStor.strIP)
  return strip_.GetNoArena();
}
inline void VidStor::set_strip(const ::std::string& value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidStor.strIP)
}
#if LANG_CXX11
inline void VidStor::set_strip(::std::string&& value) {
  
  strip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidStor.strIP)
}
#endif
inline void VidStor::set_strip(const char* value) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidStor.strIP)
}
inline void VidStor::set_strip(const char* value, size_t size) {
  
  strip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidStor.strIP)
}
inline ::std::string* VidStor::mutable_strip() {
  
  // @@protoc_insertion_point(field_mutable:VidStor.strIP)
  return strip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strip() {
  // @@protoc_insertion_point(field_release:VidStor.strIP)
  
  return strip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strip(::std::string* strip) {
  if (strip != NULL) {
    
  } else {
    
  }
  strip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strip);
  // @@protoc_insertion_point(field_set_allocated:VidStor.strIP)
}

// string strPort = 4;
inline void VidStor::clear_strport() {
  strport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strport() const {
  // @@protoc_insertion_point(field_get:VidStor.strPort)
  return strport_.GetNoArena();
}
inline void VidStor::set_strport(const ::std::string& value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidStor.strPort)
}
#if LANG_CXX11
inline void VidStor::set_strport(::std::string&& value) {
  
  strport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidStor.strPort)
}
#endif
inline void VidStor::set_strport(const char* value) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidStor.strPort)
}
inline void VidStor::set_strport(const char* value, size_t size) {
  
  strport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidStor.strPort)
}
inline ::std::string* VidStor::mutable_strport() {
  
  // @@protoc_insertion_point(field_mutable:VidStor.strPort)
  return strport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strport() {
  // @@protoc_insertion_point(field_release:VidStor.strPort)
  
  return strport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strport(::std::string* strport) {
  if (strport != NULL) {
    
  } else {
    
  }
  strport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strport);
  // @@protoc_insertion_point(field_set_allocated:VidStor.strPort)
}

// string strUser = 5;
inline void VidStor::clear_struser() {
  struser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::struser() const {
  // @@protoc_insertion_point(field_get:VidStor.strUser)
  return struser_.GetNoArena();
}
inline void VidStor::set_struser(const ::std::string& value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidStor.strUser)
}
#if LANG_CXX11
inline void VidStor::set_struser(::std::string&& value) {
  
  struser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidStor.strUser)
}
#endif
inline void VidStor::set_struser(const char* value) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidStor.strUser)
}
inline void VidStor::set_struser(const char* value, size_t size) {
  
  struser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidStor.strUser)
}
inline ::std::string* VidStor::mutable_struser() {
  
  // @@protoc_insertion_point(field_mutable:VidStor.strUser)
  return struser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_struser() {
  // @@protoc_insertion_point(field_release:VidStor.strUser)
  
  return struser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_struser(::std::string* struser) {
  if (struser != NULL) {
    
  } else {
    
  }
  struser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), struser);
  // @@protoc_insertion_point(field_set_allocated:VidStor.strUser)
}

// string strPasswd = 6;
inline void VidStor::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStor::strpasswd() const {
  // @@protoc_insertion_point(field_get:VidStor.strPasswd)
  return strpasswd_.GetNoArena();
}
inline void VidStor::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidStor.strPasswd)
}
#if LANG_CXX11
inline void VidStor::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidStor.strPasswd)
}
#endif
inline void VidStor::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidStor.strPasswd)
}
inline void VidStor::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidStor.strPasswd)
}
inline ::std::string* VidStor::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:VidStor.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStor::release_strpasswd() {
  // @@protoc_insertion_point(field_release:VidStor.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStor::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:VidStor.strPasswd)
}

// -------------------------------------------------------------------

// VidStorList

// repeated .VidStor cVidStor = 1;
inline int VidStorList::cvidstor_size() const {
  return cvidstor_.size();
}
inline void VidStorList::clear_cvidstor() {
  cvidstor_.Clear();
}
inline const ::VidStor& VidStorList::cvidstor(int index) const {
  // @@protoc_insertion_point(field_get:VidStorList.cVidStor)
  return cvidstor_.Get(index);
}
inline ::VidStor* VidStorList::mutable_cvidstor(int index) {
  // @@protoc_insertion_point(field_mutable:VidStorList.cVidStor)
  return cvidstor_.Mutable(index);
}
inline ::VidStor* VidStorList::add_cvidstor() {
  // @@protoc_insertion_point(field_add:VidStorList.cVidStor)
  return cvidstor_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidStor >*
VidStorList::mutable_cvidstor() {
  // @@protoc_insertion_point(field_mutable_list:VidStorList.cVidStor)
  return &cvidstor_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidStor >&
VidStorList::cvidstor() const {
  // @@protoc_insertion_point(field_list:VidStorList.cVidStor)
  return cvidstor_;
}

// -------------------------------------------------------------------

// VidViewWindow

// .VidCameraId cId = 1;
inline bool VidViewWindow::has_cid() const {
  return this != internal_default_instance() && cid_ != NULL;
}
inline void VidViewWindow::clear_cid() {
  if (GetArenaNoVirtual() == NULL && cid_ != NULL) delete cid_;
  cid_ = NULL;
}
inline const ::VidCameraId& VidViewWindow::cid() const {
  // @@protoc_insertion_point(field_get:VidViewWindow.cId)
  return cid_ != NULL ? *cid_
                         : *::VidCameraId::internal_default_instance();
}
inline ::VidCameraId* VidViewWindow::mutable_cid() {
  
  if (cid_ == NULL) {
    cid_ = new ::VidCameraId;
  }
  // @@protoc_insertion_point(field_mutable:VidViewWindow.cId)
  return cid_;
}
inline ::VidCameraId* VidViewWindow::release_cid() {
  // @@protoc_insertion_point(field_release:VidViewWindow.cId)
  
  ::VidCameraId* temp = cid_;
  cid_ = NULL;
  return temp;
}
inline void VidViewWindow::set_allocated_cid(::VidCameraId* cid) {
  delete cid_;
  cid_ = cid;
  if (cid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VidViewWindow.cId)
}

// int32 nWindowsId = 2;
inline void VidViewWindow::clear_nwindowsid() {
  nwindowsid_ = 0;
}
inline ::google::protobuf::int32 VidViewWindow::nwindowsid() const {
  // @@protoc_insertion_point(field_get:VidViewWindow.nWindowsId)
  return nwindowsid_;
}
inline void VidViewWindow::set_nwindowsid(::google::protobuf::int32 value) {
  
  nwindowsid_ = value;
  // @@protoc_insertion_point(field_set:VidViewWindow.nWindowsId)
}

// bool bHWAccel = 3;
inline void VidViewWindow::clear_bhwaccel() {
  bhwaccel_ = false;
}
inline bool VidViewWindow::bhwaccel() const {
  // @@protoc_insertion_point(field_get:VidViewWindow.bHWAccel)
  return bhwaccel_;
}
inline void VidViewWindow::set_bhwaccel(bool value) {
  
  bhwaccel_ = value;
  // @@protoc_insertion_point(field_set:VidViewWindow.bHWAccel)
}

// -------------------------------------------------------------------

// VidView

// string strId = 1;
inline void VidView::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidView::strid() const {
  // @@protoc_insertion_point(field_get:VidView.strId)
  return strid_.GetNoArena();
}
inline void VidView::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidView.strId)
}
#if LANG_CXX11
inline void VidView::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidView.strId)
}
#endif
inline void VidView::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidView.strId)
}
inline void VidView::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidView.strId)
}
inline ::std::string* VidView::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidView.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidView::release_strid() {
  // @@protoc_insertion_point(field_release:VidView.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidView::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidView.strId)
}

// string strName = 2;
inline void VidView::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidView::strname() const {
  // @@protoc_insertion_point(field_get:VidView.strName)
  return strname_.GetNoArena();
}
inline void VidView::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidView.strName)
}
#if LANG_CXX11
inline void VidView::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidView.strName)
}
#endif
inline void VidView::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidView.strName)
}
inline void VidView::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidView.strName)
}
inline ::std::string* VidView::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidView.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidView::release_strname() {
  // @@protoc_insertion_point(field_release:VidView.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidView::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidView.strName)
}

// repeated .VidViewWindow cView = 3;
inline int VidView::cview_size() const {
  return cview_.size();
}
inline void VidView::clear_cview() {
  cview_.Clear();
}
inline const ::VidViewWindow& VidView::cview(int index) const {
  // @@protoc_insertion_point(field_get:VidView.cView)
  return cview_.Get(index);
}
inline ::VidViewWindow* VidView::mutable_cview(int index) {
  // @@protoc_insertion_point(field_mutable:VidView.cView)
  return cview_.Mutable(index);
}
inline ::VidViewWindow* VidView::add_cview() {
  // @@protoc_insertion_point(field_add:VidView.cView)
  return cview_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidViewWindow >*
VidView::mutable_cview() {
  // @@protoc_insertion_point(field_mutable_list:VidView.cView)
  return &cview_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidViewWindow >&
VidView::cview() const {
  // @@protoc_insertion_point(field_list:VidView.cView)
  return cview_;
}

// .VidLayout cLayout = 4;
inline void VidView::clear_clayout() {
  clayout_ = 0;
}
inline ::VidLayout VidView::clayout() const {
  // @@protoc_insertion_point(field_get:VidView.cLayout)
  return static_cast< ::VidLayout >(clayout_);
}
inline void VidView::set_clayout(::VidLayout value) {
  
  clayout_ = value;
  // @@protoc_insertion_point(field_set:VidView.cLayout)
}

// -------------------------------------------------------------------

// VidViewList

// repeated .VidView cVidView = 1;
inline int VidViewList::cvidview_size() const {
  return cvidview_.size();
}
inline void VidViewList::clear_cvidview() {
  cvidview_.Clear();
}
inline const ::VidView& VidViewList::cvidview(int index) const {
  // @@protoc_insertion_point(field_get:VidViewList.cVidView)
  return cvidview_.Get(index);
}
inline ::VidView* VidViewList::mutable_cvidview(int index) {
  // @@protoc_insertion_point(field_mutable:VidViewList.cVidView)
  return cvidview_.Mutable(index);
}
inline ::VidView* VidViewList::add_cvidview() {
  // @@protoc_insertion_point(field_add:VidViewList.cVidView)
  return cvidview_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidView >*
VidViewList::mutable_cvidview() {
  // @@protoc_insertion_point(field_mutable_list:VidViewList.cVidView)
  return &cvidview_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidView >&
VidViewList::cvidview() const {
  // @@protoc_insertion_point(field_list:VidViewList.cVidView)
  return cvidview_;
}

// -------------------------------------------------------------------

// VidTour

// string strId = 1;
inline void VidTour::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidTour::strid() const {
  // @@protoc_insertion_point(field_get:VidTour.strId)
  return strid_.GetNoArena();
}
inline void VidTour::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidTour.strId)
}
#if LANG_CXX11
inline void VidTour::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidTour.strId)
}
#endif
inline void VidTour::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidTour.strId)
}
inline void VidTour::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidTour.strId)
}
inline ::std::string* VidTour::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidTour.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidTour::release_strid() {
  // @@protoc_insertion_point(field_release:VidTour.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidTour::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidTour.strId)
}

// string strName = 2;
inline void VidTour::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidTour::strname() const {
  // @@protoc_insertion_point(field_get:VidTour.strName)
  return strname_.GetNoArena();
}
inline void VidTour::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidTour.strName)
}
#if LANG_CXX11
inline void VidTour::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidTour.strName)
}
#endif
inline void VidTour::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidTour.strName)
}
inline void VidTour::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidTour.strName)
}
inline ::std::string* VidTour::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidTour.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidTour::release_strname() {
  // @@protoc_insertion_point(field_release:VidTour.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidTour::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidTour.strName)
}

// repeated string strView = 3;
inline int VidTour::strview_size() const {
  return strview_.size();
}
inline void VidTour::clear_strview() {
  strview_.Clear();
}
inline const ::std::string& VidTour::strview(int index) const {
  // @@protoc_insertion_point(field_get:VidTour.strView)
  return strview_.Get(index);
}
inline ::std::string* VidTour::mutable_strview(int index) {
  // @@protoc_insertion_point(field_mutable:VidTour.strView)
  return strview_.Mutable(index);
}
inline void VidTour::set_strview(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:VidTour.strView)
  strview_.Mutable(index)->assign(value);
}
inline void VidTour::set_strview(int index, const char* value) {
  strview_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:VidTour.strView)
}
inline void VidTour::set_strview(int index, const char* value, size_t size) {
  strview_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:VidTour.strView)
}
inline ::std::string* VidTour::add_strview() {
  // @@protoc_insertion_point(field_add_mutable:VidTour.strView)
  return strview_.Add();
}
inline void VidTour::add_strview(const ::std::string& value) {
  strview_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:VidTour.strView)
}
inline void VidTour::add_strview(const char* value) {
  strview_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:VidTour.strView)
}
inline void VidTour::add_strview(const char* value, size_t size) {
  strview_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:VidTour.strView)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VidTour::strview() const {
  // @@protoc_insertion_point(field_list:VidTour.strView)
  return strview_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VidTour::mutable_strview() {
  // @@protoc_insertion_point(field_mutable_list:VidTour.strView)
  return &strview_;
}

// -------------------------------------------------------------------

// VidTourList

// repeated .VidTour cVidTour = 1;
inline int VidTourList::cvidtour_size() const {
  return cvidtour_.size();
}
inline void VidTourList::clear_cvidtour() {
  cvidtour_.Clear();
}
inline const ::VidTour& VidTourList::cvidtour(int index) const {
  // @@protoc_insertion_point(field_get:VidTourList.cVidTour)
  return cvidtour_.Get(index);
}
inline ::VidTour* VidTourList::mutable_cvidtour(int index) {
  // @@protoc_insertion_point(field_mutable:VidTourList.cVidTour)
  return cvidtour_.Mutable(index);
}
inline ::VidTour* VidTourList::add_cvidtour() {
  // @@protoc_insertion_point(field_add:VidTourList.cVidTour)
  return cvidtour_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidTour >*
VidTourList::mutable_cvidtour() {
  // @@protoc_insertion_point(field_mutable_list:VidTourList.cVidTour)
  return &cvidtour_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidTour >&
VidTourList::cvidtour() const {
  // @@protoc_insertion_point(field_list:VidTourList.cVidTour)
  return cvidtour_;
}

// -------------------------------------------------------------------

// VidGroup

// string strId = 1;
inline void VidGroup::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidGroup::strid() const {
  // @@protoc_insertion_point(field_get:VidGroup.strId)
  return strid_.GetNoArena();
}
inline void VidGroup::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidGroup.strId)
}
#if LANG_CXX11
inline void VidGroup::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidGroup.strId)
}
#endif
inline void VidGroup::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidGroup.strId)
}
inline void VidGroup::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidGroup.strId)
}
inline ::std::string* VidGroup::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidGroup.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidGroup::release_strid() {
  // @@protoc_insertion_point(field_release:VidGroup.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidGroup::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidGroup.strId)
}

// string strName = 2;
inline void VidGroup::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidGroup::strname() const {
  // @@protoc_insertion_point(field_get:VidGroup.strName)
  return strname_.GetNoArena();
}
inline void VidGroup::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidGroup.strName)
}
#if LANG_CXX11
inline void VidGroup::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidGroup.strName)
}
#endif
inline void VidGroup::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidGroup.strName)
}
inline void VidGroup::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidGroup.strName)
}
inline ::std::string* VidGroup::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidGroup.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidGroup::release_strname() {
  // @@protoc_insertion_point(field_release:VidGroup.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidGroup::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidGroup.strName)
}

// repeated .VidCameraId cGroup = 3;
inline int VidGroup::cgroup_size() const {
  return cgroup_.size();
}
inline void VidGroup::clear_cgroup() {
  cgroup_.Clear();
}
inline const ::VidCameraId& VidGroup::cgroup(int index) const {
  // @@protoc_insertion_point(field_get:VidGroup.cGroup)
  return cgroup_.Get(index);
}
inline ::VidCameraId* VidGroup::mutable_cgroup(int index) {
  // @@protoc_insertion_point(field_mutable:VidGroup.cGroup)
  return cgroup_.Mutable(index);
}
inline ::VidCameraId* VidGroup::add_cgroup() {
  // @@protoc_insertion_point(field_add:VidGroup.cGroup)
  return cgroup_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidCameraId >*
VidGroup::mutable_cgroup() {
  // @@protoc_insertion_point(field_mutable_list:VidGroup.cGroup)
  return &cgroup_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidCameraId >&
VidGroup::cgroup() const {
  // @@protoc_insertion_point(field_list:VidGroup.cGroup)
  return cgroup_;
}

// -------------------------------------------------------------------

// VidGroupList

// repeated .VidGroup cVidGroup = 1;
inline int VidGroupList::cvidgroup_size() const {
  return cvidgroup_.size();
}
inline void VidGroupList::clear_cvidgroup() {
  cvidgroup_.Clear();
}
inline const ::VidGroup& VidGroupList::cvidgroup(int index) const {
  // @@protoc_insertion_point(field_get:VidGroupList.cVidGroup)
  return cvidgroup_.Get(index);
}
inline ::VidGroup* VidGroupList::mutable_cvidgroup(int index) {
  // @@protoc_insertion_point(field_mutable:VidGroupList.cVidGroup)
  return cvidgroup_.Mutable(index);
}
inline ::VidGroup* VidGroupList::add_cvidgroup() {
  // @@protoc_insertion_point(field_add:VidGroupList.cVidGroup)
  return cvidgroup_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidGroup >*
VidGroupList::mutable_cvidgroup() {
  // @@protoc_insertion_point(field_mutable_list:VidGroupList.cVidGroup)
  return &cvidgroup_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidGroup >&
VidGroupList::cvidgroup() const {
  // @@protoc_insertion_point(field_list:VidGroupList.cVidGroup)
  return cvidgroup_;
}

// -------------------------------------------------------------------

// VidEmapCamera

// .VidCameraId cId = 1;
inline bool VidEmapCamera::has_cid() const {
  return this != internal_default_instance() && cid_ != NULL;
}
inline void VidEmapCamera::clear_cid() {
  if (GetArenaNoVirtual() == NULL && cid_ != NULL) delete cid_;
  cid_ = NULL;
}
inline const ::VidCameraId& VidEmapCamera::cid() const {
  // @@protoc_insertion_point(field_get:VidEmapCamera.cId)
  return cid_ != NULL ? *cid_
                         : *::VidCameraId::internal_default_instance();
}
inline ::VidCameraId* VidEmapCamera::mutable_cid() {
  
  if (cid_ == NULL) {
    cid_ = new ::VidCameraId;
  }
  // @@protoc_insertion_point(field_mutable:VidEmapCamera.cId)
  return cid_;
}
inline ::VidCameraId* VidEmapCamera::release_cid() {
  // @@protoc_insertion_point(field_release:VidEmapCamera.cId)
  
  ::VidCameraId* temp = cid_;
  cid_ = NULL;
  return temp;
}
inline void VidEmapCamera::set_allocated_cid(::VidCameraId* cid) {
  delete cid_;
  cid_ = cid;
  if (cid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VidEmapCamera.cId)
}

// int32 x = 2;
inline void VidEmapCamera::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 VidEmapCamera::x() const {
  // @@protoc_insertion_point(field_get:VidEmapCamera.x)
  return x_;
}
inline void VidEmapCamera::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:VidEmapCamera.x)
}

// int32 y = 3;
inline void VidEmapCamera::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 VidEmapCamera::y() const {
  // @@protoc_insertion_point(field_get:VidEmapCamera.y)
  return y_;
}
inline void VidEmapCamera::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:VidEmapCamera.y)
}

// int32 w = 4;
inline void VidEmapCamera::clear_w() {
  w_ = 0;
}
inline ::google::protobuf::int32 VidEmapCamera::w() const {
  // @@protoc_insertion_point(field_get:VidEmapCamera.w)
  return w_;
}
inline void VidEmapCamera::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:VidEmapCamera.w)
}

// int32 h = 5;
inline void VidEmapCamera::clear_h() {
  h_ = 0;
}
inline ::google::protobuf::int32 VidEmapCamera::h() const {
  // @@protoc_insertion_point(field_get:VidEmapCamera.h)
  return h_;
}
inline void VidEmapCamera::set_h(::google::protobuf::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:VidEmapCamera.h)
}

// -------------------------------------------------------------------

// VidEmap

// string strId = 1;
inline void VidEmap::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEmap::strid() const {
  // @@protoc_insertion_point(field_get:VidEmap.strId)
  return strid_.GetNoArena();
}
inline void VidEmap::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEmap.strId)
}
#if LANG_CXX11
inline void VidEmap::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEmap.strId)
}
#endif
inline void VidEmap::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEmap.strId)
}
inline void VidEmap::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEmap.strId)
}
inline ::std::string* VidEmap::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidEmap.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEmap::release_strid() {
  // @@protoc_insertion_point(field_release:VidEmap.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEmap::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidEmap.strId)
}

// string strName = 2;
inline void VidEmap::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEmap::strname() const {
  // @@protoc_insertion_point(field_get:VidEmap.strName)
  return strname_.GetNoArena();
}
inline void VidEmap::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEmap.strName)
}
#if LANG_CXX11
inline void VidEmap::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEmap.strName)
}
#endif
inline void VidEmap::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEmap.strName)
}
inline void VidEmap::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEmap.strName)
}
inline ::std::string* VidEmap::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidEmap.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEmap::release_strname() {
  // @@protoc_insertion_point(field_release:VidEmap.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEmap::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidEmap.strName)
}

// repeated .VidEmapCamera cCamera = 3;
inline int VidEmap::ccamera_size() const {
  return ccamera_.size();
}
inline void VidEmap::clear_ccamera() {
  ccamera_.Clear();
}
inline const ::VidEmapCamera& VidEmap::ccamera(int index) const {
  // @@protoc_insertion_point(field_get:VidEmap.cCamera)
  return ccamera_.Get(index);
}
inline ::VidEmapCamera* VidEmap::mutable_ccamera(int index) {
  // @@protoc_insertion_point(field_mutable:VidEmap.cCamera)
  return ccamera_.Mutable(index);
}
inline ::VidEmapCamera* VidEmap::add_ccamera() {
  // @@protoc_insertion_point(field_add:VidEmap.cCamera)
  return ccamera_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidEmapCamera >*
VidEmap::mutable_ccamera() {
  // @@protoc_insertion_point(field_mutable_list:VidEmap.cCamera)
  return &ccamera_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidEmapCamera >&
VidEmap::ccamera() const {
  // @@protoc_insertion_point(field_list:VidEmap.cCamera)
  return ccamera_;
}

// -------------------------------------------------------------------

// VidEmapList

// repeated .VidEmap cVidEmap = 1;
inline int VidEmapList::cvidemap_size() const {
  return cvidemap_.size();
}
inline void VidEmapList::clear_cvidemap() {
  cvidemap_.Clear();
}
inline const ::VidEmap& VidEmapList::cvidemap(int index) const {
  // @@protoc_insertion_point(field_get:VidEmapList.cVidEmap)
  return cvidemap_.Get(index);
}
inline ::VidEmap* VidEmapList::mutable_cvidemap(int index) {
  // @@protoc_insertion_point(field_mutable:VidEmapList.cVidEmap)
  return cvidemap_.Mutable(index);
}
inline ::VidEmap* VidEmapList::add_cvidemap() {
  // @@protoc_insertion_point(field_add:VidEmapList.cVidEmap)
  return cvidemap_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidEmap >*
VidEmapList::mutable_cvidemap() {
  // @@protoc_insertion_point(field_mutable_list:VidEmapList.cVidEmap)
  return &cvidemap_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidEmap >&
VidEmapList::cvidemap() const {
  // @@protoc_insertion_point(field_list:VidEmapList.cVidEmap)
  return cvidemap_;
}

// -------------------------------------------------------------------

// VidStream

// string strToken = 1;
inline void VidStream::clear_strtoken() {
  strtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStream::strtoken() const {
  // @@protoc_insertion_point(field_get:VidStream.strToken)
  return strtoken_.GetNoArena();
}
inline void VidStream::set_strtoken(const ::std::string& value) {
  
  strtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidStream.strToken)
}
#if LANG_CXX11
inline void VidStream::set_strtoken(::std::string&& value) {
  
  strtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidStream.strToken)
}
#endif
inline void VidStream::set_strtoken(const char* value) {
  
  strtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidStream.strToken)
}
inline void VidStream::set_strtoken(const char* value, size_t size) {
  
  strtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidStream.strToken)
}
inline ::std::string* VidStream::mutable_strtoken() {
  
  // @@protoc_insertion_point(field_mutable:VidStream.strToken)
  return strtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStream::release_strtoken() {
  // @@protoc_insertion_point(field_release:VidStream.strToken)
  
  return strtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStream::set_allocated_strtoken(::std::string* strtoken) {
  if (strtoken != NULL) {
    
  } else {
    
  }
  strtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtoken);
  // @@protoc_insertion_point(field_set_allocated:VidStream.strToken)
}

// string strName = 2;
inline void VidStream::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidStream::strname() const {
  // @@protoc_insertion_point(field_get:VidStream.strName)
  return strname_.GetNoArena();
}
inline void VidStream::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidStream.strName)
}
#if LANG_CXX11
inline void VidStream::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidStream.strName)
}
#endif
inline void VidStream::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidStream.strName)
}
inline void VidStream::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidStream.strName)
}
inline ::std::string* VidStream::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:VidStream.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidStream::release_strname() {
  // @@protoc_insertion_point(field_release:VidStream.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidStream::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:VidStream.strName)
}

// -------------------------------------------------------------------

// VidStreamList

// repeated .VidStream cVidStream = 1;
inline int VidStreamList::cvidstream_size() const {
  return cvidstream_.size();
}
inline void VidStreamList::clear_cvidstream() {
  cvidstream_.Clear();
}
inline const ::VidStream& VidStreamList::cvidstream(int index) const {
  // @@protoc_insertion_point(field_get:VidStreamList.cVidStream)
  return cvidstream_.Get(index);
}
inline ::VidStream* VidStreamList::mutable_cvidstream(int index) {
  // @@protoc_insertion_point(field_mutable:VidStreamList.cVidStream)
  return cvidstream_.Mutable(index);
}
inline ::VidStream* VidStreamList::add_cvidstream() {
  // @@protoc_insertion_point(field_add:VidStreamList.cVidStream)
  return cvidstream_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidStream >*
VidStreamList::mutable_cvidstream() {
  // @@protoc_insertion_point(field_mutable_list:VidStreamList.cVidStream)
  return &cvidstream_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidStream >&
VidStreamList::cvidstream() const {
  // @@protoc_insertion_point(field_list:VidStreamList.cVidStream)
  return cvidstream_;
}

// -------------------------------------------------------------------

// VidBlob

// int32 x0 = 1;
inline void VidBlob::clear_x0() {
  x0_ = 0;
}
inline ::google::protobuf::int32 VidBlob::x0() const {
  // @@protoc_insertion_point(field_get:VidBlob.x0)
  return x0_;
}
inline void VidBlob::set_x0(::google::protobuf::int32 value) {
  
  x0_ = value;
  // @@protoc_insertion_point(field_set:VidBlob.x0)
}

// int32 y0 = 2;
inline void VidBlob::clear_y0() {
  y0_ = 0;
}
inline ::google::protobuf::int32 VidBlob::y0() const {
  // @@protoc_insertion_point(field_get:VidBlob.y0)
  return y0_;
}
inline void VidBlob::set_y0(::google::protobuf::int32 value) {
  
  y0_ = value;
  // @@protoc_insertion_point(field_set:VidBlob.y0)
}

// int32 x1 = 3;
inline void VidBlob::clear_x1() {
  x1_ = 0;
}
inline ::google::protobuf::int32 VidBlob::x1() const {
  // @@protoc_insertion_point(field_get:VidBlob.x1)
  return x1_;
}
inline void VidBlob::set_x1(::google::protobuf::int32 value) {
  
  x1_ = value;
  // @@protoc_insertion_point(field_set:VidBlob.x1)
}

// int32 y1 = 4;
inline void VidBlob::clear_y1() {
  y1_ = 0;
}
inline ::google::protobuf::int32 VidBlob::y1() const {
  // @@protoc_insertion_point(field_get:VidBlob.y1)
  return y1_;
}
inline void VidBlob::set_y1(::google::protobuf::int32 value) {
  
  y1_ = value;
  // @@protoc_insertion_point(field_set:VidBlob.y1)
}

// -------------------------------------------------------------------

// VidBlobList

// repeated .VidBlob cBlob = 1;
inline int VidBlobList::cblob_size() const {
  return cblob_.size();
}
inline void VidBlobList::clear_cblob() {
  cblob_.Clear();
}
inline const ::VidBlob& VidBlobList::cblob(int index) const {
  // @@protoc_insertion_point(field_get:VidBlobList.cBlob)
  return cblob_.Get(index);
}
inline ::VidBlob* VidBlobList::mutable_cblob(int index) {
  // @@protoc_insertion_point(field_mutable:VidBlobList.cBlob)
  return cblob_.Mutable(index);
}
inline ::VidBlob* VidBlobList::add_cblob() {
  // @@protoc_insertion_point(field_add:VidBlobList.cBlob)
  return cblob_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::VidBlob >*
VidBlobList::mutable_cblob() {
  // @@protoc_insertion_point(field_mutable_list:VidBlobList.cBlob)
  return &cblob_;
}
inline const ::google::protobuf::RepeatedPtrField< ::VidBlob >&
VidBlobList::cblob() const {
  // @@protoc_insertion_point(field_list:VidBlobList.cBlob)
  return cblob_;
}

// -------------------------------------------------------------------

// VidEventDBConf

// .VidEventDBType nType = 1;
inline void VidEventDBConf::clear_ntype() {
  ntype_ = 0;
}
inline ::VidEventDBType VidEventDBConf::ntype() const {
  // @@protoc_insertion_point(field_get:VidEventDBConf.nType)
  return static_cast< ::VidEventDBType >(ntype_);
}
inline void VidEventDBConf::set_ntype(::VidEventDBType value) {
  
  ntype_ = value;
  // @@protoc_insertion_point(field_set:VidEventDBConf.nType)
}

// string strDBPath = 2;
inline void VidEventDBConf::clear_strdbpath() {
  strdbpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEventDBConf::strdbpath() const {
  // @@protoc_insertion_point(field_get:VidEventDBConf.strDBPath)
  return strdbpath_.GetNoArena();
}
inline void VidEventDBConf::set_strdbpath(const ::std::string& value) {
  
  strdbpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEventDBConf.strDBPath)
}
#if LANG_CXX11
inline void VidEventDBConf::set_strdbpath(::std::string&& value) {
  
  strdbpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEventDBConf.strDBPath)
}
#endif
inline void VidEventDBConf::set_strdbpath(const char* value) {
  
  strdbpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEventDBConf.strDBPath)
}
inline void VidEventDBConf::set_strdbpath(const char* value, size_t size) {
  
  strdbpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEventDBConf.strDBPath)
}
inline ::std::string* VidEventDBConf::mutable_strdbpath() {
  
  // @@protoc_insertion_point(field_mutable:VidEventDBConf.strDBPath)
  return strdbpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEventDBConf::release_strdbpath() {
  // @@protoc_insertion_point(field_release:VidEventDBConf.strDBPath)
  
  return strdbpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEventDBConf::set_allocated_strdbpath(::std::string* strdbpath) {
  if (strdbpath != NULL) {
    
  } else {
    
  }
  strdbpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdbpath);
  // @@protoc_insertion_point(field_set_allocated:VidEventDBConf.strDBPath)
}

// -------------------------------------------------------------------

// VidEvent

// string strId = 1;
inline void VidEvent::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEvent::strid() const {
  // @@protoc_insertion_point(field_get:VidEvent.strId)
  return strid_.GetNoArena();
}
inline void VidEvent::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEvent.strId)
}
#if LANG_CXX11
inline void VidEvent::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEvent.strId)
}
#endif
inline void VidEvent::set_strid(const char* value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEvent.strId)
}
inline void VidEvent::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEvent.strId)
}
inline ::std::string* VidEvent::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:VidEvent.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEvent::release_strid() {
  // @@protoc_insertion_point(field_release:VidEvent.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEvent::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:VidEvent.strId)
}

// string strDevice = 2;
inline void VidEvent::clear_strdevice() {
  strdevice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEvent::strdevice() const {
  // @@protoc_insertion_point(field_get:VidEvent.strDevice)
  return strdevice_.GetNoArena();
}
inline void VidEvent::set_strdevice(const ::std::string& value) {
  
  strdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEvent.strDevice)
}
#if LANG_CXX11
inline void VidEvent::set_strdevice(::std::string&& value) {
  
  strdevice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEvent.strDevice)
}
#endif
inline void VidEvent::set_strdevice(const char* value) {
  
  strdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEvent.strDevice)
}
inline void VidEvent::set_strdevice(const char* value, size_t size) {
  
  strdevice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEvent.strDevice)
}
inline ::std::string* VidEvent::mutable_strdevice() {
  
  // @@protoc_insertion_point(field_mutable:VidEvent.strDevice)
  return strdevice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEvent::release_strdevice() {
  // @@protoc_insertion_point(field_release:VidEvent.strDevice)
  
  return strdevice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEvent::set_allocated_strdevice(::std::string* strdevice) {
  if (strdevice != NULL) {
    
  } else {
    
  }
  strdevice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdevice);
  // @@protoc_insertion_point(field_set_allocated:VidEvent.strDevice)
}

// string strDeviceName = 3;
inline void VidEvent::clear_strdevicename() {
  strdevicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEvent::strdevicename() const {
  // @@protoc_insertion_point(field_get:VidEvent.strDeviceName)
  return strdevicename_.GetNoArena();
}
inline void VidEvent::set_strdevicename(const ::std::string& value) {
  
  strdevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEvent.strDeviceName)
}
#if LANG_CXX11
inline void VidEvent::set_strdevicename(::std::string&& value) {
  
  strdevicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEvent.strDeviceName)
}
#endif
inline void VidEvent::set_strdevicename(const char* value) {
  
  strdevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEvent.strDeviceName)
}
inline void VidEvent::set_strdevicename(const char* value, size_t size) {
  
  strdevicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEvent.strDeviceName)
}
inline ::std::string* VidEvent::mutable_strdevicename() {
  
  // @@protoc_insertion_point(field_mutable:VidEvent.strDeviceName)
  return strdevicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEvent::release_strdevicename() {
  // @@protoc_insertion_point(field_release:VidEvent.strDeviceName)
  
  return strdevicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEvent::set_allocated_strdevicename(::std::string* strdevicename) {
  if (strdevicename != NULL) {
    
  } else {
    
  }
  strdevicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdevicename);
  // @@protoc_insertion_point(field_set_allocated:VidEvent.strDeviceName)
}

// string strType = 4;
inline void VidEvent::clear_strtype() {
  strtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEvent::strtype() const {
  // @@protoc_insertion_point(field_get:VidEvent.strType)
  return strtype_.GetNoArena();
}
inline void VidEvent::set_strtype(const ::std::string& value) {
  
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEvent.strType)
}
#if LANG_CXX11
inline void VidEvent::set_strtype(::std::string&& value) {
  
  strtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEvent.strType)
}
#endif
inline void VidEvent::set_strtype(const char* value) {
  
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEvent.strType)
}
inline void VidEvent::set_strtype(const char* value, size_t size) {
  
  strtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEvent.strType)
}
inline ::std::string* VidEvent::mutable_strtype() {
  
  // @@protoc_insertion_point(field_mutable:VidEvent.strType)
  return strtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEvent::release_strtype() {
  // @@protoc_insertion_point(field_release:VidEvent.strType)
  
  return strtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEvent::set_allocated_strtype(::std::string* strtype) {
  if (strtype != NULL) {
    
  } else {
    
  }
  strtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtype);
  // @@protoc_insertion_point(field_set_allocated:VidEvent.strType)
}

// int64 nTime = 5;
inline void VidEvent::clear_ntime() {
  ntime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VidEvent::ntime() const {
  // @@protoc_insertion_point(field_get:VidEvent.nTime)
  return ntime_;
}
inline void VidEvent::set_ntime(::google::protobuf::int64 value) {
  
  ntime_ = value;
  // @@protoc_insertion_point(field_set:VidEvent.nTime)
}

// string strTime = 6;
inline void VidEvent::clear_strtime() {
  strtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEvent::strtime() const {
  // @@protoc_insertion_point(field_get:VidEvent.strTime)
  return strtime_.GetNoArena();
}
inline void VidEvent::set_strtime(const ::std::string& value) {
  
  strtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEvent.strTime)
}
#if LANG_CXX11
inline void VidEvent::set_strtime(::std::string&& value) {
  
  strtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEvent.strTime)
}
#endif
inline void VidEvent::set_strtime(const char* value) {
  
  strtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEvent.strTime)
}
inline void VidEvent::set_strtime(const char* value, size_t size) {
  
  strtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEvent.strTime)
}
inline ::std::string* VidEvent::mutable_strtime() {
  
  // @@protoc_insertion_point(field_mutable:VidEvent.strTime)
  return strtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEvent::release_strtime() {
  // @@protoc_insertion_point(field_release:VidEvent.strTime)
  
  return strtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEvent::set_allocated_strtime(::std::string* strtime) {
  if (strtime != NULL) {
    
  } else {
    
  }
  strtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtime);
  // @@protoc_insertion_point(field_set_allocated:VidEvent.strTime)
}

// string strDesc = 7;
inline void VidEvent::clear_strdesc() {
  strdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEvent::strdesc() const {
  // @@protoc_insertion_point(field_get:VidEvent.strDesc)
  return strdesc_.GetNoArena();
}
inline void VidEvent::set_strdesc(const ::std::string& value) {
  
  strdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEvent.strDesc)
}
#if LANG_CXX11
inline void VidEvent::set_strdesc(::std::string&& value) {
  
  strdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEvent.strDesc)
}
#endif
inline void VidEvent::set_strdesc(const char* value) {
  
  strdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEvent.strDesc)
}
inline void VidEvent::set_strdesc(const char* value, size_t size) {
  
  strdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEvent.strDesc)
}
inline ::std::string* VidEvent::mutable_strdesc() {
  
  // @@protoc_insertion_point(field_mutable:VidEvent.strDesc)
  return strdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEvent::release_strdesc() {
  // @@protoc_insertion_point(field_release:VidEvent.strDesc)
  
  return strdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEvent::set_allocated_strdesc(::std::string* strdesc) {
  if (strdesc != NULL) {
    
  } else {
    
  }
  strdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdesc);
  // @@protoc_insertion_point(field_set_allocated:VidEvent.strDesc)
}

// bool bHandled = 8;
inline void VidEvent::clear_bhandled() {
  bhandled_ = false;
}
inline bool VidEvent::bhandled() const {
  // @@protoc_insertion_point(field_get:VidEvent.bHandled)
  return bhandled_;
}
inline void VidEvent::set_bhandled(bool value) {
  
  bhandled_ = value;
  // @@protoc_insertion_point(field_set:VidEvent.bHandled)
}

// bool bSearched = 9;
inline void VidEvent::clear_bsearched() {
  bsearched_ = false;
}
inline bool VidEvent::bsearched() const {
  // @@protoc_insertion_point(field_get:VidEvent.bSearched)
  return bsearched_;
}
inline void VidEvent::set_bsearched(bool value) {
  
  bsearched_ = value;
  // @@protoc_insertion_point(field_set:VidEvent.bSearched)
}

// string strComments = 10;
inline void VidEvent::clear_strcomments() {
  strcomments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEvent::strcomments() const {
  // @@protoc_insertion_point(field_get:VidEvent.strComments)
  return strcomments_.GetNoArena();
}
inline void VidEvent::set_strcomments(const ::std::string& value) {
  
  strcomments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEvent.strComments)
}
#if LANG_CXX11
inline void VidEvent::set_strcomments(::std::string&& value) {
  
  strcomments_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEvent.strComments)
}
#endif
inline void VidEvent::set_strcomments(const char* value) {
  
  strcomments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEvent.strComments)
}
inline void VidEvent::set_strcomments(const char* value, size_t size) {
  
  strcomments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEvent.strComments)
}
inline ::std::string* VidEvent::mutable_strcomments() {
  
  // @@protoc_insertion_point(field_mutable:VidEvent.strComments)
  return strcomments_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEvent::release_strcomments() {
  // @@protoc_insertion_point(field_release:VidEvent.strComments)
  
  return strcomments_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEvent::set_allocated_strcomments(::std::string* strcomments) {
  if (strcomments != NULL) {
    
  } else {
    
  }
  strcomments_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcomments);
  // @@protoc_insertion_point(field_set_allocated:VidEvent.strComments)
}

// string strStorId = 11;
inline void VidEvent::clear_strstorid() {
  strstorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEvent::strstorid() const {
  // @@protoc_insertion_point(field_get:VidEvent.strStorId)
  return strstorid_.GetNoArena();
}
inline void VidEvent::set_strstorid(const ::std::string& value) {
  
  strstorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEvent.strStorId)
}
#if LANG_CXX11
inline void VidEvent::set_strstorid(::std::string&& value) {
  
  strstorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEvent.strStorId)
}
#endif
inline void VidEvent::set_strstorid(const char* value) {
  
  strstorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEvent.strStorId)
}
inline void VidEvent::set_strstorid(const char* value, size_t size) {
  
  strstorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEvent.strStorId)
}
inline ::std::string* VidEvent::mutable_strstorid() {
  
  // @@protoc_insertion_point(field_mutable:VidEvent.strStorId)
  return strstorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEvent::release_strstorid() {
  // @@protoc_insertion_point(field_release:VidEvent.strStorId)
  
  return strstorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEvent::set_allocated_strstorid(::std::string* strstorid) {
  if (strstorid != NULL) {
    
  } else {
    
  }
  strstorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strstorid);
  // @@protoc_insertion_point(field_set_allocated:VidEvent.strStorId)
}

// string strStorName = 12;
inline void VidEvent::clear_strstorname() {
  strstorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VidEvent::strstorname() const {
  // @@protoc_insertion_point(field_get:VidEvent.strStorName)
  return strstorname_.GetNoArena();
}
inline void VidEvent::set_strstorname(const ::std::string& value) {
  
  strstorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VidEvent.strStorName)
}
#if LANG_CXX11
inline void VidEvent::set_strstorname(::std::string&& value) {
  
  strstorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VidEvent.strStorName)
}
#endif
inline void VidEvent::set_strstorname(const char* value) {
  
  strstorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VidEvent.strStorName)
}
inline void VidEvent::set_strstorname(const char* value, size_t size) {
  
  strstorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VidEvent.strStorName)
}
inline ::std::string* VidEvent::mutable_strstorname() {
  
  // @@protoc_insertion_point(field_mutable:VidEvent.strStorName)
  return strstorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidEvent::release_strstorname() {
  // @@protoc_insertion_point(field_release:VidEvent.strStorName)
  
  return strstorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidEvent::set_allocated_strstorname(::std::string* strstorname) {
  if (strstorname != NULL) {
    
  } else {
    
  }
  strstorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strstorname);
  // @@protoc_insertion_point(field_set_allocated:VidEvent.strStorName)
}

// int64 nIdx = 13;
inline void VidEvent::clear_nidx() {
  nidx_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 VidEvent::nidx() const {
  // @@protoc_insertion_point(field_get:VidEvent.nIdx)
  return nidx_;
}
inline void VidEvent::set_nidx(::google::protobuf::int64 value) {
  
  nidx_ = value;
  // @@protoc_insertion_point(field_set:VidEvent.nIdx)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CameraType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CameraType>() {
  return ::CameraType_descriptor();
}
template <> struct is_proto_enum< ::VidRecType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VidRecType>() {
  return ::VidRecType_descriptor();
}
template <> struct is_proto_enum< ::CameraConnectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CameraConnectType>() {
  return ::CameraConnectType_descriptor();
}
template <> struct is_proto_enum< ::OnvifEventLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OnvifEventLevel>() {
  return ::OnvifEventLevel_descriptor();
}
template <> struct is_proto_enum< ::VidLanguage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VidLanguage>() {
  return ::VidLanguage_descriptor();
}
template <> struct is_proto_enum< ::VidLayout> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VidLayout>() {
  return ::VidLayout_descriptor();
}
template <> struct is_proto_enum< ::VidEventDBType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VidEventDBType>() {
  return ::VidEventDBType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vidconf_2eproto__INCLUDED
