// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onvifclidevice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "onvifclidevice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class OnvifCliDeviceLoginReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifCliDeviceLoginReq> {
} _OnvifCliDeviceLoginReq_default_instance_;
class OnvifCliDeviceLoginRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifCliDeviceLoginResp> {
} _OnvifCliDeviceLoginResp_default_instance_;

namespace protobuf_onvifclidevice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliDeviceLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliDeviceLoginReq, strusername_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliDeviceLoginReq, strpasswd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliDeviceLoginReq, strurl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliDeviceLoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliDeviceLoginResp, strhandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliDeviceLoginResp, blogined_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliDeviceLoginResp, bhasptz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliDeviceLoginResp, bhasevent_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(OnvifCliDeviceLoginReq)},
  { 7, -1, sizeof(OnvifCliDeviceLoginResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifCliDeviceLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifCliDeviceLoginResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "onvifclidevice.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _OnvifCliDeviceLoginReq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _OnvifCliDeviceLoginResp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _OnvifCliDeviceLoginReq_default_instance_.DefaultConstruct();
  _OnvifCliDeviceLoginResp_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024onvifclidevice.proto\"P\n\026OnvifCliDevice"
      "LoginReq\022\023\n\013strUserName\030\001 \001(\t\022\021\n\tstrPass"
      "wd\030\002 \001(\t\022\016\n\006strUrl\030\003 \001(\t\"b\n\027OnvifCliDevi"
      "ceLoginResp\022\021\n\tstrHandle\030\001 \001(\t\022\020\n\010bLogin"
      "ed\030\002 \001(\010\022\017\n\007bHasPTZ\030\003 \001(\010\022\021\n\tbHasEvent\030\004"
      " \001(\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 212);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "onvifclidevice.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_onvifclidevice_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifCliDeviceLoginReq::kStrUserNameFieldNumber;
const int OnvifCliDeviceLoginReq::kStrPasswdFieldNumber;
const int OnvifCliDeviceLoginReq::kStrUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifCliDeviceLoginReq::OnvifCliDeviceLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifclidevice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifCliDeviceLoginReq)
}
OnvifCliDeviceLoginReq::OnvifCliDeviceLoginReq(const OnvifCliDeviceLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strusername().size() > 0) {
    strusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strusername_);
  }
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strpasswd().size() > 0) {
    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
  strurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strurl().size() > 0) {
    strurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strurl_);
  }
  // @@protoc_insertion_point(copy_constructor:OnvifCliDeviceLoginReq)
}

void OnvifCliDeviceLoginReq::SharedCtor() {
  strusername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OnvifCliDeviceLoginReq::~OnvifCliDeviceLoginReq() {
  // @@protoc_insertion_point(destructor:OnvifCliDeviceLoginReq)
  SharedDtor();
}

void OnvifCliDeviceLoginReq::SharedDtor() {
  strusername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnvifCliDeviceLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifCliDeviceLoginReq::descriptor() {
  protobuf_onvifclidevice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclidevice_2eproto::file_level_metadata[0].descriptor;
}

const OnvifCliDeviceLoginReq& OnvifCliDeviceLoginReq::default_instance() {
  protobuf_onvifclidevice_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifCliDeviceLoginReq* OnvifCliDeviceLoginReq::New(::google::protobuf::Arena* arena) const {
  OnvifCliDeviceLoginReq* n = new OnvifCliDeviceLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifCliDeviceLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifCliDeviceLoginReq)
  strusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OnvifCliDeviceLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifCliDeviceLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strUserName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strusername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strusername().data(), this->strusername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifCliDeviceLoginReq.strUserName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strPasswd = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strpasswd().data(), this->strpasswd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifCliDeviceLoginReq.strPasswd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strUrl = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strurl().data(), this->strurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifCliDeviceLoginReq.strUrl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifCliDeviceLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifCliDeviceLoginReq)
  return false;
#undef DO_
}

void OnvifCliDeviceLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifCliDeviceLoginReq)
  // string strUserName = 1;
  if (this->strusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strusername().data(), this->strusername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliDeviceLoginReq.strUserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strusername(), output);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliDeviceLoginReq.strPasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strpasswd(), output);
  }

  // string strUrl = 3;
  if (this->strurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliDeviceLoginReq.strUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strurl(), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifCliDeviceLoginReq)
}

::google::protobuf::uint8* OnvifCliDeviceLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifCliDeviceLoginReq)
  // string strUserName = 1;
  if (this->strusername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strusername().data(), this->strusername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliDeviceLoginReq.strUserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strusername(), target);
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliDeviceLoginReq.strPasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpasswd(), target);
  }

  // string strUrl = 3;
  if (this->strurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strurl().data(), this->strurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliDeviceLoginReq.strUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strurl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifCliDeviceLoginReq)
  return target;
}

size_t OnvifCliDeviceLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifCliDeviceLoginReq)
  size_t total_size = 0;

  // string strUserName = 1;
  if (this->strusername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strusername());
  }

  // string strPasswd = 2;
  if (this->strpasswd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strpasswd());
  }

  // string strUrl = 3;
  if (this->strurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strurl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifCliDeviceLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifCliDeviceLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifCliDeviceLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifCliDeviceLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifCliDeviceLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifCliDeviceLoginReq)
    MergeFrom(*source);
  }
}

void OnvifCliDeviceLoginReq::MergeFrom(const OnvifCliDeviceLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifCliDeviceLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strusername().size() > 0) {

    strusername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strusername_);
  }
  if (from.strpasswd().size() > 0) {

    strpasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpasswd_);
  }
  if (from.strurl().size() > 0) {

    strurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strurl_);
  }
}

void OnvifCliDeviceLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifCliDeviceLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifCliDeviceLoginReq::CopyFrom(const OnvifCliDeviceLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifCliDeviceLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifCliDeviceLoginReq::IsInitialized() const {
  return true;
}

void OnvifCliDeviceLoginReq::Swap(OnvifCliDeviceLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifCliDeviceLoginReq::InternalSwap(OnvifCliDeviceLoginReq* other) {
  strusername_.Swap(&other->strusername_);
  strpasswd_.Swap(&other->strpasswd_);
  strurl_.Swap(&other->strurl_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifCliDeviceLoginReq::GetMetadata() const {
  protobuf_onvifclidevice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclidevice_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifCliDeviceLoginReq

// string strUserName = 1;
void OnvifCliDeviceLoginReq::clear_strusername() {
  strusername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifCliDeviceLoginReq::strusername() const {
  // @@protoc_insertion_point(field_get:OnvifCliDeviceLoginReq.strUserName)
  return strusername_.GetNoArena();
}
void OnvifCliDeviceLoginReq::set_strusername(const ::std::string& value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifCliDeviceLoginReq.strUserName)
}
#if LANG_CXX11
void OnvifCliDeviceLoginReq::set_strusername(::std::string&& value) {
  
  strusername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifCliDeviceLoginReq.strUserName)
}
#endif
void OnvifCliDeviceLoginReq::set_strusername(const char* value) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifCliDeviceLoginReq.strUserName)
}
void OnvifCliDeviceLoginReq::set_strusername(const char* value, size_t size) {
  
  strusername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifCliDeviceLoginReq.strUserName)
}
::std::string* OnvifCliDeviceLoginReq::mutable_strusername() {
  
  // @@protoc_insertion_point(field_mutable:OnvifCliDeviceLoginReq.strUserName)
  return strusername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifCliDeviceLoginReq::release_strusername() {
  // @@protoc_insertion_point(field_release:OnvifCliDeviceLoginReq.strUserName)
  
  return strusername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifCliDeviceLoginReq::set_allocated_strusername(::std::string* strusername) {
  if (strusername != NULL) {
    
  } else {
    
  }
  strusername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strusername);
  // @@protoc_insertion_point(field_set_allocated:OnvifCliDeviceLoginReq.strUserName)
}

// string strPasswd = 2;
void OnvifCliDeviceLoginReq::clear_strpasswd() {
  strpasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifCliDeviceLoginReq::strpasswd() const {
  // @@protoc_insertion_point(field_get:OnvifCliDeviceLoginReq.strPasswd)
  return strpasswd_.GetNoArena();
}
void OnvifCliDeviceLoginReq::set_strpasswd(const ::std::string& value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifCliDeviceLoginReq.strPasswd)
}
#if LANG_CXX11
void OnvifCliDeviceLoginReq::set_strpasswd(::std::string&& value) {
  
  strpasswd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifCliDeviceLoginReq.strPasswd)
}
#endif
void OnvifCliDeviceLoginReq::set_strpasswd(const char* value) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifCliDeviceLoginReq.strPasswd)
}
void OnvifCliDeviceLoginReq::set_strpasswd(const char* value, size_t size) {
  
  strpasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifCliDeviceLoginReq.strPasswd)
}
::std::string* OnvifCliDeviceLoginReq::mutable_strpasswd() {
  
  // @@protoc_insertion_point(field_mutable:OnvifCliDeviceLoginReq.strPasswd)
  return strpasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifCliDeviceLoginReq::release_strpasswd() {
  // @@protoc_insertion_point(field_release:OnvifCliDeviceLoginReq.strPasswd)
  
  return strpasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifCliDeviceLoginReq::set_allocated_strpasswd(::std::string* strpasswd) {
  if (strpasswd != NULL) {
    
  } else {
    
  }
  strpasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpasswd);
  // @@protoc_insertion_point(field_set_allocated:OnvifCliDeviceLoginReq.strPasswd)
}

// string strUrl = 3;
void OnvifCliDeviceLoginReq::clear_strurl() {
  strurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifCliDeviceLoginReq::strurl() const {
  // @@protoc_insertion_point(field_get:OnvifCliDeviceLoginReq.strUrl)
  return strurl_.GetNoArena();
}
void OnvifCliDeviceLoginReq::set_strurl(const ::std::string& value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifCliDeviceLoginReq.strUrl)
}
#if LANG_CXX11
void OnvifCliDeviceLoginReq::set_strurl(::std::string&& value) {
  
  strurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifCliDeviceLoginReq.strUrl)
}
#endif
void OnvifCliDeviceLoginReq::set_strurl(const char* value) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifCliDeviceLoginReq.strUrl)
}
void OnvifCliDeviceLoginReq::set_strurl(const char* value, size_t size) {
  
  strurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifCliDeviceLoginReq.strUrl)
}
::std::string* OnvifCliDeviceLoginReq::mutable_strurl() {
  
  // @@protoc_insertion_point(field_mutable:OnvifCliDeviceLoginReq.strUrl)
  return strurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifCliDeviceLoginReq::release_strurl() {
  // @@protoc_insertion_point(field_release:OnvifCliDeviceLoginReq.strUrl)
  
  return strurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifCliDeviceLoginReq::set_allocated_strurl(::std::string* strurl) {
  if (strurl != NULL) {
    
  } else {
    
  }
  strurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strurl);
  // @@protoc_insertion_point(field_set_allocated:OnvifCliDeviceLoginReq.strUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifCliDeviceLoginResp::kStrHandleFieldNumber;
const int OnvifCliDeviceLoginResp::kBLoginedFieldNumber;
const int OnvifCliDeviceLoginResp::kBHasPTZFieldNumber;
const int OnvifCliDeviceLoginResp::kBHasEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifCliDeviceLoginResp::OnvifCliDeviceLoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifclidevice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifCliDeviceLoginResp)
}
OnvifCliDeviceLoginResp::OnvifCliDeviceLoginResp(const OnvifCliDeviceLoginResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strhandle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strhandle().size() > 0) {
    strhandle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strhandle_);
  }
  ::memcpy(&blogined_, &from.blogined_,
    reinterpret_cast<char*>(&bhasevent_) -
    reinterpret_cast<char*>(&blogined_) + sizeof(bhasevent_));
  // @@protoc_insertion_point(copy_constructor:OnvifCliDeviceLoginResp)
}

void OnvifCliDeviceLoginResp::SharedCtor() {
  strhandle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blogined_, 0, reinterpret_cast<char*>(&bhasevent_) -
    reinterpret_cast<char*>(&blogined_) + sizeof(bhasevent_));
  _cached_size_ = 0;
}

OnvifCliDeviceLoginResp::~OnvifCliDeviceLoginResp() {
  // @@protoc_insertion_point(destructor:OnvifCliDeviceLoginResp)
  SharedDtor();
}

void OnvifCliDeviceLoginResp::SharedDtor() {
  strhandle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnvifCliDeviceLoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifCliDeviceLoginResp::descriptor() {
  protobuf_onvifclidevice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclidevice_2eproto::file_level_metadata[1].descriptor;
}

const OnvifCliDeviceLoginResp& OnvifCliDeviceLoginResp::default_instance() {
  protobuf_onvifclidevice_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifCliDeviceLoginResp* OnvifCliDeviceLoginResp::New(::google::protobuf::Arena* arena) const {
  OnvifCliDeviceLoginResp* n = new OnvifCliDeviceLoginResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifCliDeviceLoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifCliDeviceLoginResp)
  strhandle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blogined_, 0, reinterpret_cast<char*>(&bhasevent_) -
    reinterpret_cast<char*>(&blogined_) + sizeof(bhasevent_));
}

bool OnvifCliDeviceLoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifCliDeviceLoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strHandle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strhandle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strhandle().data(), this->strhandle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifCliDeviceLoginResp.strHandle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bLogined = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blogined_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHasPTZ = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhasptz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bHasEvent = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bhasevent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifCliDeviceLoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifCliDeviceLoginResp)
  return false;
#undef DO_
}

void OnvifCliDeviceLoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifCliDeviceLoginResp)
  // string strHandle = 1;
  if (this->strhandle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strhandle().data(), this->strhandle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliDeviceLoginResp.strHandle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strhandle(), output);
  }

  // bool bLogined = 2;
  if (this->blogined() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->blogined(), output);
  }

  // bool bHasPTZ = 3;
  if (this->bhasptz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bhasptz(), output);
  }

  // bool bHasEvent = 4;
  if (this->bhasevent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bhasevent(), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifCliDeviceLoginResp)
}

::google::protobuf::uint8* OnvifCliDeviceLoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifCliDeviceLoginResp)
  // string strHandle = 1;
  if (this->strhandle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strhandle().data(), this->strhandle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliDeviceLoginResp.strHandle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strhandle(), target);
  }

  // bool bLogined = 2;
  if (this->blogined() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->blogined(), target);
  }

  // bool bHasPTZ = 3;
  if (this->bhasptz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bhasptz(), target);
  }

  // bool bHasEvent = 4;
  if (this->bhasevent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bhasevent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifCliDeviceLoginResp)
  return target;
}

size_t OnvifCliDeviceLoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifCliDeviceLoginResp)
  size_t total_size = 0;

  // string strHandle = 1;
  if (this->strhandle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strhandle());
  }

  // bool bLogined = 2;
  if (this->blogined() != 0) {
    total_size += 1 + 1;
  }

  // bool bHasPTZ = 3;
  if (this->bhasptz() != 0) {
    total_size += 1 + 1;
  }

  // bool bHasEvent = 4;
  if (this->bhasevent() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifCliDeviceLoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifCliDeviceLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifCliDeviceLoginResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifCliDeviceLoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifCliDeviceLoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifCliDeviceLoginResp)
    MergeFrom(*source);
  }
}

void OnvifCliDeviceLoginResp::MergeFrom(const OnvifCliDeviceLoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifCliDeviceLoginResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strhandle().size() > 0) {

    strhandle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strhandle_);
  }
  if (from.blogined() != 0) {
    set_blogined(from.blogined());
  }
  if (from.bhasptz() != 0) {
    set_bhasptz(from.bhasptz());
  }
  if (from.bhasevent() != 0) {
    set_bhasevent(from.bhasevent());
  }
}

void OnvifCliDeviceLoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifCliDeviceLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifCliDeviceLoginResp::CopyFrom(const OnvifCliDeviceLoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifCliDeviceLoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifCliDeviceLoginResp::IsInitialized() const {
  return true;
}

void OnvifCliDeviceLoginResp::Swap(OnvifCliDeviceLoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifCliDeviceLoginResp::InternalSwap(OnvifCliDeviceLoginResp* other) {
  strhandle_.Swap(&other->strhandle_);
  std::swap(blogined_, other->blogined_);
  std::swap(bhasptz_, other->bhasptz_);
  std::swap(bhasevent_, other->bhasevent_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifCliDeviceLoginResp::GetMetadata() const {
  protobuf_onvifclidevice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclidevice_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifCliDeviceLoginResp

// string strHandle = 1;
void OnvifCliDeviceLoginResp::clear_strhandle() {
  strhandle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifCliDeviceLoginResp::strhandle() const {
  // @@protoc_insertion_point(field_get:OnvifCliDeviceLoginResp.strHandle)
  return strhandle_.GetNoArena();
}
void OnvifCliDeviceLoginResp::set_strhandle(const ::std::string& value) {
  
  strhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifCliDeviceLoginResp.strHandle)
}
#if LANG_CXX11
void OnvifCliDeviceLoginResp::set_strhandle(::std::string&& value) {
  
  strhandle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifCliDeviceLoginResp.strHandle)
}
#endif
void OnvifCliDeviceLoginResp::set_strhandle(const char* value) {
  
  strhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifCliDeviceLoginResp.strHandle)
}
void OnvifCliDeviceLoginResp::set_strhandle(const char* value, size_t size) {
  
  strhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifCliDeviceLoginResp.strHandle)
}
::std::string* OnvifCliDeviceLoginResp::mutable_strhandle() {
  
  // @@protoc_insertion_point(field_mutable:OnvifCliDeviceLoginResp.strHandle)
  return strhandle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifCliDeviceLoginResp::release_strhandle() {
  // @@protoc_insertion_point(field_release:OnvifCliDeviceLoginResp.strHandle)
  
  return strhandle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifCliDeviceLoginResp::set_allocated_strhandle(::std::string* strhandle) {
  if (strhandle != NULL) {
    
  } else {
    
  }
  strhandle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strhandle);
  // @@protoc_insertion_point(field_set_allocated:OnvifCliDeviceLoginResp.strHandle)
}

// bool bLogined = 2;
void OnvifCliDeviceLoginResp::clear_blogined() {
  blogined_ = false;
}
bool OnvifCliDeviceLoginResp::blogined() const {
  // @@protoc_insertion_point(field_get:OnvifCliDeviceLoginResp.bLogined)
  return blogined_;
}
void OnvifCliDeviceLoginResp::set_blogined(bool value) {
  
  blogined_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliDeviceLoginResp.bLogined)
}

// bool bHasPTZ = 3;
void OnvifCliDeviceLoginResp::clear_bhasptz() {
  bhasptz_ = false;
}
bool OnvifCliDeviceLoginResp::bhasptz() const {
  // @@protoc_insertion_point(field_get:OnvifCliDeviceLoginResp.bHasPTZ)
  return bhasptz_;
}
void OnvifCliDeviceLoginResp::set_bhasptz(bool value) {
  
  bhasptz_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliDeviceLoginResp.bHasPTZ)
}

// bool bHasEvent = 4;
void OnvifCliDeviceLoginResp::clear_bhasevent() {
  bhasevent_ = false;
}
bool OnvifCliDeviceLoginResp::bhasevent() const {
  // @@protoc_insertion_point(field_get:OnvifCliDeviceLoginResp.bHasEvent)
  return bhasevent_;
}
void OnvifCliDeviceLoginResp::set_bhasevent(bool value) {
  
  bhasevent_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliDeviceLoginResp.bHasEvent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
