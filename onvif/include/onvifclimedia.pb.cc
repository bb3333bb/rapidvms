// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onvifclimedia.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "onvifclimedia.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class OnvifCliProfileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifCliProfile> {
} _OnvifCliProfile_default_instance_;
class OnvifCliMediaGetProfilesReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifCliMediaGetProfilesReq> {
} _OnvifCliMediaGetProfilesReq_default_instance_;
class OnvifCliMediaGetProfilesRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifCliMediaGetProfilesResp> {
} _OnvifCliMediaGetProfilesResp_default_instance_;

namespace protobuf_onvifclimedia_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliProfile, strtoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliProfile, strcodecname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliProfile, strrtspurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliProfile, nwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliProfile, nheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliProfile, nfps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliProfile, nbandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliProfile, bgoturl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliMediaGetProfilesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliMediaGetProfilesReq, strstrhandle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliMediaGetProfilesResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliMediaGetProfilesResp, bgotprofiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliMediaGetProfilesResp, cprofiles_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(OnvifCliProfile)},
  { 12, -1, sizeof(OnvifCliMediaGetProfilesReq)},
  { 17, -1, sizeof(OnvifCliMediaGetProfilesResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifCliProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifCliMediaGetProfilesReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifCliMediaGetProfilesResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "onvifclimedia.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _OnvifCliProfile_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _OnvifCliMediaGetProfilesReq_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _OnvifCliMediaGetProfilesResp_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _OnvifCliProfile_default_instance_.DefaultConstruct();
  _OnvifCliMediaGetProfilesReq_default_instance_.DefaultConstruct();
  _OnvifCliMediaGetProfilesResp_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023onvifclimedia.proto\"\241\001\n\017OnvifCliProfil"
      "e\022\020\n\010strToken\030\001 \001(\t\022\024\n\014strCodecName\030\002 \001("
      "\t\022\022\n\nstrRTSPUrl\030\003 \001(\t\022\016\n\006nWidth\030\004 \001(\005\022\017\n"
      "\007nHeight\030\005 \001(\005\022\014\n\004nFps\030\006 \001(\005\022\022\n\nnBandWid"
      "th\030\007 \001(\005\022\017\n\007bGotUrl\030\010 \001(\010\"3\n\033OnvifCliMed"
      "iaGetProfilesReq\022\024\n\014strstrHandle\030\001 \001(\t\"Y"
      "\n\034OnvifCliMediaGetProfilesResp\022\024\n\014bGotPr"
      "ofiles\030\001 \001(\010\022#\n\tcProfiles\030\002 \003(\0132\020.OnvifC"
      "liProfileb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 337);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "onvifclimedia.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_onvifclimedia_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifCliProfile::kStrTokenFieldNumber;
const int OnvifCliProfile::kStrCodecNameFieldNumber;
const int OnvifCliProfile::kStrRTSPUrlFieldNumber;
const int OnvifCliProfile::kNWidthFieldNumber;
const int OnvifCliProfile::kNHeightFieldNumber;
const int OnvifCliProfile::kNFpsFieldNumber;
const int OnvifCliProfile::kNBandWidthFieldNumber;
const int OnvifCliProfile::kBGotUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifCliProfile::OnvifCliProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifclimedia_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifCliProfile)
}
OnvifCliProfile::OnvifCliProfile(const OnvifCliProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strtoken().size() > 0) {
    strtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtoken_);
  }
  strcodecname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strcodecname().size() > 0) {
    strcodecname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strcodecname_);
  }
  strrtspurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strrtspurl().size() > 0) {
    strrtspurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strrtspurl_);
  }
  ::memcpy(&nwidth_, &from.nwidth_,
    reinterpret_cast<char*>(&bgoturl_) -
    reinterpret_cast<char*>(&nwidth_) + sizeof(bgoturl_));
  // @@protoc_insertion_point(copy_constructor:OnvifCliProfile)
}

void OnvifCliProfile::SharedCtor() {
  strtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcodecname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strrtspurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nwidth_, 0, reinterpret_cast<char*>(&bgoturl_) -
    reinterpret_cast<char*>(&nwidth_) + sizeof(bgoturl_));
  _cached_size_ = 0;
}

OnvifCliProfile::~OnvifCliProfile() {
  // @@protoc_insertion_point(destructor:OnvifCliProfile)
  SharedDtor();
}

void OnvifCliProfile::SharedDtor() {
  strtoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcodecname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strrtspurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnvifCliProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifCliProfile::descriptor() {
  protobuf_onvifclimedia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclimedia_2eproto::file_level_metadata[0].descriptor;
}

const OnvifCliProfile& OnvifCliProfile::default_instance() {
  protobuf_onvifclimedia_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifCliProfile* OnvifCliProfile::New(::google::protobuf::Arena* arena) const {
  OnvifCliProfile* n = new OnvifCliProfile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifCliProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifCliProfile)
  strtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcodecname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strrtspurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nwidth_, 0, reinterpret_cast<char*>(&bgoturl_) -
    reinterpret_cast<char*>(&nwidth_) + sizeof(bgoturl_));
}

bool OnvifCliProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifCliProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strToken = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strtoken().data(), this->strtoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifCliProfile.strToken"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strCodecName = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcodecname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strcodecname().data(), this->strcodecname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifCliProfile.strCodecName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strRTSPUrl = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrtspurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strrtspurl().data(), this->strrtspurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifCliProfile.strRTSPUrl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nWidth = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nHeight = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nFps = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nBandWidth = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bGotUrl = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgoturl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifCliProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifCliProfile)
  return false;
#undef DO_
}

void OnvifCliProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifCliProfile)
  // string strToken = 1;
  if (this->strtoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtoken().data(), this->strtoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliProfile.strToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strtoken(), output);
  }

  // string strCodecName = 2;
  if (this->strcodecname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strcodecname().data(), this->strcodecname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliProfile.strCodecName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strcodecname(), output);
  }

  // string strRTSPUrl = 3;
  if (this->strrtspurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strrtspurl().data(), this->strrtspurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliProfile.strRTSPUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strrtspurl(), output);
  }

  // int32 nWidth = 4;
  if (this->nwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nwidth(), output);
  }

  // int32 nHeight = 5;
  if (this->nheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nheight(), output);
  }

  // int32 nFps = 6;
  if (this->nfps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nfps(), output);
  }

  // int32 nBandWidth = 7;
  if (this->nbandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nbandwidth(), output);
  }

  // bool bGotUrl = 8;
  if (this->bgoturl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bgoturl(), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifCliProfile)
}

::google::protobuf::uint8* OnvifCliProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifCliProfile)
  // string strToken = 1;
  if (this->strtoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtoken().data(), this->strtoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliProfile.strToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strtoken(), target);
  }

  // string strCodecName = 2;
  if (this->strcodecname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strcodecname().data(), this->strcodecname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliProfile.strCodecName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strcodecname(), target);
  }

  // string strRTSPUrl = 3;
  if (this->strrtspurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strrtspurl().data(), this->strrtspurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliProfile.strRTSPUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strrtspurl(), target);
  }

  // int32 nWidth = 4;
  if (this->nwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nwidth(), target);
  }

  // int32 nHeight = 5;
  if (this->nheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nheight(), target);
  }

  // int32 nFps = 6;
  if (this->nfps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nfps(), target);
  }

  // int32 nBandWidth = 7;
  if (this->nbandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nbandwidth(), target);
  }

  // bool bGotUrl = 8;
  if (this->bgoturl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bgoturl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifCliProfile)
  return target;
}

size_t OnvifCliProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifCliProfile)
  size_t total_size = 0;

  // string strToken = 1;
  if (this->strtoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strtoken());
  }

  // string strCodecName = 2;
  if (this->strcodecname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strcodecname());
  }

  // string strRTSPUrl = 3;
  if (this->strrtspurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strrtspurl());
  }

  // int32 nWidth = 4;
  if (this->nwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nwidth());
  }

  // int32 nHeight = 5;
  if (this->nheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nheight());
  }

  // int32 nFps = 6;
  if (this->nfps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nfps());
  }

  // int32 nBandWidth = 7;
  if (this->nbandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nbandwidth());
  }

  // bool bGotUrl = 8;
  if (this->bgoturl() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifCliProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifCliProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifCliProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifCliProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifCliProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifCliProfile)
    MergeFrom(*source);
  }
}

void OnvifCliProfile::MergeFrom(const OnvifCliProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifCliProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strtoken().size() > 0) {

    strtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtoken_);
  }
  if (from.strcodecname().size() > 0) {

    strcodecname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strcodecname_);
  }
  if (from.strrtspurl().size() > 0) {

    strrtspurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strrtspurl_);
  }
  if (from.nwidth() != 0) {
    set_nwidth(from.nwidth());
  }
  if (from.nheight() != 0) {
    set_nheight(from.nheight());
  }
  if (from.nfps() != 0) {
    set_nfps(from.nfps());
  }
  if (from.nbandwidth() != 0) {
    set_nbandwidth(from.nbandwidth());
  }
  if (from.bgoturl() != 0) {
    set_bgoturl(from.bgoturl());
  }
}

void OnvifCliProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifCliProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifCliProfile::CopyFrom(const OnvifCliProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifCliProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifCliProfile::IsInitialized() const {
  return true;
}

void OnvifCliProfile::Swap(OnvifCliProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifCliProfile::InternalSwap(OnvifCliProfile* other) {
  strtoken_.Swap(&other->strtoken_);
  strcodecname_.Swap(&other->strcodecname_);
  strrtspurl_.Swap(&other->strrtspurl_);
  std::swap(nwidth_, other->nwidth_);
  std::swap(nheight_, other->nheight_);
  std::swap(nfps_, other->nfps_);
  std::swap(nbandwidth_, other->nbandwidth_);
  std::swap(bgoturl_, other->bgoturl_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifCliProfile::GetMetadata() const {
  protobuf_onvifclimedia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclimedia_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifCliProfile

// string strToken = 1;
void OnvifCliProfile::clear_strtoken() {
  strtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifCliProfile::strtoken() const {
  // @@protoc_insertion_point(field_get:OnvifCliProfile.strToken)
  return strtoken_.GetNoArena();
}
void OnvifCliProfile::set_strtoken(const ::std::string& value) {
  
  strtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifCliProfile.strToken)
}
#if LANG_CXX11
void OnvifCliProfile::set_strtoken(::std::string&& value) {
  
  strtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifCliProfile.strToken)
}
#endif
void OnvifCliProfile::set_strtoken(const char* value) {
  
  strtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifCliProfile.strToken)
}
void OnvifCliProfile::set_strtoken(const char* value, size_t size) {
  
  strtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifCliProfile.strToken)
}
::std::string* OnvifCliProfile::mutable_strtoken() {
  
  // @@protoc_insertion_point(field_mutable:OnvifCliProfile.strToken)
  return strtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifCliProfile::release_strtoken() {
  // @@protoc_insertion_point(field_release:OnvifCliProfile.strToken)
  
  return strtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifCliProfile::set_allocated_strtoken(::std::string* strtoken) {
  if (strtoken != NULL) {
    
  } else {
    
  }
  strtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtoken);
  // @@protoc_insertion_point(field_set_allocated:OnvifCliProfile.strToken)
}

// string strCodecName = 2;
void OnvifCliProfile::clear_strcodecname() {
  strcodecname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifCliProfile::strcodecname() const {
  // @@protoc_insertion_point(field_get:OnvifCliProfile.strCodecName)
  return strcodecname_.GetNoArena();
}
void OnvifCliProfile::set_strcodecname(const ::std::string& value) {
  
  strcodecname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifCliProfile.strCodecName)
}
#if LANG_CXX11
void OnvifCliProfile::set_strcodecname(::std::string&& value) {
  
  strcodecname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifCliProfile.strCodecName)
}
#endif
void OnvifCliProfile::set_strcodecname(const char* value) {
  
  strcodecname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifCliProfile.strCodecName)
}
void OnvifCliProfile::set_strcodecname(const char* value, size_t size) {
  
  strcodecname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifCliProfile.strCodecName)
}
::std::string* OnvifCliProfile::mutable_strcodecname() {
  
  // @@protoc_insertion_point(field_mutable:OnvifCliProfile.strCodecName)
  return strcodecname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifCliProfile::release_strcodecname() {
  // @@protoc_insertion_point(field_release:OnvifCliProfile.strCodecName)
  
  return strcodecname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifCliProfile::set_allocated_strcodecname(::std::string* strcodecname) {
  if (strcodecname != NULL) {
    
  } else {
    
  }
  strcodecname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcodecname);
  // @@protoc_insertion_point(field_set_allocated:OnvifCliProfile.strCodecName)
}

// string strRTSPUrl = 3;
void OnvifCliProfile::clear_strrtspurl() {
  strrtspurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifCliProfile::strrtspurl() const {
  // @@protoc_insertion_point(field_get:OnvifCliProfile.strRTSPUrl)
  return strrtspurl_.GetNoArena();
}
void OnvifCliProfile::set_strrtspurl(const ::std::string& value) {
  
  strrtspurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifCliProfile.strRTSPUrl)
}
#if LANG_CXX11
void OnvifCliProfile::set_strrtspurl(::std::string&& value) {
  
  strrtspurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifCliProfile.strRTSPUrl)
}
#endif
void OnvifCliProfile::set_strrtspurl(const char* value) {
  
  strrtspurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifCliProfile.strRTSPUrl)
}
void OnvifCliProfile::set_strrtspurl(const char* value, size_t size) {
  
  strrtspurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifCliProfile.strRTSPUrl)
}
::std::string* OnvifCliProfile::mutable_strrtspurl() {
  
  // @@protoc_insertion_point(field_mutable:OnvifCliProfile.strRTSPUrl)
  return strrtspurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifCliProfile::release_strrtspurl() {
  // @@protoc_insertion_point(field_release:OnvifCliProfile.strRTSPUrl)
  
  return strrtspurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifCliProfile::set_allocated_strrtspurl(::std::string* strrtspurl) {
  if (strrtspurl != NULL) {
    
  } else {
    
  }
  strrtspurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strrtspurl);
  // @@protoc_insertion_point(field_set_allocated:OnvifCliProfile.strRTSPUrl)
}

// int32 nWidth = 4;
void OnvifCliProfile::clear_nwidth() {
  nwidth_ = 0;
}
::google::protobuf::int32 OnvifCliProfile::nwidth() const {
  // @@protoc_insertion_point(field_get:OnvifCliProfile.nWidth)
  return nwidth_;
}
void OnvifCliProfile::set_nwidth(::google::protobuf::int32 value) {
  
  nwidth_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliProfile.nWidth)
}

// int32 nHeight = 5;
void OnvifCliProfile::clear_nheight() {
  nheight_ = 0;
}
::google::protobuf::int32 OnvifCliProfile::nheight() const {
  // @@protoc_insertion_point(field_get:OnvifCliProfile.nHeight)
  return nheight_;
}
void OnvifCliProfile::set_nheight(::google::protobuf::int32 value) {
  
  nheight_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliProfile.nHeight)
}

// int32 nFps = 6;
void OnvifCliProfile::clear_nfps() {
  nfps_ = 0;
}
::google::protobuf::int32 OnvifCliProfile::nfps() const {
  // @@protoc_insertion_point(field_get:OnvifCliProfile.nFps)
  return nfps_;
}
void OnvifCliProfile::set_nfps(::google::protobuf::int32 value) {
  
  nfps_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliProfile.nFps)
}

// int32 nBandWidth = 7;
void OnvifCliProfile::clear_nbandwidth() {
  nbandwidth_ = 0;
}
::google::protobuf::int32 OnvifCliProfile::nbandwidth() const {
  // @@protoc_insertion_point(field_get:OnvifCliProfile.nBandWidth)
  return nbandwidth_;
}
void OnvifCliProfile::set_nbandwidth(::google::protobuf::int32 value) {
  
  nbandwidth_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliProfile.nBandWidth)
}

// bool bGotUrl = 8;
void OnvifCliProfile::clear_bgoturl() {
  bgoturl_ = false;
}
bool OnvifCliProfile::bgoturl() const {
  // @@protoc_insertion_point(field_get:OnvifCliProfile.bGotUrl)
  return bgoturl_;
}
void OnvifCliProfile::set_bgoturl(bool value) {
  
  bgoturl_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliProfile.bGotUrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifCliMediaGetProfilesReq::kStrstrHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifCliMediaGetProfilesReq::OnvifCliMediaGetProfilesReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifclimedia_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifCliMediaGetProfilesReq)
}
OnvifCliMediaGetProfilesReq::OnvifCliMediaGetProfilesReq(const OnvifCliMediaGetProfilesReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strstrhandle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strstrhandle().size() > 0) {
    strstrhandle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strstrhandle_);
  }
  // @@protoc_insertion_point(copy_constructor:OnvifCliMediaGetProfilesReq)
}

void OnvifCliMediaGetProfilesReq::SharedCtor() {
  strstrhandle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OnvifCliMediaGetProfilesReq::~OnvifCliMediaGetProfilesReq() {
  // @@protoc_insertion_point(destructor:OnvifCliMediaGetProfilesReq)
  SharedDtor();
}

void OnvifCliMediaGetProfilesReq::SharedDtor() {
  strstrhandle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnvifCliMediaGetProfilesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifCliMediaGetProfilesReq::descriptor() {
  protobuf_onvifclimedia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclimedia_2eproto::file_level_metadata[1].descriptor;
}

const OnvifCliMediaGetProfilesReq& OnvifCliMediaGetProfilesReq::default_instance() {
  protobuf_onvifclimedia_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifCliMediaGetProfilesReq* OnvifCliMediaGetProfilesReq::New(::google::protobuf::Arena* arena) const {
  OnvifCliMediaGetProfilesReq* n = new OnvifCliMediaGetProfilesReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifCliMediaGetProfilesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifCliMediaGetProfilesReq)
  strstrhandle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OnvifCliMediaGetProfilesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifCliMediaGetProfilesReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strstrHandle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strstrhandle()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strstrhandle().data(), this->strstrhandle().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifCliMediaGetProfilesReq.strstrHandle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifCliMediaGetProfilesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifCliMediaGetProfilesReq)
  return false;
#undef DO_
}

void OnvifCliMediaGetProfilesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifCliMediaGetProfilesReq)
  // string strstrHandle = 1;
  if (this->strstrhandle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strstrhandle().data(), this->strstrhandle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliMediaGetProfilesReq.strstrHandle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strstrhandle(), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifCliMediaGetProfilesReq)
}

::google::protobuf::uint8* OnvifCliMediaGetProfilesReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifCliMediaGetProfilesReq)
  // string strstrHandle = 1;
  if (this->strstrhandle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strstrhandle().data(), this->strstrhandle().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliMediaGetProfilesReq.strstrHandle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strstrhandle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifCliMediaGetProfilesReq)
  return target;
}

size_t OnvifCliMediaGetProfilesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifCliMediaGetProfilesReq)
  size_t total_size = 0;

  // string strstrHandle = 1;
  if (this->strstrhandle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strstrhandle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifCliMediaGetProfilesReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifCliMediaGetProfilesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifCliMediaGetProfilesReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifCliMediaGetProfilesReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifCliMediaGetProfilesReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifCliMediaGetProfilesReq)
    MergeFrom(*source);
  }
}

void OnvifCliMediaGetProfilesReq::MergeFrom(const OnvifCliMediaGetProfilesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifCliMediaGetProfilesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strstrhandle().size() > 0) {

    strstrhandle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strstrhandle_);
  }
}

void OnvifCliMediaGetProfilesReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifCliMediaGetProfilesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifCliMediaGetProfilesReq::CopyFrom(const OnvifCliMediaGetProfilesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifCliMediaGetProfilesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifCliMediaGetProfilesReq::IsInitialized() const {
  return true;
}

void OnvifCliMediaGetProfilesReq::Swap(OnvifCliMediaGetProfilesReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifCliMediaGetProfilesReq::InternalSwap(OnvifCliMediaGetProfilesReq* other) {
  strstrhandle_.Swap(&other->strstrhandle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifCliMediaGetProfilesReq::GetMetadata() const {
  protobuf_onvifclimedia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclimedia_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifCliMediaGetProfilesReq

// string strstrHandle = 1;
void OnvifCliMediaGetProfilesReq::clear_strstrhandle() {
  strstrhandle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifCliMediaGetProfilesReq::strstrhandle() const {
  // @@protoc_insertion_point(field_get:OnvifCliMediaGetProfilesReq.strstrHandle)
  return strstrhandle_.GetNoArena();
}
void OnvifCliMediaGetProfilesReq::set_strstrhandle(const ::std::string& value) {
  
  strstrhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifCliMediaGetProfilesReq.strstrHandle)
}
#if LANG_CXX11
void OnvifCliMediaGetProfilesReq::set_strstrhandle(::std::string&& value) {
  
  strstrhandle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifCliMediaGetProfilesReq.strstrHandle)
}
#endif
void OnvifCliMediaGetProfilesReq::set_strstrhandle(const char* value) {
  
  strstrhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifCliMediaGetProfilesReq.strstrHandle)
}
void OnvifCliMediaGetProfilesReq::set_strstrhandle(const char* value, size_t size) {
  
  strstrhandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifCliMediaGetProfilesReq.strstrHandle)
}
::std::string* OnvifCliMediaGetProfilesReq::mutable_strstrhandle() {
  
  // @@protoc_insertion_point(field_mutable:OnvifCliMediaGetProfilesReq.strstrHandle)
  return strstrhandle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifCliMediaGetProfilesReq::release_strstrhandle() {
  // @@protoc_insertion_point(field_release:OnvifCliMediaGetProfilesReq.strstrHandle)
  
  return strstrhandle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifCliMediaGetProfilesReq::set_allocated_strstrhandle(::std::string* strstrhandle) {
  if (strstrhandle != NULL) {
    
  } else {
    
  }
  strstrhandle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strstrhandle);
  // @@protoc_insertion_point(field_set_allocated:OnvifCliMediaGetProfilesReq.strstrHandle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifCliMediaGetProfilesResp::kBGotProfilesFieldNumber;
const int OnvifCliMediaGetProfilesResp::kCProfilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifCliMediaGetProfilesResp::OnvifCliMediaGetProfilesResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifclimedia_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifCliMediaGetProfilesResp)
}
OnvifCliMediaGetProfilesResp::OnvifCliMediaGetProfilesResp(const OnvifCliMediaGetProfilesResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cprofiles_(from.cprofiles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bgotprofiles_ = from.bgotprofiles_;
  // @@protoc_insertion_point(copy_constructor:OnvifCliMediaGetProfilesResp)
}

void OnvifCliMediaGetProfilesResp::SharedCtor() {
  bgotprofiles_ = false;
  _cached_size_ = 0;
}

OnvifCliMediaGetProfilesResp::~OnvifCliMediaGetProfilesResp() {
  // @@protoc_insertion_point(destructor:OnvifCliMediaGetProfilesResp)
  SharedDtor();
}

void OnvifCliMediaGetProfilesResp::SharedDtor() {
}

void OnvifCliMediaGetProfilesResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifCliMediaGetProfilesResp::descriptor() {
  protobuf_onvifclimedia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclimedia_2eproto::file_level_metadata[2].descriptor;
}

const OnvifCliMediaGetProfilesResp& OnvifCliMediaGetProfilesResp::default_instance() {
  protobuf_onvifclimedia_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifCliMediaGetProfilesResp* OnvifCliMediaGetProfilesResp::New(::google::protobuf::Arena* arena) const {
  OnvifCliMediaGetProfilesResp* n = new OnvifCliMediaGetProfilesResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifCliMediaGetProfilesResp::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifCliMediaGetProfilesResp)
  cprofiles_.Clear();
  bgotprofiles_ = false;
}

bool OnvifCliMediaGetProfilesResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifCliMediaGetProfilesResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool bGotProfiles = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgotprofiles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OnvifCliProfile cProfiles = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cprofiles()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifCliMediaGetProfilesResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifCliMediaGetProfilesResp)
  return false;
#undef DO_
}

void OnvifCliMediaGetProfilesResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifCliMediaGetProfilesResp)
  // bool bGotProfiles = 1;
  if (this->bgotprofiles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bgotprofiles(), output);
  }

  // repeated .OnvifCliProfile cProfiles = 2;
  for (unsigned int i = 0, n = this->cprofiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cprofiles(i), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifCliMediaGetProfilesResp)
}

::google::protobuf::uint8* OnvifCliMediaGetProfilesResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifCliMediaGetProfilesResp)
  // bool bGotProfiles = 1;
  if (this->bgotprofiles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bgotprofiles(), target);
  }

  // repeated .OnvifCliProfile cProfiles = 2;
  for (unsigned int i = 0, n = this->cprofiles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->cprofiles(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifCliMediaGetProfilesResp)
  return target;
}

size_t OnvifCliMediaGetProfilesResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifCliMediaGetProfilesResp)
  size_t total_size = 0;

  // repeated .OnvifCliProfile cProfiles = 2;
  {
    unsigned int count = this->cprofiles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cprofiles(i));
    }
  }

  // bool bGotProfiles = 1;
  if (this->bgotprofiles() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifCliMediaGetProfilesResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifCliMediaGetProfilesResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifCliMediaGetProfilesResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifCliMediaGetProfilesResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifCliMediaGetProfilesResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifCliMediaGetProfilesResp)
    MergeFrom(*source);
  }
}

void OnvifCliMediaGetProfilesResp::MergeFrom(const OnvifCliMediaGetProfilesResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifCliMediaGetProfilesResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cprofiles_.MergeFrom(from.cprofiles_);
  if (from.bgotprofiles() != 0) {
    set_bgotprofiles(from.bgotprofiles());
  }
}

void OnvifCliMediaGetProfilesResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifCliMediaGetProfilesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifCliMediaGetProfilesResp::CopyFrom(const OnvifCliMediaGetProfilesResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifCliMediaGetProfilesResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifCliMediaGetProfilesResp::IsInitialized() const {
  return true;
}

void OnvifCliMediaGetProfilesResp::Swap(OnvifCliMediaGetProfilesResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifCliMediaGetProfilesResp::InternalSwap(OnvifCliMediaGetProfilesResp* other) {
  cprofiles_.UnsafeArenaSwap(&other->cprofiles_);
  std::swap(bgotprofiles_, other->bgotprofiles_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifCliMediaGetProfilesResp::GetMetadata() const {
  protobuf_onvifclimedia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifclimedia_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifCliMediaGetProfilesResp

// bool bGotProfiles = 1;
void OnvifCliMediaGetProfilesResp::clear_bgotprofiles() {
  bgotprofiles_ = false;
}
bool OnvifCliMediaGetProfilesResp::bgotprofiles() const {
  // @@protoc_insertion_point(field_get:OnvifCliMediaGetProfilesResp.bGotProfiles)
  return bgotprofiles_;
}
void OnvifCliMediaGetProfilesResp::set_bgotprofiles(bool value) {
  
  bgotprofiles_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliMediaGetProfilesResp.bGotProfiles)
}

// repeated .OnvifCliProfile cProfiles = 2;
int OnvifCliMediaGetProfilesResp::cprofiles_size() const {
  return cprofiles_.size();
}
void OnvifCliMediaGetProfilesResp::clear_cprofiles() {
  cprofiles_.Clear();
}
const ::OnvifCliProfile& OnvifCliMediaGetProfilesResp::cprofiles(int index) const {
  // @@protoc_insertion_point(field_get:OnvifCliMediaGetProfilesResp.cProfiles)
  return cprofiles_.Get(index);
}
::OnvifCliProfile* OnvifCliMediaGetProfilesResp::mutable_cprofiles(int index) {
  // @@protoc_insertion_point(field_mutable:OnvifCliMediaGetProfilesResp.cProfiles)
  return cprofiles_.Mutable(index);
}
::OnvifCliProfile* OnvifCliMediaGetProfilesResp::add_cprofiles() {
  // @@protoc_insertion_point(field_add:OnvifCliMediaGetProfilesResp.cProfiles)
  return cprofiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::OnvifCliProfile >*
OnvifCliMediaGetProfilesResp::mutable_cprofiles() {
  // @@protoc_insertion_point(field_mutable_list:OnvifCliMediaGetProfilesResp.cProfiles)
  return &cprofiles_;
}
const ::google::protobuf::RepeatedPtrField< ::OnvifCliProfile >&
OnvifCliMediaGetProfilesResp::cprofiles() const {
  // @@protoc_insertion_point(field_list:OnvifCliMediaGetProfilesResp.cProfiles)
  return cprofiles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
