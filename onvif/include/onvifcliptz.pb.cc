// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onvifcliptz.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "onvifcliptz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class OnvifCliPTZReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifCliPTZReq> {
} _OnvifCliPTZReq_default_instance_;
class OnvifCliPTZRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OnvifCliPTZResp> {
} _OnvifCliPTZResp_default_instance_;

namespace protobuf_onvifcliptz_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliPTZReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliPTZReq, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliPTZReq, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliPTZReq, speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliPTZResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnvifCliPTZResp, bret_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(OnvifCliPTZReq)},
  { 7, -1, sizeof(OnvifCliPTZResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifCliPTZReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OnvifCliPTZResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "onvifcliptz.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _OnvifCliPTZReq_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _OnvifCliPTZResp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _OnvifCliPTZReq_default_instance_.DefaultConstruct();
  _OnvifCliPTZResp_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021onvifcliptz.proto\"P\n\016OnvifCliPTZReq\022\r\n"
      "\005token\030\001 \001(\t\022 \n\003cmd\030\002 \001(\0162\023.OnvifCliPTZC"
      "mdType\022\r\n\005speed\030\003 \001(\002\"\037\n\017OnvifCliPTZResp"
      "\022\014\n\004bRet\030\001 \001(\010*\230\001\n\022OnvifCliPTZCmdType\022\016\n"
      "\nCLI_PTZ_UP\020\000\022\020\n\014CLI_PTZ_DOWN\020\001\022\020\n\014CLI_P"
      "TZ_LEFT\020\002\022\021\n\rCLI_PTZ_RIGHT\020\003\022\023\n\017CLI_PTZ_"
      "ZOOM_IN\020\004\022\024\n\020CLI_PTZ_ZOOM_OUT\020\005\022\020\n\014CLI_P"
      "TZ_STOP\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "onvifcliptz.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_onvifcliptz_2eproto

const ::google::protobuf::EnumDescriptor* OnvifCliPTZCmdType_descriptor() {
  protobuf_onvifcliptz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifcliptz_2eproto::file_level_enum_descriptors[0];
}
bool OnvifCliPTZCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifCliPTZReq::kTokenFieldNumber;
const int OnvifCliPTZReq::kCmdFieldNumber;
const int OnvifCliPTZReq::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifCliPTZReq::OnvifCliPTZReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifcliptz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifCliPTZReq)
}
OnvifCliPTZReq::OnvifCliPTZReq(const OnvifCliPTZReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&cmd_, &from.cmd_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:OnvifCliPTZReq)
}

void OnvifCliPTZReq::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cmd_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(speed_));
  _cached_size_ = 0;
}

OnvifCliPTZReq::~OnvifCliPTZReq() {
  // @@protoc_insertion_point(destructor:OnvifCliPTZReq)
  SharedDtor();
}

void OnvifCliPTZReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OnvifCliPTZReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifCliPTZReq::descriptor() {
  protobuf_onvifcliptz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifcliptz_2eproto::file_level_metadata[0].descriptor;
}

const OnvifCliPTZReq& OnvifCliPTZReq::default_instance() {
  protobuf_onvifcliptz_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifCliPTZReq* OnvifCliPTZReq::New(::google::protobuf::Arena* arena) const {
  OnvifCliPTZReq* n = new OnvifCliPTZReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifCliPTZReq::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifCliPTZReq)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cmd_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(speed_));
}

bool OnvifCliPTZReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifCliPTZReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string token = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "OnvifCliPTZReq.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OnvifCliPTZCmdType cmd = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd(static_cast< ::OnvifCliPTZCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifCliPTZReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifCliPTZReq)
  return false;
#undef DO_
}

void OnvifCliPTZReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifCliPTZReq)
  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliPTZReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // .OnvifCliPTZCmdType cmd = 2;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cmd(), output);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifCliPTZReq)
}

::google::protobuf::uint8* OnvifCliPTZReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifCliPTZReq)
  // string token = 1;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "OnvifCliPTZReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // .OnvifCliPTZCmdType cmd = 2;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cmd(), target);
  }

  // float speed = 3;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifCliPTZReq)
  return target;
}

size_t OnvifCliPTZReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifCliPTZReq)
  size_t total_size = 0;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .OnvifCliPTZCmdType cmd = 2;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  // float speed = 3;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifCliPTZReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifCliPTZReq)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifCliPTZReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifCliPTZReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifCliPTZReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifCliPTZReq)
    MergeFrom(*source);
  }
}

void OnvifCliPTZReq::MergeFrom(const OnvifCliPTZReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifCliPTZReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void OnvifCliPTZReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifCliPTZReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifCliPTZReq::CopyFrom(const OnvifCliPTZReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifCliPTZReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifCliPTZReq::IsInitialized() const {
  return true;
}

void OnvifCliPTZReq::Swap(OnvifCliPTZReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifCliPTZReq::InternalSwap(OnvifCliPTZReq* other) {
  token_.Swap(&other->token_);
  std::swap(cmd_, other->cmd_);
  std::swap(speed_, other->speed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifCliPTZReq::GetMetadata() const {
  protobuf_onvifcliptz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifcliptz_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifCliPTZReq

// string token = 1;
void OnvifCliPTZReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OnvifCliPTZReq::token() const {
  // @@protoc_insertion_point(field_get:OnvifCliPTZReq.token)
  return token_.GetNoArena();
}
void OnvifCliPTZReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OnvifCliPTZReq.token)
}
#if LANG_CXX11
void OnvifCliPTZReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OnvifCliPTZReq.token)
}
#endif
void OnvifCliPTZReq::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OnvifCliPTZReq.token)
}
void OnvifCliPTZReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OnvifCliPTZReq.token)
}
::std::string* OnvifCliPTZReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:OnvifCliPTZReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OnvifCliPTZReq::release_token() {
  // @@protoc_insertion_point(field_release:OnvifCliPTZReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OnvifCliPTZReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:OnvifCliPTZReq.token)
}

// .OnvifCliPTZCmdType cmd = 2;
void OnvifCliPTZReq::clear_cmd() {
  cmd_ = 0;
}
::OnvifCliPTZCmdType OnvifCliPTZReq::cmd() const {
  // @@protoc_insertion_point(field_get:OnvifCliPTZReq.cmd)
  return static_cast< ::OnvifCliPTZCmdType >(cmd_);
}
void OnvifCliPTZReq::set_cmd(::OnvifCliPTZCmdType value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliPTZReq.cmd)
}

// float speed = 3;
void OnvifCliPTZReq::clear_speed() {
  speed_ = 0;
}
float OnvifCliPTZReq::speed() const {
  // @@protoc_insertion_point(field_get:OnvifCliPTZReq.speed)
  return speed_;
}
void OnvifCliPTZReq::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliPTZReq.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnvifCliPTZResp::kBRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnvifCliPTZResp::OnvifCliPTZResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_onvifcliptz_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:OnvifCliPTZResp)
}
OnvifCliPTZResp::OnvifCliPTZResp(const OnvifCliPTZResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bret_ = from.bret_;
  // @@protoc_insertion_point(copy_constructor:OnvifCliPTZResp)
}

void OnvifCliPTZResp::SharedCtor() {
  bret_ = false;
  _cached_size_ = 0;
}

OnvifCliPTZResp::~OnvifCliPTZResp() {
  // @@protoc_insertion_point(destructor:OnvifCliPTZResp)
  SharedDtor();
}

void OnvifCliPTZResp::SharedDtor() {
}

void OnvifCliPTZResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnvifCliPTZResp::descriptor() {
  protobuf_onvifcliptz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifcliptz_2eproto::file_level_metadata[1].descriptor;
}

const OnvifCliPTZResp& OnvifCliPTZResp::default_instance() {
  protobuf_onvifcliptz_2eproto::InitDefaults();
  return *internal_default_instance();
}

OnvifCliPTZResp* OnvifCliPTZResp::New(::google::protobuf::Arena* arena) const {
  OnvifCliPTZResp* n = new OnvifCliPTZResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OnvifCliPTZResp::Clear() {
// @@protoc_insertion_point(message_clear_start:OnvifCliPTZResp)
  bret_ = false;
}

bool OnvifCliPTZResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OnvifCliPTZResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool bRet = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OnvifCliPTZResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OnvifCliPTZResp)
  return false;
#undef DO_
}

void OnvifCliPTZResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OnvifCliPTZResp)
  // bool bRet = 1;
  if (this->bret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bret(), output);
  }

  // @@protoc_insertion_point(serialize_end:OnvifCliPTZResp)
}

::google::protobuf::uint8* OnvifCliPTZResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OnvifCliPTZResp)
  // bool bRet = 1;
  if (this->bret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bret(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:OnvifCliPTZResp)
  return target;
}

size_t OnvifCliPTZResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OnvifCliPTZResp)
  size_t total_size = 0;

  // bool bRet = 1;
  if (this->bret() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnvifCliPTZResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OnvifCliPTZResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OnvifCliPTZResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnvifCliPTZResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OnvifCliPTZResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OnvifCliPTZResp)
    MergeFrom(*source);
  }
}

void OnvifCliPTZResp::MergeFrom(const OnvifCliPTZResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OnvifCliPTZResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.bret() != 0) {
    set_bret(from.bret());
  }
}

void OnvifCliPTZResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OnvifCliPTZResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnvifCliPTZResp::CopyFrom(const OnvifCliPTZResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OnvifCliPTZResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnvifCliPTZResp::IsInitialized() const {
  return true;
}

void OnvifCliPTZResp::Swap(OnvifCliPTZResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnvifCliPTZResp::InternalSwap(OnvifCliPTZResp* other) {
  std::swap(bret_, other->bret_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OnvifCliPTZResp::GetMetadata() const {
  protobuf_onvifcliptz_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_onvifcliptz_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OnvifCliPTZResp

// bool bRet = 1;
void OnvifCliPTZResp::clear_bret() {
  bret_ = false;
}
bool OnvifCliPTZResp::bret() const {
  // @@protoc_insertion_point(field_get:OnvifCliPTZResp.bRet)
  return bret_;
}
void OnvifCliPTZResp::set_bret(bool value) {
  
  bret_ = value;
  // @@protoc_insertion_point(field_set:OnvifCliPTZResp.bRet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
