
#include "framework.h"

class ck_string_test : public test_fixture
{
public:

    TEST_SUITE(ck_string_test);
        TEST(ck_string_test::test_is_space);
        TEST(ck_string_test::test_constructor);
        TEST(ck_string_test::test_copy_constructor);
        TEST(ck_string_test::test_conversion_operator);
        TEST(ck_string_test::test_cstring);
        TEST(ck_string_test::test_assignment_operator);
        TEST(ck_string_test::test_equality_operator);
        TEST(ck_string_test::test_inequality_operator);
        TEST(ck_string_test::test_ends_with);
        TEST(ck_string_test::test_starts_with);
        TEST(ck_string_test::test_contains);
        TEST(ck_string_test::test_is_integer);
        TEST(ck_string_test::test_is_double);
        TEST(ck_string_test::test_lstrip);
        TEST(ck_string_test::test_rstrip);
        TEST(ck_string_test::test_strip);
        TEST(ck_string_test::test_strip_eol);
        TEST(ck_string_test::test_format);
        TEST(ck_string_test::test_operator_plus);
        TEST(ck_string_test::test_plus_equals);
        TEST(ck_string_test::test_sub_string);
        TEST(ck_string_test::test_split);
        TEST(ck_string_test::test_replace_all);
        TEST(ck_string_test::test_erase_all);
        TEST(ck_string_test::test_from_int);
        TEST(ck_string_test::test_from_uint);
        TEST(ck_string_test::test_from_int8);
        TEST(ck_string_test::test_from_uint8);
        TEST(ck_string_test::test_from_int16);
        TEST(ck_string_test::test_from_uint16);
        TEST(ck_string_test::test_from_int32);
        TEST(ck_string_test::test_from_uint32);
        TEST(ck_string_test::test_from_int64);
        TEST(ck_string_test::test_from_uint64);
        TEST(ck_string_test::test_from_double);
        TEST(ck_string_test::test_to_int);
        TEST(ck_string_test::test_to_uint);
        TEST(ck_string_test::test_to_int8);
        TEST(ck_string_test::test_to_uint8);
        TEST(ck_string_test::test_to_int16);
        TEST(ck_string_test::test_to_uint16);
        TEST(ck_string_test::test_to_int32);
        TEST(ck_string_test::test_to_uint32);
        TEST(ck_string_test::test_to_int64);
        TEST(ck_string_test::test_to_uint64);
        TEST(ck_string_test::test_to_double);
        TEST(ck_string_test::test_to_lower);
        TEST(ck_string_test::test_to_upper);
        TEST(ck_string_test::test_base64_encode);
        TEST(ck_string_test::test_base64_decode);
        TEST(ck_string_test::test_find_first);
        TEST(ck_string_test::test_find_last);
        TEST(ck_string_test::test_uri_encode);
        TEST(ck_string_test::test_uri_decode);
        TEST(ck_string_test::test_constructor_unicode);
        TEST(ck_string_test::test_copy_constructor_unicode);
        TEST(ck_string_test::test_wcstring);
        TEST(ck_string_test::test_assignment_operator_unicode);
        TEST(ck_string_test::test_ends_with_unicode_version);
        TEST(ck_string_test::test_starts_with_unicode_version);
        TEST(ck_string_test::test_contains_unicode_version);
        TEST(ck_string_test::test_operator_plus_unicode_version);
        TEST(ck_string_test::test_operator_plus_equals_unicode_version);
        TEST(ck_string_test::test_erase_all_unicode);
        TEST(ck_string_test::test_replace_all_unicode);
        TEST(ck_string_test::test_split_unicode);
        TEST(ck_string_test::test_find_first_unicode);
        TEST(ck_string_test::test_find_last_unicode);
    TEST_SUITE_END();

    virtual ~ck_string_test() throw() {}

    virtual void setup();
    virtual void teardown();

    void test_is_space();
    void test_constructor();
    void test_copy_constructor();
    void test_conversion_operator();
    void test_cstring();
    void test_assignment_operator();
    void test_equality_operator();
    void test_inequality_operator();
    void test_ends_with();
    void test_starts_with();
    void test_contains();
    void test_is_integer();
    void test_is_double();
    void test_lstrip();
    void test_rstrip();
    void test_strip();
    void test_strip_eol();
    void test_format();
    void test_operator_plus();
    void test_plus_equals();
    void test_sub_string();
    void test_split();
    void test_replace_all();
    void test_erase_all();
    void test_from_int();
    void test_from_uint();
    void test_from_int8();
    void test_from_uint8();
    void test_from_int16();
    void test_from_uint16();
    void test_from_int32();
    void test_from_uint32();
    void test_from_int64();
    void test_from_uint64();
    void test_from_double();
    void test_to_int();
    void test_to_uint();
    void test_to_int8();
    void test_to_uint8();
    void test_to_int16();
    void test_to_uint16();
    void test_to_int32();
    void test_to_uint32();
    void test_to_int64();
    void test_to_uint64();
    void test_to_double();
    void test_to_lower();
    void test_to_upper();
    void test_base64_encode();
    void test_base64_decode();
    void test_find_first();
    void test_find_last();
    void test_uri_encode();
    void test_uri_decode();
    void test_constructor_unicode();
    void test_copy_constructor_unicode();
    void test_wcstring();
    void test_assignment_operator_unicode();
    void test_ends_with_unicode_version();
    void test_starts_with_unicode_version();
    void test_contains_unicode_version();
    void test_operator_plus_unicode_version();
    void test_operator_plus_equals_unicode_version();
    void test_erase_all_unicode();
    void test_replace_all_unicode();
    void test_split_unicode();
    void test_find_first_unicode();
    void test_find_last_unicode();
};
